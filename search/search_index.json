{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Open World Agents","text":""},{"location":"#everything-you-need-to-build-state-of-the-art-foundation-multimodal-desktop-agent-end-to-end","title":"Everything you need to build state-of-the-art foundation multimodal desktop agent, end-to-end.","text":"<p>Streamline your agent's lifecycle with Open World Agents. From data capture to model training and real-time evaluation, everything is designed for flexibility and performance.</p> <p>Here's what we've got in store for you!</p> <ul> <li> <p>OWA's Env: The asynchronous, event-driven environmental interface for real-time agent</p> <ul> <li>Asynchronous, real-time event processing: Compared to existing LLM-agent frameworks and gymnasium.Env, OWA's Env features an asynchronous processing design leveraging <code>Callables</code>, <code>Listeners</code>, and <code>Runnables</code>. Learn more...</li> <li>Dynamic EnvPlugin Activation: Seamlessly register and activate EnvPlugins at runtime to customize and extend functionality, powered by registry pattern. Learn more...</li> <li>Extensible, Open-Source Design: Built for the community, by the community. Easily add custom plugins and extend the Env's functionality to suit your needs. Learn more...</li> </ul> </li> <li> <p>Predefined EnvPlugins: We provide you some EnvPlugins which is suitable for constructing multimodal desktop agent.</p> <ul> <li><code>owa-env-desktop</code>: Provides basic <code>Callables/Listeners</code> for mouse/keyboard/window events. </li> <li><code>owa-env-gst</code>: Powered by Windows APIs (<code>DXGI/WGC</code>) and the robust GStreamer framework, provides high-performance and efficient screen capture/recording features. <code>owa-env-gst</code>'s screen capture is 6x faster compared to alternatives. Learn more...</li> </ul> </li> </ul> <ul> <li>OWA's Data: From high-performance, robust and open-source friendly data format to powerful, efficient and huggingface integration.<ul> <li><code>OWAMcap</code> file format: high-performance, self-contained, flexible container file format for multimodal desktop log data, powered by the open-source container file format mcap. Learn more...</li> <li><code>owl mcap record your-filename.mcap</code>: powerful, efficient and easy-to-use desktop recorder. Contains keyboard/mouse and high-frequency screen data.<ul> <li>Powered by <code>owa-env-gst</code>, ensuring superior performance compared to alternatives. Learn more...</li> </ul> </li> <li>\ud83e\udd17 Hugging Face Integration: Upload your own dataset created by simple <code>owl mcap record</code> to huggingface and share with everyone! The era of open-source desktop data is near and effortless. Preview the dataset at Hugging Face Spaces.</li> </ul> </li> </ul> <ul> <li>Comprehensive Examples: We provides various examples that demonstrates how to build foundation multimodal desktop agent. Since it's just a example, you may customize anything you want. Examples are in progress; stay tuned!</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li> <p>Simple example of using <code>Callables</code> and <code>Listeners</code>. Learn more... <pre><code>import time\n\nfrom owa.core.registry import CALLABLES, LISTENERS, activate_module\n\n# Activate the standard environment module\nactivate_module(\"owa.env.std\")\n\ndef callback():\n    # Get current time in nanoseconds\n    time_ns = CALLABLES[\"clock.time_ns\"]()\n    print(f\"Current time in nanoseconds: {time_ns}\")\n\n# Create a listener for clock/tick event, Set listener to trigger every 1 second\ntick = LISTENERS[\"clock/tick\"]().configure(callback=callback, interval=1)\n\n# Start the listener\ntick.start()\n\n# Allow the listener to run for 2 seconds\ntime.sleep(2)\n\n# Stop the listener and wait for it to finish\ntick.stop(), tick.join()\n</code></pre></p> </li> <li> <p>Record your own desktop usage data by just running <code>owl mcap record your-filename.mcap</code>. Learn more...</p> </li> <li> <p>Curious about <code>OWAMCap</code> format? see following: (Note that <code>cat</code> output is a created example.) <pre><code>$ owl mcap info example.mcap\nlibrary:   mcap-owa-support 0.1.0; mcap 1.2.2\nprofile:   owa\nmessages:  2124\nduration:  17.6543448s\nstart:     2025-03-11T02:46:39.0329786+09:00 (1741628799.032978600)\nend:       2025-03-11T02:46:56.6873234+09:00 (1741628816.687323400)\ncompression:\n        zstd: [1/1 chunks] [173.83 KiB/28.29 KiB (83.73%)] [1.60 KiB/sec]\nchannels:\n        (1) window            18 msgs (1.02 Hz)    : owa.env.desktop.msg.WindowInfo [jsonschema]\n        (2) keyboard/state    18 msgs (1.02 Hz)    : owa.env.desktop.msg.KeyboardState [jsonschema]\n        (3) mouse           1064 msgs (60.27 Hz)   : owa.env.desktop.msg.MouseEvent [jsonschema]\n        (4) screen           978 msgs (55.40 Hz)   : owa.env.gst.msg.ScreenEmitted [jsonschema]\n        (5) keyboard          46 msgs (2.61 Hz)    : owa.env.desktop.msg.KeyboardEvent [jsonschema]\nchannels: 5\nattachments: 0\nmetadata: 0\n\n$ owl mcap cat example.mcap --n 8 --no-pretty\nTopic: window, Timestamp: 1741628814049712700, Message: {'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}\nTopic: keyboard/state, Timestamp: 1741628814049712700, Message: {'buttons': []}\nTopic: screen, Timestamp: 1741628814057575300, Message: {'path': 'example.mkv', 'pts': 14866666666,\n\n... (additional lines omitted for brevity) ...\n\nTopic: keyboard, Timestamp: 1741628814978561600, Message: {'event_type': 'press', 'vk': 162}\nTopic: keyboard, Timestamp: 1741628815015522100, Message: {'event_type': 'release', 'vk': 162}\nTopic: window, Timestamp: 1741628815050666400, Message: {'title': 'data_format.md - open-world-agents - Visual Studio Code', 'rect': [-8, -8, 1928, 1040], 'hWnd': 133438}\n\n... (additional lines omitted for brevity) ...\n\nTopic: mouse, Timestamp: 1741628816438561600, Message: {'event_type': 'move', 'x': 950, 'y': 891}\nTopic: mouse, Timestamp: 1741628816441655400, Message: {'event_type': 'click', 'x': 950, 'y': 891, 'button': 'left', 'pressed': true}\n</code></pre></p> </li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to:</p> <ul> <li>Set up your development environment.</li> <li>Submit bug reports.</li> <li>Propose new features.</li> <li>Create pull requests.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We'd love you to contribute to OWA!</p>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Questions, feature requests and bug reports are all welcome as discussions or issues. However, to report a security vulnerability, please see our security policy.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Feel free to create a Pull Request. Project maintainers will take a review quickly and give you a comments.</p> <p>To make contributing as easy and fast as possible, you'll want to run tests and linting locally. Luckily, OWA has few dependencies, doesn't require compiling and tests don't need access to databases, etc. Because of this, setting up and running the tests should be very simple.</p>"},{"location":"contributing/#run-tests","title":"Run tests","text":"<p>We're utilizing <code>pytest</code> for testing and <code>ruff</code> for formatting. Make sure your PR pass all tests in Github Actions.</p> <ol> <li>Run <code>pytest</code>.</li> <li>Run <code>ruff check</code>.</li> <li>Run <code>ruff format</code>.</li> </ol>"},{"location":"contributing/#how-to-test-documentation-changes","title":"How to Test Documentation Changes","text":"<p>If you contribute to the documentation\u2014such as by adding new markdown files under <code>docs/data/</code>\u2014please follow these steps to preview your changes locally before submitting a pull request:</p> <ol> <li> <p>Add your documentation:    Place your new markdown (<code>.md</code>) file in the <code>docs/data/</code> directory.</p> </li> <li> <p>Update navigation:    Edit <code>mkdocs.yaml</code> to include your new file in the site's navigation (<code>nav</code> section).</p> </li> <li> <p>Install documentation dependencies:    At the root of the project, run: <pre><code>vuv install --extra docs\n</code></pre>    This will install all necessary packages for building and serving the documentation site.</p> </li> <li> <p>Serve the documentation locally:    Start the local documentation server with: <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Preview your changes:    Open http://localhost:8000 in your web browser to view the documentation and verify your additions appear as expected.</p> </li> </ol> <p>Following these steps will help ensure your documentation contributions are correctly displayed and formatted. Thank you for helping improve the OWA documentation!</p>"},{"location":"faq_dev/","title":"Faq dev","text":""},{"location":"faq_dev/#how-to-disable-typer-specific-traceback","title":"How to disable <code>typer</code>-specific traceback?","text":"<p>set <code>_TYPER_STANDARD_TRACEBACK=1</code></p> <p>https://stackoverflow.com/questions/76375307/how-to-make-typer-traceback-look-normal</p>"},{"location":"help_with_owa/","title":"Getting help with OWA","text":"<p>If you need help getting started with OWA or with advanced usage, the following sources may be useful.</p>"},{"location":"help_with_owa/#github-discussions","title":"GitHub Discussions","text":"<p>GitHub discussions are useful for asking questions, your question and the answer will help everyone.</p>"},{"location":"help_with_owa/#direct-messages","title":"Direct Messages","text":"<p>If you need further assistance, please feel free to directly message the main contributors via Slack, Discord, or email:</p> <ul> <li>Suhwan Choi: milkclouds00@gmail.com</li> <li>Yunsung Lee: dldbstjd9751@gmail.com</li> </ul>"},{"location":"install/","title":"Installation Guide","text":""},{"location":"install/#installing-from-source","title":"Installing from source","text":"<p>Info</p> <p>Instead of installing from source, you may try <code>pip install owa</code>, following Install from PyPI guide, but note that this section is experimental.</p>"},{"location":"install/#minimal-installation-guide","title":"Minimal Installation Guide","text":"<p>If you do not require efficient screen capture with <code>owa-env-gst</code>, installation is simple as:</p> uvpip <pre><code>$ git clone https://github.com/open-world-agents/open-world-agents\n$ cd open-world-agents # Ensure you're at project root\n\n$ uv sync --inexact\n</code></pre> <pre><code>$ git clone https://github.com/open-world-agents/open-world-agents\n$ cd open-world-agents # Ensure you're at project root\n\n# Install core first\n$ pip install -e projects/owa-core\n\n# Install supporting packages\n$ pip install -e projects/mcap-owa-support\n$ pip install -e projects/owa-desktop\n$ pip install -e projects/owa-env-gst\n\n# Install CLI\n$ pip install -e projects/owa-cli\n</code></pre> <p>Tip</p> <p>When using <code>pip</code> instead of <code>uv</code>, the installation order matters because <code>pip</code> can't recognize <code>[tool.uv.sources]</code> in <code>pyproject.toml</code>.</p> <p>Tip</p> <p><code>open-world-agents</code> is a mono-repo which is composed with multiple sub-repository and most sub-repositories are <code>pip</code>-installable python package in itself.</p> <p>Only <code>owa-env-gst</code>, which utilizes GStreamer to efficiently capture screen deal with media processing, requires installing <code>gstreamer</code> by <code>conda</code>.</p> <p>If you are on Windows OS and require screen capture on the device, follow Full Installation Guide instead.</p>"},{"location":"install/#full-installation-guide","title":"Full Installation Guide","text":"<p>If you do require efficient screen capture with <code>owa-env-gst</code>, follow this guide.</p>"},{"location":"install/#setup-virtual-environment-13","title":"Setup Virtual Environment (1/3)","text":"<p>Before installation, we recommend setting up a virtual environment.</p> conda/mamba <ol> <li> <p>Follow the miniforge installation guide to install <code>conda</code> and <code>mamba</code>. <code>mamba</code> is just a faster <code>conda</code>. If you've already installed <code>conda</code>, you may skip this step.</p> </li> <li> <p>Create &amp; activate your virtual environment:    <pre><code>$ conda create -n owa python=3.11 -y\n$ conda activate owa\n</code></pre></p> </li> <li> <p>(Optional) For Windows users who need desktop recorder:    <pre><code>$ mamba env update --name owa --file projects/owa-env-gst/environment.yml\n</code></pre></p> </li> </ol> <p>Tip</p> <p>You can use other virtual environment tools, but to fully utilize <code>owa-env-gst</code>, you must install GStreamer with <code>conda/mamba</code>.</p> <p>Note: GStreamer is only needed if you plan to capture screens.</p>"},{"location":"install/#setup-uv-23","title":"Setup <code>uv</code> (2/3)","text":"<p>We recommend setting up <code>uv</code> next:</p> <ol> <li> <p>Follow the uv installation guide or simply run <code>pip install uv</code> in your activated environment.</p> </li> <li> <p>Install <code>virtual-uv</code> package:    <pre><code>$ pip install virtual-uv\n</code></pre></p> </li> </ol> <p>Tip</p> <p>Always activate your virtual environment before running any <code>vuv</code> commands.</p>"},{"location":"install/#installation-33","title":"Installation (3/3)","text":"<p>After all setup, installation is simple as:</p> vuv <pre><code>$ git clone https://github.com/open-world-agents/open-world-agents\n$ cd open-world-agents # Ensure you're at project root\n\n$ vuv install\n</code></pre> <p>Tip</p> <p>Always activate your virtual environment before running any <code>vuv</code> commands.</p>"},{"location":"install/#install-from-pypi-conda-forge-experimental","title":"Install from PyPI &amp; conda-forge (experimental)","text":"<p>Installation is simple as:</p> uvpip <pre><code>$ uv pip install owa\n</code></pre> <pre><code>$ pip install owa\n</code></pre> <p>There're several packages related to <code>open-world-agents</code>.</p> <ul> <li> <p>PyPI packages:</p> <ul> <li><code>owa-core</code>: Contains only the core logic to manage OWA's EnvPlugin</li> <li><code>owa</code>: Contains several base EnvPlugins along with <code>owa-core</code> (requires separate GStreamer installation)</li> <li>Note that we're adopting lockstep versioning, which provides same version for each first-party sub-projects. e.g. following version specification is valid: <pre><code>pip install owa-core==0.3.2 owa-cli==0.3.2 owa-env-desktop==0.3.2\n</code></pre></li> </ul> </li> <li> <p>Conda packages (Coming soon):</p> <ul> <li><code>owa</code>: Complete package including all dependencies (GStreamer bundled)</li> <li>The conda package will eliminate the need to install GStreamer separately</li> <li>In the future, users will be able to simply run <code>conda install -c conda-forge owa</code> to get a fully functional installation</li> <li>Note: This implementation is still in progress and not yet available</li> </ul> </li> </ul>"},{"location":"project_overview/","title":"Project Overview","text":"<p><code>open-world-agents</code> is a mono-repo which is composed with multiple sub-repository. e.g. <code>projects/mcap-owa-support, projects/owa-cli, projects/owa-core, projects/owa-env-desktop</code>.</p> <p>Each sub-repository is a self-contained repository which may have other sub-repository as dependencies.</p> <p>Most of subprojects inside <code>projects</code> are python package in itself; In other words, they are installable by <code>pip</code> or <code>uv</code>. Since we're utilizing <code>uv</code>, we recommend you to use <code>uv</code> as package manager.</p> <p>We're adopting namespace packages. Most <code>owa</code>-related packages, including EnvPlugins, are installed in <code>owa</code> namespace, e.g. <code>owa.core</code>, <code>owa.cli</code>, <code>owa.env.desktop</code>. For more detail, see Packaging namespace packages</p> <pre><code>open-world-agents/\n\u251c\u2500\u2500 projects/\n\u2502   \u251c\u2500\u2500 mcap-owa-support\n\u2502   \u251c\u2500\u2500 owa-core/         \n\u2502   \u251c\u2500\u2500 owa-cli/\n\u2502   \u251c\u2500\u2500 owa-env-desktop/\n\u2502   \u251c\u2500\u2500 owa-env-example/\n\u2502   \u251c\u2500\u2500 owa-env-gst/\n\u2502   \u2514\u2500\u2500 and also more! e.g. you may contribute owa-env-minecraft!\n\u251c\u2500\u2500 docs/              # Documentation\n\u2514\u2500\u2500 README.md         # Project overview\n</code></pre>"},{"location":"data/","title":"Open-sourcing Dataset for Multimodal Desktop Agent","text":"<p>As of now (March 22, 2025), there are few datasets available for building multimodal desktop agents.</p> <p>Even more scarce are datasets that (1) contain high-frequency screen data, (2) have keyboard/mouse information timestamp-aligned with other modalities like screen recordings, and (3) include human demonstrations.</p> <p>To address this gap, open-world-agents provides the following three solutions:</p> <ol> <li> <p>File Format - <code>OWAMcap</code>: A high-performance, self-contained, flexible container file format for multimodal desktop log data, powered by the open-source container file format mcap. Learn more...</p> </li> <li> <p>Desktop Recorder - <code>owl mcap record your-filename.mcap</code>: A powerful, efficient, and easy-to-use desktop recorder that captures keyboard/mouse and high-frequency screen data.</p> <ul> <li>Powered by <code>owa-env-gst</code>, ensuring superior performance compared to alternatives. Learn more...</li> </ul> </li> <li> <p>\ud83e\udd17 Hugging Face Integration: Upload your own dataset created by simple <code>owl mcap record</code> to huggingface and share with everyone! The era of open-source desktop data is near and effortless. Preview the dataset at Hugging Face Spaces.</p> </li> </ol>"},{"location":"data/data_format/","title":"Introducing OWAMcap","text":""},{"location":"data/data_format/#overview","title":"Overview","text":"<p>OWAMcap is a high-performance, self-contained, flexible container file format for multimodal desktop log data, powered by the open-source container file format mcap. This format is designed for efficiently recording and processing message data in Open World Agents (OWA) applications.</p> <p>So, what exactly is mcap?</p> <p>Simply put, mcap is a format that allows you to record various types of events such as keyboard events, mouse events, and screen captures along with their timestamps. For more detailed information, please refer to the OWAMcap Format Specification section.</p>"},{"location":"data/data_format/#usage-example-of-owamcap-desktop-recorder","title":"Usage Example of OWAMcap - Desktop Recorder","text":"<p>What exactly does the OWAMcap format contain? Let's demonstrate with an example of recorded desktop data. Below are sample datasets that you can download and explore yourself:</p> <ul> <li><code>example.mcap</code> [Download]</li> <li><code>example.mkv</code> [Download]</li> </ul> Click here to see <code>example.mkv</code>! <p> </p>"},{"location":"data/data_format/#exploring-example-data","title":"Exploring Example Data","text":"<p>Let's examine the contents of an OWAMcap file using the <code>owl</code> command-line tool (Open World agents cLi).</p>"},{"location":"data/data_format/#file-summary-with-owl-mcap-info","title":"File Summary with <code>owl mcap info</code>","text":"<p>First, we can get an overview of the file structure:</p> <pre><code>$ owl mcap info example.mcap\nlibrary:   mcap-owa-support 0.1.0; mcap 1.2.2\nprofile:   owa\nmessages:  518\nduration:  6.8558623s\nstart:     2025-03-21T17:06:30.7029335+09:00 (1742544390.702933500)\nend:       2025-03-21T17:06:37.5587958+09:00 (1742544397.558795800)\ncompression:\n        zstd: [1/1 chunks] [48.19 KiB/9.42 KiB (80.44%)] [1.37 KiB/sec]\nchannels:\n        (1) window            7 msgs (1.02 Hz)    : owa.env.desktop.msg.WindowInfo [jsonschema]\n        (2) keyboard/state    7 msgs (1.02 Hz)    : owa.env.desktop.msg.KeyboardState [jsonschema]\n        (3) mouse/state       7 msgs (1.02 Hz)    : owa.env.desktop.msg.MouseState [jsonschema]\n        (4) mouse           115 msgs (16.77 Hz)   : owa.env.desktop.msg.MouseEvent [jsonschema]\n        (5) screen          362 msgs (52.80 Hz)   : owa.env.gst.msg.ScreenEmitted [jsonschema]\n        (6) keyboard         20 msgs (2.92 Hz)    : owa.env.desktop.msg.KeyboardEvent [jsonschema]\nchannels: 6\nattachments: 0\nmetadata: 0\n</code></pre> <p>Key observations from this output:</p> <ol> <li> <p>File Overview:</p> <ul> <li>Contains 518 messages recorded over 6.86 seconds</li> <li>Records from March 21, 2025, with precise start and end timestamps</li> </ul> </li> <li> <p>Compression:</p> <ul> <li>Uses zstd compression, reducing file size by 80.44%</li> </ul> </li> <li> <p>Channels (Topics):</p> <ul> <li>The file contains 6 different channels (or topics), each tracking a specific type of event:</li> </ul> </li> </ol> Channel # Name Message Count Frequency Message Type 1 window 7 msgs 1.02 Hz WindowInfo 2 keyboard/state 7 msgs 1.02 Hz KeyboardState 3 mouse/state 7 msgs 1.02 Hz MouseState 4 mouse 115 msgs 16.77 Hz MouseEvent 5 screen 362 msgs 52.80 Hz ScreenEmitted 6 keyboard 20 msgs 2.92 Hz KeyboardEvent <p>For example, looking at channel #5 (screen), we can see:</p> <ul> <li>The topic name is \"screen\"</li> <li>It contains 362 messages</li> <li>Recording frequency is 52.80 Hz (slightly lower than the intended 60 Hz, likely due to the short recording time)</li> <li>Messages are of type <code>owa.env.gst.msg.ScreenEmitted</code></li> </ul>"},{"location":"data/data_format/#detailed-message-inspection-with-owl-mcap-cat","title":"Detailed Message Inspection with <code>owl mcap cat</code>","text":"<p>To examine individual messages, we can use the <code>cat</code> command:</p> <pre><code>$ owl mcap cat example.mcap --n 8 --no-pretty\nTopic: window, Timestamp: 1741628814049712700, Message: {'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}\nTopic: keyboard/state, Timestamp: 1741628814049712700, Message: {'buttons': []}\nTopic: mouse/state, Timestamp: 1742544390703436600, Message: {'x': 1594, 'y': 1112, 'buttons': []}\nTopic: mouse, Timestamp: 1742544390707441200, Message: {'event_type': 'move', 'x': 1597, 'y': 1112}\nTopic: screen, Timestamp: 1741628814057575300, Message: {'path': 'example.mkv', 'pts': 14866666666, 'utc_ns': 1741628814056571100}\nTopic: screen, Timestamp: 1741628814073392700, Message: {'path': 'example.mkv', 'pts': 14883333333, 'utc_ns': 1741628814072476900}\nTopic: keyboard, Timestamp: 1741628815015522100, Message: {'event_type': 'release', 'vk': 162}\n</code></pre> <p>What we can learn from these messages:</p> <ol> <li> <p>Window messages - Track active windows</p> <ul> <li>Example: <code>{'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}</code></li> <li>Shows which window was active, its title, position and size</li> </ul> </li> <li> <p>Mouse messages - Track cursor position and button states</p> <ul> <li>Position tracking: <code>{'x': 1597, 'y': 1112}</code></li> <li>Event types include: \"move\", \"click\", etc.</li> </ul> </li> <li> <p>Keyboard messages - Track key presses and releases</p> <ul> <li>Example: <code>{'event_type': 'release', 'vk': 162}</code></li> <li>Records which virtual key was pressed or released</li> </ul> </li> <li> <p>Screen messages - Link to video frames in the MKV file</p> <ul> <li>Contains paths, presentation timestamps, and UTC timestamps</li> </ul> </li> </ol>"},{"location":"data/data_format/#using-this-data","title":"Using This Data","text":"<p>This structured data allows for powerful analysis and use cases:</p> <ul> <li>You can filter data based on which window was active at a particular time</li> <li>You can synchronize keyboard/mouse events with screen captures</li> <li>The timestamps allow for precise reconstruction of user interactions</li> </ul> <p>What's VK(Virtual Key Code)?</p> <p>Operating systems don't directly use the physical keyboard input values (scan codes) but instead use virtualized keys called VKs. OWA's recorder uses VKs to record keyboard-agnostic data. If you're interested in more details, you can refer to the following resources:</p> <ul> <li>Keyboard Input Overview, Microsoft</li> <li>Virtual-Key Codes, Microsoft</li> </ul>"},{"location":"data/data_format/#internals-owamcap-format-specification","title":"Internals - OWAMcap Format Specification","text":"<p>Note for Users</p> <p>This part is intended for developers who want to utilize the OWAMcap file format for their own applications. Regular users of the library may not need this information.</p>"},{"location":"data/data_format/#technical-specifications","title":"Technical Specifications","text":"<ul> <li>OWAMcap uses the standard <code>mcap</code> format with <code>json</code> schema</li> <li>The <code>mcap-owa-support</code> Python package, which is within the open-world-agents repository, provides decoders, writers, and readers for this format</li> <li>All messages must inherit from or implement the <code>BaseMessage</code> class from <code>owa.core.message</code></li> </ul> <p>What's MCAP?</p> <p>MCAP (pronounced \"em-cap\") is an open-source container file format designed for multimodal log data. It supports multiple channels of timestamped pre-serialized data and is ideal for pub/sub or robotics applications.</p> <p>Key advantages of MCAP:</p> <ul> <li>High Performance: Efficient storage and retrieval of large event data streams</li> <li>Flexible &amp; Open: Works with diverse data types beyond robotics</li> <li>Self-Describing: Encodes schema information to ensure compatibility</li> </ul> <p>Learn more about MCAP</p>"},{"location":"data/data_format/#implementation-guide","title":"Implementation Guide","text":"<p>Any message that implements <code>BaseMessage</code> can be recorded in the OWAMcap format. This provides flexibility while maintaining a consistent interface. Following block describes the interface of <code>BaseMessage</code>.</p> <pre><code>class BaseMessage(ABC):\n    _type: str\n\n    @abstractmethod\n    def serialize(self, buffer: io.BytesIO): ...\n\n    @classmethod\n    @abstractmethod\n    def deserialize(cls, buffer: io.BytesIO) -&gt; Self: ...\n\n    @classmethod\n    @abstractmethod\n    def get_schema(cls): ...\n</code></pre>"},{"location":"data/data_format/#file-format-considerations","title":"File Format Considerations","text":""},{"location":"data/data_format/#why-use-mcap","title":"Why Use <code>.mcap</code>?","text":"<p>There are very few open-source formats available for heterogeneous timestamped data. ROS's bagfile format is one option, but it heavily depends on the ROS ecosystem and often requires installation of ROS1/2. In comparison, <code>mcap</code> is self-contained and efficient, especially for random read (or seeking) operations, which is critical for training VLA (Vision-Language-Action) models.</p>"},{"location":"data/how_to_explorer_and_edit/","title":"Exploring &amp; Editing OWAMcap","text":""},{"location":"data/how_to_explorer_and_edit/#sample-datasets","title":"Sample Datasets","text":"<p>Below are sample datasets you can download and explore:</p> <ul> <li><code>example.mcap</code> [Download]</li> <li><code>example.mkv</code> [Download]</li> </ul> Click here to see <code>example.mkv</code>! <p> </p>"},{"location":"data/how_to_explorer_and_edit/#how-to-explore-the-dataset","title":"How to Explore the Dataset","text":"<p>There are multiple ways to explore OWAMcap files. Here are three methods:</p>"},{"location":"data/how_to_explorer_and_edit/#1-using-the-owl-command-line-tool","title":"1. Using the <code>owl</code> Command Line Tool","text":"<p>The <code>owl</code> (Open World agents cLi) tool provides a convenient way to inspect MCAP files.</p>"},{"location":"data/how_to_explorer_and_edit/#getting-a-summary","title":"Getting a Summary","text":"<p>View a summary of the MCAP file:</p> <pre><code>$ owl mcap info example.mcap\nlibrary:   mcap-owa-support 0.1.0; mcap 1.2.2\nprofile:   owa\nmessages:  518\nduration:  6.8558623s\nstart:     2025-03-21T17:06:30.7029335+09:00 (1742544390.702933500)\nend:       2025-03-21T17:06:37.5587958+09:00 (1742544397.558795800)\ncompression:\n        zstd: [1/1 chunks] [48.19 KiB/9.42 KiB (80.44%)] [1.37 KiB/sec]\nchannels:\n        (1) window            7 msgs (1.02 Hz)    : owa.env.desktop.msg.WindowInfo [jsonschema]\n        (2) keyboard/state    7 msgs (1.02 Hz)    : owa.env.desktop.msg.KeyboardState [jsonschema]\n        (3) mouse/state       7 msgs (1.02 Hz)    : owa.env.desktop.msg.MouseState [jsonschema]\n        (4) mouse           115 msgs (16.77 Hz)   : owa.env.desktop.msg.MouseEvent [jsonschema]\n        (5) screen          362 msgs (52.80 Hz)   : owa.env.gst.msg.ScreenEmitted [jsonschema]\n        (6) keyboard         20 msgs (2.92 Hz)    : owa.env.desktop.msg.KeyboardEvent [jsonschema]\nchannels: 6\nattachments: 0\nmetadata: 0\n</code></pre>"},{"location":"data/how_to_explorer_and_edit/#examining-message-content","title":"Examining Message Content","text":"<p>Inspect detailed messages (note that the output below is a created example):</p> <pre><code>$ owl mcap cat example.mcap --n 8 --no-pretty\nTopic: window, Timestamp: 1741628814049712700, Message: {'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}\nTopic: keyboard/state, Timestamp: 1741628814049712700, Message: {'buttons': []}\nTopic: mouse/state, Timestamp: 1742544390703436600, Message: {'x': 1594, 'y': 1112, 'buttons': []}\nTopic: mouse, Timestamp: 1742544390707441200, Message: {'event_type': 'move', 'x': 1597, 'y': 1112}\nTopic: screen, Timestamp: 1741628814057575300, Message: {'path': 'example.mkv', 'pts': 14866666666, 'utc_ns': 1741628814056571100}\nTopic: screen, Timestamp: 1741628814073392700, Message: {'path': 'example.mkv', 'pts': 14883333333, 'utc_ns': 1741628814072476900}\nTopic: keyboard, Timestamp: 1741628815015522100, Message: {'event_type': 'release', 'vk': 162}\n</code></pre>"},{"location":"data/how_to_explorer_and_edit/#2-using-owamcapreader-in-python","title":"2. Using <code>OWAMcapReader</code> in Python","text":"<p>You can programmatically access the MCAP data using the Python API:</p> <pre><code>from mcap_owa.highlevel import OWAMcapReader\n\ndef main():\n    with OWAMcapReader(\"tmp/example.mcap\") as reader:\n        # Print available topics and time range\n        print(reader.topics)\n        print(reader.start_time, reader.end_time)\n\n        # Iterate through all messages\n        for topic, timestamp, msg in reader.iter_decoded_messages():\n            print(f\"Topic: {topic}, Timestamp: {timestamp}, Message: {msg}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"data/how_to_explorer_and_edit/#3-using-a-media-player-eg-vlc","title":"3. Using a Media Player (e.g., VLC)","text":"<p>For visual exploration of the data:</p> <ol> <li> <p>Convert MCAP to SRT subtitle format:    <pre><code># This command converts abcd.mcap into abcd.srt\nowl mcap convert abcd.mcap\n</code></pre></p> </li> <li> <p>Open the .mkv file with a media player that supports subtitles. We recommend VLC media player. You may also check <code>example.srt</code> [Download]</p> </li> </ol>"},{"location":"data/how_to_explorer_and_edit/#how-to-edit-owamcap-files","title":"How to Edit OWAMcap Files","text":"<p>You can create and modify OWAMcap files using the Python API. The example below demonstrates writing and reading messages:</p> <pre><code>import tempfile\n\nfrom mcap_owa.highlevel import OWAMcapReader, OWAMcapWriter\nfrom owa.core.message import OWAMessage\nfrom owa.env.desktop.msg import KeyboardEvent\n\n\nclass String(OWAMessage):\n    _type = \"std_msgs/String\"\n    data: str\n\n\ndef main():\n    with tempfile.TemporaryDirectory() as tmpdir:\n        file_path = tmpdir + \"/output.mcap\"\n\n        # Writing messages to an OWAMcap file\n        with OWAMcapWriter(file_path) as writer:\n            for i in range(0, 10):\n                publish_time = i\n                if i % 2 == 0:\n                    topic = \"/chatter\"\n                    event = String(data=\"string message\")\n                else:\n                    topic = \"/keyboard\"\n                    event = KeyboardEvent(event_type=\"press\", vk=1)\n                writer.write_message(topic, event, publish_time=publish_time)\n\n        # Reading messages from an OWAMcap file\n        with OWAMcapReader(file_path) as reader:\n            for topic, timestamp, msg in reader.iter_decoded_messages():\n                print(f\"Topic: {topic}, Timestamp: {timestamp}, Message: {msg}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Example output:</p> <pre><code>Topic: /chatter, Timestamp: 1741767097157638598, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097157965764, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097157997762, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158019602, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097158036925, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158051239, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097158065463, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158089318, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097158113250, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158129738, Message: {'event_type': 'press', 'vk': 1}\n</code></pre>"},{"location":"data/recorder/install_and_usage/","title":"Installation &amp; Usage","text":"<p>This guide will help you install and use the owl(Open World agent cLi) for high-performance screen recording and event capturing.</p>"},{"location":"data/recorder/install_and_usage/#supported-os-hw","title":"\ud83d\udda5 Supported OS &amp; HW","text":"<ul> <li>Windows 10+ (Tier 1): Fully optimized with Direct3D 11 integration.  <ul> <li>GPU: NVIDIA (supports for w/o NVIDIA GPU is in TODO)  </li> </ul> </li> <li>macOS: Work in progress.  </li> <li> <p>Linux: Work in progress.</p> </li> <li> <p>\u26a0\ufe0f Recommended Setup: The load from the recorder is similar to OBS recording. To run games and recording simultaneously, you'll need hardware specifications similar to what would be required when streaming the same game using OBS.</p> </li> </ul>"},{"location":"data/recorder/install_and_usage/#installation","title":"Installation","text":""},{"location":"data/recorder/install_and_usage/#quick-start-guide","title":"Quick-Start Guide","text":"<ol> <li>Download <code>owl.zip</code> in OWA releases</li> <li>unzip <code>owl.zip</code></li> <li>You may choose among 2 options:<ol> <li>double-click <code>run.bat</code> on Windows Explorer. It opens up terminal(<code>cmd</code>) with virtual environment activated. Run <code>owl mcap --help</code> on terminal.</li> <li>on CLI(<code>cmd/powershell</code>), run <code>run.bat mcap --help</code>. Note that <code>run.bat (args)</code> is equivalent to <code>owl (args)</code>.</li> </ol> </li> <li>Done!</li> </ol>"},{"location":"data/recorder/install_and_usage/#manual-installation-guide","title":"Manual Installation Guide","text":"<p>Follow the OWA Installation Guide, make sure to install GStreamer using conda.</p>"},{"location":"data/recorder/install_and_usage/#usage","title":"Usage","text":"<p>The OWA Recorder can be used to capture screen, audio, and various desktop events. Below are the basic usage instructions.</p>"},{"location":"data/recorder/install_and_usage/#basic-command","title":"Basic Command","text":"<p>To start recording, use the following command: <pre><code>owl mcap record --help\n\n Usage: owl mcap record [OPTIONS] FILE_LOCATION                                                                                                       \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    file_location      TEXT  The location of the output file, use `.mkv` extension. [default: None] [required]                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --record-audio          --no-record-audio                 Whether to record audio [default: record-audio]                                    \u2502\n\u2502 --record-video          --no-record-video                 Whether to record video [default: record-video]                                    \u2502\n\u2502 --record-timestamp      --no-record-timestamp             Whether to record timestamp [default: record-timestamp]                            \u2502\n\u2502 --window-name                                    TEXT     The name of the window to capture, substring of window name is supported           \u2502\n\u2502                                                           [default: None]                                                                    \u2502\n\u2502 --monitor-idx                                    INTEGER  The index of the monitor to capture [default: None]                                \u2502\n\u2502 --install-completion                                      Install completion for the current shell.                                          \u2502\n\u2502 --show-completion                                         Show completion for the current shell, to copy it or customize the installation.   \u2502\n\u2502 --help                                                    Show this message and exit.                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p>"},{"location":"data/recorder/install_and_usage/#example-usage","title":"Example Usage","text":"<ol> <li> <p>Record screen and audio:     <pre><code>owl mcap record output.mkv --record-audio --record-video\n</code></pre></p> </li> <li> <p>Record a specific window:     <pre><code>owl mcap record output.mkv --window-name \"My Application\"\n</code></pre></p> </li> <li> <p>Record a specific monitor:     <pre><code>owl mcap record output.mkv --monitor-idx 1\n</code></pre></p> </li> <li> <p>Disable audio recording:     <pre><code>owl mcap record output.mkv --no-record-audio\n</code></pre></p> </li> </ol>"},{"location":"data/recorder/install_and_usage/#stopping-the-recording","title":"Stopping the Recording","text":"<p>To stop the recording, simply press <code>Ctrl+C</code>.</p>"},{"location":"data/recorder/install_and_usage/#additional-information","title":"Additional Information","text":"<ul> <li> <p>Output Files:</p> <ul> <li>For the format of output file, see Data Format Guide</li> </ul> </li> <li> <p>Performance:</p> <ul> <li>OWA Recorder is optimized for high performance with minimal CPU/GPU usage.</li> <li>It supports high-frequency capture (144+ FPS) and real-time performance with sub-1ms latency.</li> </ul> </li> </ul> <p>For more details on the features and performance of OWA Recorder, refer to the Why use OWA Recorder section.</p>"},{"location":"data/recorder/install_and_usage/#real-time-latency-information","title":"Real-time latency information","text":"<ul> <li>Currently, <code>probe</code> in <code>appsink_recorder</code> and appsink callback in screen listener automatically warns you if <code>latency &gt; 30ms</code>. And in <code>recorder</code> it warns you if it takes <code>&gt; 20ms</code> to write a queued events. In common case you would not see this warning but if you so, be take care of the system's performance and loads.</li> <li>Normally, it takes some time(e.g. <code>170ms</code>) for screen record to be started. In other words, first screen record event is recorded after some time.</li> </ul>"},{"location":"data/recorder/why/","title":"Introducing Desktop Recorder","text":"<p>OWA's Recorder is a powerful, efficient, and easy-to-use screen recording tool designed for modern workflows. Whether you need precise event tracking, high-performance screen capture, or seamless audio synchronization, it delivers everything in a lightweight yet robust package.  </p>"},{"location":"data/recorder/why/#key-features","title":"\u2705 Key Features","text":"<ul> <li> <p>\ud83d\udd39 Simple &amp; Intuitive \u2014 Start recording with: <pre><code>owl mcap record FILE_LOCATION\n</code></pre>     Stop with <code>Ctrl+C</code>. Learn more... </p> </li> <li> <p>\ud83c\udfa5 All-in-One Recording \u2014 Captures screen, audio, and timestamps in a single <code>.mkv</code> file.  </p> <ul> <li>Timestamps are embedded as subtitles.  </li> <li>Logs keyboard, mouse, and window events in mcap format. For data format, Learn more... </li> </ul> </li> <li> <p>\ud83c\udfaf Flexible Capture Options \u2014 Supports <code>fps</code>, <code>window-name</code>, <code>monitor-index</code>, <code>show-cursor</code>, and more. Learn more...</p> </li> <li> <p>\u26a1 Optimized Performance \u2014 Hardware-accelerated pipeline ensures high FPS with low CPU/GPU usage.  </p> <ul> <li>Uses Windows APIs (<code>DXGI/WGC</code> for screen, <code>WASAPI</code> for audio).  </li> </ul> </li> </ul>"},{"location":"data/recorder/why/#feature-comparison","title":"\ud83d\udcca Feature Comparison","text":"Feature OWA's Recorder wcap pillow/mss Timestamp embedding (subtitles) \u2705 Yes \u274c No \u274c No Python API support \u2705 Yes \u274c No \u274c No Audio + Window + Keyboard + Mouse \u2705 Yes \u274c No \u274c No Supports latest Windows APIs \u2705 Yes \u2705 Yes \u274c No (legacy APIs only) Hardware-accelerated encoder \u2705 Yes \u2705 Yes \u274c No Optional mouse cursor capture \u2705 Yes \u2705 Yes \u274c No"},{"location":"data/recorder/why/#performance-benchmark","title":"\u26a1 Performance Benchmark","text":"<p>OWA's Recorder significantly outperforms other Python screen capture tools:  </p> Library Avg. Time per Frame Relative Speed OWA Recorder 5.7 ms \u26a1 1\u00d7 (Fastest) <code>pyscreenshot</code> 33 ms \ud83d\udeb6\u200d\u2642\ufe0f 5.8\u00d7 slower <code>PIL</code> 34 ms \ud83d\udeb6\u200d\u2642\ufe0f 6.0\u00d7 slower <code>MSS</code> 37 ms \ud83d\udeb6\u200d\u2642\ufe0f 6.5\u00d7 slower <code>PyQt5</code> 137 ms \ud83d\udc22 24\u00d7 slower <p>\ud83d\udccc Tested on: Intel i5-11400, GTX 1650  </p> <p>Not only does OWA Recorder achieve higher FPS, but it also maintains lower CPU/GPU usage, making it the ideal choice for screen recording.  </p>"},{"location":"env/","title":"Introducing OWA's Env","text":"<p>Open World Agents (OWA) introduces Env, a groundbreaking modular agent system designed for dynamic, real-time environments. Say goodbye to rigid frameworks with fixed interfaces\u2014Env's flexible architecture lets you activate and customize components on the fly.</p>"},{"location":"env/#why-choose-owas-env","title":"Why Choose OWA's Env?","text":"<p>Traditional environmental interfaces like gymnasium.Env fall short when it comes to building real-time, real-world agents. They rely on synchronous steps (<code>env.step()</code>, <code>env.reset()</code>), which assume your agent has infinite time to process actions. That's not realistic for agents that need to react instantly in dynamic environments.</p> <p>Env changes the game with an event-driven, asynchronous design that mirrors real-world interactions. Here's what sets it apart:</p> <ul> <li> <p>Asynchronous Event Processing: Leverage <code>Callables</code>, <code>Listeners</code>, and <code>Runnables</code> for real-time interaction. No more waiting for <code>env.step()</code>\u2014the world doesn't stop, and neither should your agent.</p> </li> <li> <p>Dynamic EnvPlugin Activation: Seamlessly register and activate <code>EnvPlugins</code> at runtime to extend functionality, powered by registry pattern. Learn how to create custom plugins.</p> </li> <li> <p>Extensible, Open-Source Design: Built for the community, by the community. Easily add custom plugins and extend the Env's functionality to suit your needs.</p> </li> </ul>"},{"location":"env/#the-future-is-real-time","title":"The Future is Real-Time","text":"<p>Time waits for no one\u2014and neither do real-world agents. As we advance towards more responsive AI, agents must be capable of instantaneous reactions, just like humans. Env's architecture enables:</p> <ul> <li> <p>True Concurrent Processing: Handle multiple events simultaneously without bottlenecks.</p> </li> <li> <p>Measured Reaction Times: Agents operate within realistic timeframes, ensuring timely responses in dynamic settings.</p> </li> </ul> <p>We prioritize minimizing latency within the framework, aiming for agent reaction times that match or surpass human capabilities. Throughout our codebase, we ensure latency doesn't exceed 30ms. Check out how we achieve this in our Appsink Recorder, Screen Listeners, and Test Screen Listener.</p>"},{"location":"env/#get-started-today","title":"Get Started Today","text":"<p>Don't let outdated frameworks hold you back. Embrace the future with OWA's Env and build agents that are ready for the real world.</p> <p>Learn more about OWA's Env Design.</p>"},{"location":"env/custom_plugins/","title":"How to write your own EnvPlugin","text":"<p>You may write &amp; contribute your own EnvPlugin.</p> <ol> <li>Copy &amp; Paste owa-env-example directory. This directory contains following:     <pre><code>owa-env-example\n\u251c\u2500\u2500 owa/env/example\n\u2502   \u251c\u2500\u2500 example_callable.py\n\u2502   \u251c\u2500\u2500 example_listener.py\n\u2502   \u251c\u2500\u2500 example_runnable.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 test_print.py\n\u2514\u2500\u2500 uv.lock\n</code></pre></li> <li>Rename <code>owa-env-example</code> to your own EnvPlugin's name.</li> <li>Write your own code in the specific source folder.<ul> <li>Important: To maintain the namespace package structure, all source files must only be written inside the <code>owa/env/example</code> folder.</li> <li>What NOT to do: Don't place source files in paths between <code>owa</code> and <code>owa/env/example</code> (e.g., <code>owa/some_file.py</code> or <code>owa/env/some_file.py</code>).</li> <li>Correct structure:     <pre><code>owa\n\u2514\u2500\u2500 env\n    \u2514\u2500\u2500 example\n        \u251c\u2500\u2500 your_code.py\n        \u251c\u2500\u2500 your_module.py\n        \u2514\u2500\u2500 __init__.py\n</code></pre></li> </ul> </li> <li>Make sure your repository contains all dependencies. We recommend you to use <code>uv</code> as package manager.</li> <li>Make a PR, following Contributing Guide</li> </ol>"},{"location":"env/guide/","title":"Comprehensive Guide for Env","text":""},{"location":"env/guide/#core-concepts","title":"Core Concepts","text":""},{"location":"env/guide/#three-main-components","title":"Three Main Components:","text":"<p>Open World Agents (OWA)'s Env consists of three primary components that enable interaction with the environment in different ways.</p> <ol> <li> <p>Callable - Functions you actively call to perform actions or get state</p> <ul> <li>These are like traditional function calls; you invoke them when you need to perform an action or retrieve some information from the environment.</li> <li>Implements <code>__call__</code> function</li> <li>Example: <code>CALLABLES[\"clock.time_ns\"]()</code></li> </ul> </li> <li> <p>Listener - Components that respond to events and execute your callbacks</p> <ul> <li>Listeners wait for specific events and execute your callback functions when those events occur.</li> <li>Takes a <code>callback</code> parameter in the <code>configure</code> method</li> <li>Example: <pre><code>listener = LISTENERS[\"keyboard\"]().configure(callback=my_callback)\nwith listener.session:\n    input(\"Type enter to exit.\")\n</code></pre> This example sets up a keyboard listener that invokes <code>my_callback</code> whenever a keyboard event is detected.</li> </ul> </li> <li> <p>Runnable - Background processes that can be started and stopped</p> <ul> <li>Runnables run in the background and can be managed with start and stop operations.</li> <li>Parent class of <code>Listener</code>, the only difference is absence of <code>callback</code> argument in <code>configure</code>.</li> <li>Supports <code>start()</code>, <code>stop()</code>, and <code>join()</code> operations</li> </ul> </li> </ol> <p>What's the difference between Callable and Listener?</p> <p>The key difference between these two is who initiates the call:</p> <ul> <li>In Callable, caller actively executes the Callable.</li> <li>In Listener, callee waits for events and then calls user-provided \"callbacks\".</li> </ul> <p>In other words, Callables are synchronous functions you call directly, while Listeners are asynchronous and react to events.</p> <p>Common environmental interfaces such as gymnasium.Env only provides object/method equivalent to Callable.</p>"},{"location":"env/guide/#registry-system","title":"Registry System","text":"<p>The OWA environment uses a registry system to manage and access the various components.</p> <p>Components are managed through global registries:</p> <ul> <li> <p><code>CALLABLES</code> - Dictionary of callable functions</p> </li> <li> <p><code>LISTENERS</code> - Dictionary of event listeners</p> </li> <li> <p><code>RUNNABLES</code> - Dictionary of background processes  </p> </li> </ul> <p>Modules are activated using: <pre><code>from owa.core.registry import activate_module\nactivate_module(\"module.name\")\n</code></pre> Activating a module registers its components into the global registries for use.</p>"},{"location":"env/guide/#environment-usage-examples","title":"Environment Usage Examples","text":""},{"location":"env/guide/#standard-environment-owaenvstd","title":"Standard Environment (<code>owa.env.std</code>)","text":"<p>Here is an example of how to use the standard environment to interact with clock functionalities.</p> <p><pre><code>import time\nfrom owa.core.registry import CALLABLES, LISTENERS, activate_module\n\n# Initial registry state (empty)\nprint(CALLABLES, LISTENERS)  # {}, {}\n\n# Activate the standard module to register clock functionalities\nactivate_module(\"owa.env.std\")\nprint(CALLABLES, LISTENERS)\n# {'clock.time_ns': &lt;built-in function time_ns&gt;} {'clock/tick': &lt;class 'owa.env.std.clock.ClockTickListener'&gt;}\n\n# Testing the clock/tick listener\ntick = LISTENERS[\"clock/tick\"]().configure(callback=lambda: print(CALLABLES[\"clock.time_ns\"]()), interval=1)\ntick.start()\n\ntime.sleep(2)  # The listener prints the current time in nanoseconds a few times\n\ntick.stop(), tick.join()\n</code></pre> In this example, we activate the standard module, which registers clock functions and listeners. We then set up a tick listener that prints the current time every second.</p> <p>Instead of manual <code>start-stop-join</code> procedure, you may utilize context manager: <code>.session</code>! Following example shows how to abbreviate <code>start-stop-join</code> steps.</p> <pre><code>with tick.session:\n    time.sleep(2)\n</code></pre>"},{"location":"env/guide/#desktop-environment-owaenvdesktop","title":"Desktop Environment (<code>owa.env.desktop</code>)","text":"<p>The desktop environment module provides capabilities for UI interaction and input handling.</p> <p><pre><code>from owa.core.registry import CALLABLES, LISTENERS, activate_module\nfrom owa.env.desktop.msg import KeyboardEvent\n\n# Activate the desktop module to enable UI and input capabilities\nactivate_module(\"owa.env.desktop\")\n\n# Using screen capture and window management features\nprint(f\"{CALLABLES['screen.capture']().shape=}\")  # Example output: (1080, 1920, 3)\nprint(f\"{CALLABLES['window.get_active_window']()=}\")\nprint(f\"{CALLABLES['window.get_window_by_title']('open-world-agents')=}\")\n\n# Simulating a mouse click (left button, double click)\nmouse_click = CALLABLES[\"mouse.click\"]\nmouse_click(\"left\", 2)\n\n\n# Configuring a keyboard listener\ndef on_keyboard_event(keyboard_event: KeyboardEvent):\n    print(f\"Keyboard event: {keyboard_event.event_type=}, {keyboard_event.vk=}\")\n\n\nkeyboard_listener = LISTENERS[\"keyboard\"]().configure(callback=on_keyboard_event)\nwith keyboard_listener.session:\n    input(\"Type enter to exit.\\n\")\n</code></pre> This code demonstrates capturing the screen, retrieving window information, simulating mouse clicks, and listening to keyboard events.</p>"},{"location":"env/guide/#custom-envplugin-example","title":"Custom EnvPlugin Example","text":"<p>Also, you can register your own EnvPlugin which contains custom Callable, Listener, or Runnable. For more information, see Custom EnvPlugin.</p> <p>Creating custom plugins allows you to extend the OWA environment with your own functionalities.</p> <p><pre><code># Creating a custom module\nfrom owa.core.registry import CALLABLES, LISTENERS\n\n# Register your custom callables\n@CALLABLES.register(\"my_module.add\")\nclass Add:\n    def __call__(self, a, b):\n        return a + b\n\n# Register a custom listener\n@LISTENERS.register(\"my_module/events\")\nclass EventListener:\n    def configure(self, callback):\n        self.callback = callback\n        return self\n\n    def start(self):\n        # Start listening for events\n        pass\n\n    def stop(self):\n        # Stop listening\n        pass\n\n# Using the custom module\nresult = CALLABLES[\"my_module.add\"](5, 3)  # Returns 8\n</code></pre> In this example, we define a custom module with an add function and a custom event listener.</p>"},{"location":"env/guide/#architecture-summary","title":"Architecture Summary","text":"<p>The diagram below summarizes the architecture of the OWA environment and how components are registered and used.</p> <pre><code>graph LR;\n    R[Registry] --&gt;|Registers| SM[\"Standard Module(owa.env.std)\"]\n    R --&gt;|Registers| DM[\"Desktop Module(owa.env.desktop)\"]\n    SM --&gt;|Provides| C1[clock.time_ns]\n    SM --&gt;|Provides| L1[clock/tick Listener]\n    DM --&gt;|Provides| C2[screen.capture]\n    DM --&gt;|Provides| C3[window.get_active_window]\n    DM --&gt;|Provides| L2[keyboard Listener]\n    User --&gt;|Activates| AM[activate_module]\n    AM --&gt; R</code></pre>"},{"location":"env/guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>For standard module details: owa-env-std</li> <li>For desktop features: owa-env-desktop</li> <li>For multimedia support: owa-env-gst</li> <li>For custom EnvPlugin development: custom_plugins.md</li> </ul>"},{"location":"env/plugins/desktop_env/","title":"Desktop Environment","text":"<p>The Desktop Environment module (owa.env.desktop) extends Open World Agents by providing functionalities that interact with the operating system's desktop. It focuses on user interface interactions and input simulation.</p>"},{"location":"env/plugins/desktop_env/#features","title":"Features","text":"<ul> <li>Screen Capture: Capture the current screen using CALLABLES[\"screen.capture\"].</li> <li>Window Management: Retrieve information about active windows and search for windows by title using functions like CALLABLES[\"window.get_active_window\"] and CALLABLES[\"window.get_window_by_title\"].</li> <li>Input Simulation: Simulate mouse actions (e.g., CALLABLES[\"mouse.click\"]) and set up keyboard listeners to handle input events.</li> </ul>"},{"location":"env/plugins/desktop_env/#usage","title":"Usage","text":"<p>To activate the Desktop Environment module, include the following in your code:</p> <pre><code>activate_module(\"owa.env.desktop\")\n</code></pre> <p>After activation, you can access desktop functionalities via the global registries. For example:</p> <pre><code>print(CALLABLES[\"screen.capture\"]().shape)  # Capture and display screen dimensions\nprint(CALLABLES[\"window.get_active_window\"]())  # Retrieve the active window\n</code></pre> <p>This module is essential for applications that require integration with desktop UI elements and user input simulation.</p>"},{"location":"env/plugins/desktop_env/#implementation-details","title":"Implementation Details","text":"<p>To see detailed implementation, skim over owa-env-desktop. API documentation is currently being developed.</p>"},{"location":"env/plugins/desktop_env/#available-functions","title":"Available Functions","text":""},{"location":"env/plugins/desktop_env/#mouse-functions","title":"Mouse Functions","text":"<ul> <li><code>mouse.click</code> - Simulate a mouse click</li> <li><code>mouse.move</code> - Move the mouse cursor to specified coordinates</li> <li><code>mouse.position</code> - Get the current mouse position</li> <li><code>mouse.press</code> - Simulate pressing a mouse button</li> <li><code>mouse.release</code> - Simulate releasing a mouse button</li> <li><code>mouse.scroll</code> - Simulate mouse wheel scrolling</li> </ul>"},{"location":"env/plugins/desktop_env/#keyboard-functions","title":"Keyboard Functions","text":"<ul> <li><code>keyboard.press</code> - Simulate pressing a keyboard key</li> <li><code>keyboard.release</code> - Simulate releasing a keyboard key</li> <li><code>keyboard.type</code> - Type a string of characters</li> <li><code>keyboard.press_repeat</code> - Simulate repeat-press when pressing key long time</li> </ul>"},{"location":"env/plugins/desktop_env/#screen-functions","title":"Screen Functions","text":"<ul> <li><code>screen.capture</code> - Capture the current screen (Note: This module utilizes <code>bettercam</code>. For better performance and extensibility, use <code>owa-env-gst</code>'s functions instead)</li> </ul>"},{"location":"env/plugins/desktop_env/#window-functions","title":"Window Functions","text":"<ul> <li><code>window.get_active_window</code> - Get the currently active window</li> <li><code>window.get_window_by_title</code> - Find a window by its title</li> <li><code>window.when_active</code> - Run a function when a specific window becomes active</li> </ul>"},{"location":"env/plugins/desktop_env/#available-listeners","title":"Available Listeners","text":"<ul> <li><code>keyboard</code> - Listen for keyboard events</li> <li><code>mouse</code> - Listen for mouse events</li> </ul>"},{"location":"env/plugins/desktop_env/#misc","title":"Misc","text":""},{"location":"env/plugins/desktop_env/#library-selection-rationale","title":"Library Selection Rationale","text":"<p>This module utilizes <code>pynput</code> for input simulation after evaluating several alternatives:</p> <ul> <li> <p>Why not PyAutoGUI? Though widely used, PyAutoGUI uses deprecated Windows APIs (<code>keybd_event/mouse_event</code>) rather than the modern <code>SendInput</code> method. These older APIs fail in DirectX applications and games. Additionally, PyAutoGUI has seen limited maintenance (last significant update was over 2 years ago).</p> </li> <li> <p>Alternative Solutions: Libraries like pydirectinput and pydirectinput_rgx address the Windows API issue by using <code>SendInput</code>, but they lack input capturing capabilities which are essential for our use case.</p> </li> <li> <p>Other Options: We also evaluated keyboard and mouse libraries but found them inadequately maintained with several unresolved bugs that could impact reliability.</p> </li> </ul>"},{"location":"env/plugins/desktop_env/#input-auto-repeat-functionality","title":"Input Auto-Repeat Functionality","text":"<p>For simulating key auto-repeat behavior, use the dedicated function:</p> <pre><code>CALLABLES[\"keyboard.press_repeat\"](key, press_time: float, initial_delay: float = 0.5, repeat_delay: float = 0.033)\n</code></pre> <p>This function handles the complexity of simulating hardware auto-repeat, with configurable initial delay before repeating starts and the interval between repeated keypresses.</p>"},{"location":"env/plugins/gstreamer_env/","title":"Gstreamer Environment","text":"<p>To see detailed implementation, skim over owa_env_gst. API Docs is being written WIP.</p>"},{"location":"env/plugins/gstreamer_env/#examples","title":"Examples","text":"<ul> <li> <p>example of <code>screen</code> listener     <pre><code>from owa.core.registry import LISTENERS, activate_module\nimport cv2\nimport numpy as np\n\n# Activate the GStreamer module\nactivate_module(\"owa.env.gst\")\n\n# Define a callback to process frames\ndef process_frame(frame):\n    # Display the frame\n    cv2.imshow(\"Screen Capture\", frame.frame_arr)\n    cv2.waitKey(1)\n\n# Create and configure the listener\nscreen = LISTENERS[\"screen\"]().configure(\n    callback=process_frame,\n    fps=30,\n    show_cursor=True\n)\n\n# Run the screen capture\nwith screen.session:\n    input(\"Press Enter to stop\")\n</code></pre></p> <p>For performance metrics: <pre><code>def process_with_metrics(frame, metrics):\n    print(f\"FPS: {metrics.fps:.2f}, Latency: {metrics.latency*1000:.2f} ms\")\n    cv2.imshow(\"Screen\", frame.frame_arr)\n    cv2.waitKey(1)\n\nscreen.configure(callback=process_with_metrics)\n</code></pre></p> </li> <li> <p>example of <code>screen_capture</code> runnable     <pre><code>from owa.core.registry import RUNNABLES, activate_module\n\nactivate_module(\"owa.env.gst\")\nscreen_capture = RUNNABLES[\"screen_capture\"]().configure(fps=60)\n\nwith screen_capture.session:\n    for _ in range(10):\n        frame = screen_capture.grab()\n        print(f\"Shape: {frame.frame_arr.shape}\")\n</code></pre></p> </li> </ul>"},{"location":"env/plugins/gstreamer_env/#known-issues","title":"Known Issues","text":"<ul> <li>Currently, we only supports Windows OS. Other OS support is in TODO-list, but it's priority is not high.</li> <li> <p>Currently, we only supports device with NVIDIA GPU. This is also in TODO-list, it's priority is higher than multi-OS support.</p> </li> <li> <p>When capturing some screen with <code>WGC</code>(Windows Graphics Capture API, it's being activate when you specify window handle), and with some desktop(not all), below issues are observed.</p> <ul> <li>maximum FPS can't exceed maximum Hz of physical monitor.</li> <li>When capturing <code>Windows Terminal</code> and <code>Discord</code>, the following case was reported. I also guess this phenomena is because of usage of <code>WGC</code>.<ul> <li>When there's no change in window, FPS drops to 1-5 frame.</li> <li>When there's change(e.g. mouse movement) in window, FPS straightly recovers to 60+.</li> </ul> </li> </ul> </li> </ul>"},{"location":"env/plugins/std/","title":"Standard Environment Plugin","text":"<p>The Standard Environment plugin (<code>owa.env.std</code>) is a core component of the Open World Agents framework. It provides essential functionalities related to time management and clock operations, which are fundamental for various time-based tasks and event scheduling within the system.</p>"},{"location":"env/plugins/std/#features","title":"Features","text":"<ul> <li>Time Functions: The plugin registers functions like <code>clock.time_ns</code> that return the current time in nanoseconds.</li> <li>Tick Listener: It includes a <code>clock/tick</code> listener that can be configured to execute callbacks at specified intervals.</li> </ul>"},{"location":"env/plugins/std/#usage","title":"Usage","text":"<p>To activate the Standard Environment plugin, use the following command in your code:</p> <pre><code>from owa.core.registry import activate_module\n\nactivate_module(\"owa.env.std\")\n</code></pre> <p>Once activated, you can access the registered functions and listeners via the global <code>CALLABLES</code> and <code>LISTENERS</code> registries. For example:</p> <pre><code>from owa.core.registry import CALLABLES, LISTENERS\n\n# Get the current time in nanoseconds\ncurrent_time_ns = CALLABLES[\"clock.time_ns\"]()\nprint(f\"Current time (ns): {current_time_ns}\")\n\n# Configure and start a tick listener\ndef on_tick():\n    print(f\"Tick at {CALLABLES['clock.time_ns']()}\")\n\ntick_listener = LISTENERS[\"clock/tick\"]()\ntick_listener.configure(callback=on_tick, interval=1)  # Tick every second\ntick_listener.start()\n\n# Run for a few seconds to see the tick listener in action\nimport time\ntime.sleep(5)\n\n# Stop the tick listener\ntick_listener.stop()\ntick_listener.join()\n</code></pre>"},{"location":"env/plugins/std/#components","title":"Components","text":""},{"location":"env/plugins/std/#time-functions","title":"Time Functions","text":"<ul> <li><code>clock.time_ns</code>: Returns the current time in nanoseconds. This function is registered in the <code>CALLABLES</code> registry.</li> </ul>"},{"location":"env/plugins/std/#tick-listener","title":"Tick Listener","text":"<ul> <li><code>clock/tick</code>: A listener that triggers a callback at specified intervals. This listener is registered in the <code>LISTENERS</code> registry and can be configured with an interval in seconds.</li> </ul>"},{"location":"env/plugins/std/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the Standard Environment plugin:</p> <pre><code>from owa.core.registry import CALLABLES, LISTENERS, activate_module\n\n# Activate the Standard Environment plugin\nactivate_module(\"owa.env.std\")\n\n# Print the current time in nanoseconds\nprint(CALLABLES[\"clock.time_ns\"]())\n\n# Define a callback function for the tick listener\ndef tick_callback():\n    print(f\"Tick at {CALLABLES['clock.time_ns']()}\")\n\n# Configure and start the tick listener\ntick_listener = LISTENERS[\"clock/tick\"]().configure(callback=tick_callback, interval=1)\ntick_listener.start()\n\n# Let the listener run for 5 seconds\nimport time\ntime.sleep(5)\n\n# Stop the tick listener\ntick_listener.stop()\ntick_listener.join()\n</code></pre> <p>This example demonstrates how to activate the plugin, retrieve the current time, and set up a tick listener that prints the current time every second.</p> <p>The Standard Environment plugin is a fundamental part of the Open World Agents framework, providing essential time-based functionalities that can be leveraged by other modules and applications.</p>"}]}