{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OWA","text":""},{"location":"#open-world-agents-documentation","title":"Open World Agents Documentation","text":"<p>A comprehensive framework for building AI agents that interact with desktop applications through vision, keyboard, and mouse control.</p> <p>Open World Agents (OWA) is a monorepo containing the complete toolkit for multimodal desktop agent development. From high-performance data capture to model training and real-time evaluation, everything is designed for flexibility and performance.</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>OWA consists of three core components:</p> <p>\ud83c\udf0d Environment (Env) - Asynchronous, event-driven interface for real-time agent interactions \ud83d\udcca Data - High-performance recording, storage, and analysis of multimodal desktop data \ud83e\udd16 Examples - Complete implementations and training pipelines for multimodal agents  </p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":""},{"location":"#environment-framework","title":"\ud83c\udf0d Environment Framework","text":"<p>Build reactive desktop agents with our asynchronous environment system.</p> Component Description Core Concepts <code>Callables</code>, <code>Listeners</code>, and <code>Runnables</code> for real-time processing Environment Guide Zero-configuration plugin system and CLI tools Custom Plugins Create your own environment extensions <p>Built-in Plugins: </p> <ul> <li>Desktop Environment - Mouse, keyboard, and window event handling</li> <li>GStreamer Environment - High-performance screen capture (6x faster than alternatives)</li> <li>Standard Environment - Basic utilities and timing functions</li> </ul>"},{"location":"#data-infrastructure","title":"\ud83d\udcca Data Infrastructure","text":"<p>Capture, store, and analyze multimodal desktop interaction data.</p> Component Description Data Overview Complete data pipeline for desktop agents OWAMcap Format Self-contained multimodal data format powered by mcap Desktop Recorder (ocap) High-performance desktop recording tool Data Viewer Visualize and analyze recorded sessions Data Explorer Tools for data exploration and editing"},{"location":"#agent-examples","title":"\ud83e\udd16 Agent Examples","text":"<p>Learn from complete implementations and training pipelines.</p> Example Description Status Multimodal Game Agent Vision-based game playing agent \ud83d\udea7 In Progress GUI Agent General desktop application automation \ud83d\udea7 In Progress Interactive World Model Predictive modeling of desktop environments \ud83d\udea7 In Progress Usage with LLMs Integration with large language models \ud83d\udea7 In Progress Usage with Transformers Vision transformer implementations \ud83d\udea7 In Progress"},{"location":"#community-ecosystem","title":"Community &amp; Ecosystem","text":"<p>\ud83c\udf31 Growing Ecosystem: OWA is designed for extensibility. Community contributions include:  </p> <ul> <li>Custom environment plugins (<code>owa.env.minecraft</code>, <code>owa.env.web</code>, etc.)  </li> <li>Specialized data processors and analyzers  </li> <li>Novel agent architectures and training methods  </li> </ul> <p>\ud83e\udd17 HuggingFace Integration: Upload and share datasets created with <code>ocap</code>. Preview datasets at HuggingFace Spaces.</p>"},{"location":"#development-resources","title":"Development Resources","text":"Resource Description Installation Guide Detailed installation instructions Contributing Guide Development setup, bug reports, feature proposals FAQ Common questions and troubleshooting"},{"location":"#what-can-you-build","title":"What Can You Build?","text":"<p>Anything that runs on desktop. If a human can do it on a computer, you can build an AI agent to automate it:</p> <p>\ud83e\udd16 Desktop Automation - Navigate applications, automate workflows, interact with any software \ud83c\udfae Game AI - Master complex games through visual understanding and real-time decision making \ud83d\udcca Training Datasets - Capture high-quality human-computer interaction data for foundation models \ud83d\udcc8 Benchmarks - Create and evaluate desktop agent performance across diverse tasks</p>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We'd love you to contribute to OWA!</p>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Questions, feature requests and bug reports are all welcome as discussions or issues. However, to report a security vulnerability, please see our security policy.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Feel free to create a Pull Request. Project maintainers will take a review quickly and give you a comments.</p> <p>To make contributing as easy and fast as possible, you'll want to run tests and linting locally. Luckily, OWA has few dependencies, doesn't require compiling and tests don't need access to databases, etc. Because of this, setting up and running the tests should be very simple.</p>"},{"location":"contributing/#run-tests","title":"Run tests","text":"<p>We're utilizing <code>pytest</code> for testing and <code>ruff</code> for formatting. Make sure your PR pass all tests in Github Actions.</p> <ol> <li>Run <code>pytest</code>.</li> <li>Run <code>ruff check</code>.</li> <li>Run <code>ruff format</code>.</li> </ol>"},{"location":"contributing/#how-to-test-documentation-changes","title":"How to Test Documentation Changes","text":"<p>If you contribute to the documentation\u2014such as by adding new markdown files under <code>docs/data/</code>\u2014please follow these steps to preview your changes locally before submitting a pull request:</p> <ol> <li> <p>Add your documentation:    Place your new markdown (<code>.md</code>) file in the <code>docs/data/</code> directory.</p> </li> <li> <p>Update navigation:    Edit <code>mkdocs.yaml</code> to include your new file in the site's navigation (<code>nav</code> section).</p> </li> <li> <p>Install documentation dependencies:    At the root of the project, run: <pre><code>vuv install --extra docs\n</code></pre>    This will install all necessary packages for building and serving the documentation site.</p> </li> <li> <p>Serve the documentation locally:    Start the local documentation server with: <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Preview your changes:    Open http://localhost:8000 in your web browser to view the documentation and verify your additions appear as expected.</p> </li> </ol> <p>Following these steps will help ensure your documentation contributions are correctly displayed and formatted. Thank you for helping improve the OWA documentation!</p>"},{"location":"faq_dev/","title":"Faq dev","text":""},{"location":"faq_dev/#how-to-disable-typer-specific-traceback","title":"How to disable <code>typer</code>-specific traceback?","text":"<p>set <code>_TYPER_STANDARD_TRACEBACK=1</code></p> <p>https://stackoverflow.com/questions/76375307/how-to-make-typer-traceback-look-normal</p>"},{"location":"help_with_owa/","title":"Getting help with OWA","text":"<p>If you need help getting started with OWA or with advanced usage, the following sources may be useful.</p>"},{"location":"help_with_owa/#github-discussions","title":"GitHub Discussions","text":"<p>GitHub discussions are useful for asking questions, your question and the answer will help everyone.</p>"},{"location":"help_with_owa/#direct-messages","title":"Direct Messages","text":"<p>If you need further assistance, please feel free to directly message the main contributors via Slack, Discord, or email:</p> <ul> <li>Suhwan Choi: milkclouds00@gmail.com</li> <li>Yunsung Lee: dldbstjd9751@gmail.com</li> </ul>"},{"location":"install/","title":"Installation Guide","text":""},{"location":"install/#quick-start-recommended","title":"Quick Start (Recommended)","text":"<p>For most users who want to use Open World Agents, installation is straightforward:</p>"},{"location":"install/#option-1-full-installation-with-video-processing","title":"Option 1: Full Installation with Video Processing","text":"<p>If you need desktop recording, screen capture, or video processing capabilities:</p> <pre><code># Install GStreamer dependencies first\nconda install open-world-agents::gstreamer-bundle\n\n# Then install all OWA packages\npip install owa\n</code></pre>"},{"location":"install/#option-2-headless-installation","title":"Option 2: Headless Installation","text":"<p>For data processing, ML training, or headless servers without video capture needs:</p> <pre><code>pip install owa\n</code></pre> <p>When to use GStreamer</p> <p>Install GStreamer if you need:</p> <ul> <li>Desktop recording with <code>ocap</code></li> <li>Real-time screen capture with <code>owa.env.gst</code></li> <li>Video processing capabilities</li> <li>Complete multimodal data capture</li> </ul> <p>Skip GStreamer if you only need:</p> <ul> <li>Data processing and analysis</li> <li>ML training on existing datasets</li> <li>Headless server environments</li> <li>Working with pre-recorded MCAP files</li> </ul>"},{"location":"install/#available-packages","title":"Available Packages","text":"<p>All OWA packages are pure Python and available on PyPI. Install via <code>pip install owa</code> for all components:</p> Name PyPI Description <code>owa</code> Meta-package with all core components <code>owa-core</code> Framework foundation with registry system <code>owa-cli</code> Command-line tools (<code>owl</code>) for data analysis <code>mcap-owa-support</code> OWAMcap format support and utilities <code>ocap</code> \ud83c\udfa5 Desktop recorder for multimodal data capture <code>owa-env-desktop</code> Mouse, keyboard, window event handling <code>owa-env-gst</code> \ud83c\udfa5 GStreamer-powered screen capture (6x faster) <p>\ud83c\udfa5 Video Processing Packages: Packages marked with \ud83c\udfa5 require GStreamer dependencies. Install <code>conda install open-world-agents::gstreamer-bundle</code> first for full functionality.</p>"},{"location":"install/#gstreamer-bundle","title":"GStreamer Bundle","text":"<p>For video processing capabilities, install the GStreamer bundle separately:</p> <pre><code>conda install open-world-agents::gstreamer-bundle\n</code></pre> <p>This bundle includes all necessary GStreamer dependencies (pygobject, gst-python, gst-plugins, etc.) that are complex to install via pip.</p>"},{"location":"install/#development-installation-editable","title":"Development Installation (Editable)","text":"<p>For Contributors and Developers</p> <p>This section is for users who want to modify the source code, contribute to the project, or need the latest development features.</p>"},{"location":"install/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with development installation, ensure you have the necessary tools:</p> <ol> <li>Git: For cloning the repository</li> <li>Python 3.11+: Required for all OWA packages</li> <li>Virtual Environment Tool: We recommend conda/mamba for GStreamer support</li> </ol>"},{"location":"install/#step-1-setup-virtual-environment","title":"Step 1: Setup Virtual Environment","text":"conda/mamba (Recommended)Other Virtual Environments <ol> <li> <p>Install miniforge following the installation guide:     <pre><code># Download and install miniforge\n# This provides both conda and mamba (faster conda)\n</code></pre></p> </li> <li> <p>Create and activate your environment:     <pre><code>conda create -n owa python=3.11 -y\nconda activate owa\n</code></pre></p> </li> <li> <p>(Optional for video processing) Install GStreamer dependencies:     <pre><code># Install GStreamer bundle for video processing\nconda install open-world-agents::gstreamer-bundle\n</code></pre></p> </li> </ol> <p>You can use other virtual environment tools (venv, virtualenv, poetry, etc.), but:</p> <ul> <li>GStreamer must be installed separately for video processing functionality, which is not easy without <code>conda</code></li> <li>We recommend conda/mamba for the best development experience</li> </ul>"},{"location":"install/#step-2-clone-and-setup-development-tools","title":"Step 2: Clone and Setup Development Tools","text":"<pre><code># Clone the repository\ngit clone https://github.com/open-world-agents/open-world-agents\ncd open-world-agents\n\n# Install uv (fast Python package manager)\npip install uv\n\n# Install virtual-uv for easier monorepo management\npip install virtual-uv\n</code></pre>"},{"location":"install/#step-3-install-in-editable-mode","title":"Step 3: Install in Editable Mode","text":"uv + virtual-uv (Recommended)uv (Simple)pip (Manual) <pre><code># Ensure you're in the project root and environment is activated\ncd open-world-agents\nconda activate owa  # or your environment name\n\n# Install all packages in editable mode\nvuv install\n</code></pre> <p>Tip</p> <p><code>vuv</code> (virtual-uv) handles the complex dependency resolution for our monorepo structure and installs all packages in the correct order.</p> <pre><code># Install with inexact dependency resolution\nuv sync --inexact\n</code></pre> <pre><code># Install in correct order (dependency order matters with pip)\npip install -e projects/owa-core\npip install -e projects/mcap-owa-support\npip install -e projects/owa-env-desktop\npip install -e projects/owa-env-gst  # Requires GStreamer\npip install -e projects/owa-cli\npip install -e projects/ocap\n</code></pre> <p>Installation Order Matters</p> <p>When using <code>pip</code> instead of <code>uv</code>, the installation order is critical because <code>pip</code> cannot resolve the monorepo dependencies specified in <code>[tool.uv.sources]</code>.</p>"},{"location":"install/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<pre><code># Test core functionality\npython -c \"from owa.core.registry import CALLABLES; print('\u2705 Core installed')\"\n\n# Test CLI tools\nowl --help\nowl env list  # List discovered plugins\nocap --help\n\n# Test GStreamer (if installed)\npython -c \"import gi; gi.require_version('Gst', '1.0'); print('\u2705 GStreamer OK')\"\n</code></pre>"},{"location":"install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"install/#gstreamer-issues","title":"GStreamer Issues","text":"<p>If you encounter GStreamer-related errors:</p> <ol> <li>Install GStreamer bundle:    <pre><code>conda install open-world-agents::gstreamer-bundle\n</code></pre></li> <li>Verify GStreamer installation:    <pre><code>python -c \"import gi; gi.require_version('Gst', '1.0'); print('\u2705 GStreamer OK')\"\n</code></pre></li> <li>Restart your Python environment after installing GStreamer dependencies</li> </ol>"},{"location":"install/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<ul> <li>Always activate your environment before running <code>vuv</code> or installation commands</li> <li>Use absolute paths if you encounter import issues</li> <li>Reinstall virtual-uv if you encounter dependency resolution problems:   <pre><code>pip uninstall virtual-uv\npip install virtual-uv\n</code></pre></li> </ul>"},{"location":"install/#package-version-conflicts","title":"Package Version Conflicts","text":"<p>OWA uses lockstep versioning. If you encounter version conflicts:</p> <pre><code># Check installed versions\npip list | grep owa\n\n# Reinstall all packages with matching versions\npip install --upgrade owa\n</code></pre>"},{"location":"install/#import-errors","title":"Import Errors","text":"<p>If you encounter import errors after installation:</p> <ol> <li>Ensure Python environment is activated</li> <li>Restart Python kernel/terminal after installing packages</li> <li>Verify installation: <code>pip list | grep owa</code></li> </ol>"},{"location":"data/","title":"Open-sourcing Dataset for Multimodal Desktop Agent","text":"<p>As of now (March 22, 2025), there are few datasets available for building multimodal desktop agents.</p> <p>Even more scarce are datasets that (1) contain high-frequency screen data, (2) have keyboard/mouse information timestamp-aligned with other modalities like screen recordings, and (3) include human demonstrations.</p> <p>To address this gap, open-world-agents provides the following three solutions:</p> <ol> <li> <p>File Format - <code>OWAMcap</code>: A high-performance, self-contained, flexible container file format for multimodal desktop log data, powered by the open-source container file format mcap. Learn more...</p> </li> <li> <p>Desktop Recorder - <code>ocap your-filename.mcap</code>: A powerful, efficient, and easy-to-use desktop recorder that captures keyboard/mouse and high-frequency screen data.</p> <ul> <li>Powered by <code>owa-env-gst</code>, ensuring superior performance compared to alternatives. Learn more...</li> </ul> </li> <li> <p>\ud83e\udd17 Hugging Face Integration &amp; Community Ecosystem: The largest collection of open-source desktop interaction datasets in OWAMcap format.</p> <ul> <li>Growing Dataset Collection: Hundreds of community-contributed datasets covering diverse workflows, applications, and interaction patterns</li> <li>Easy Upload &amp; Sharing: Upload your <code>ocap</code> recordings directly to HuggingFace with one command</li> <li>Standardized Format: All datasets use the unified OWAMcap format for seamless integration</li> <li>Interactive Visualization: Preview any dataset at Hugging Face Spaces</li> <li>Browse Available Datasets: \ud83e\udd17 datasets?other=owamcap</li> </ul> </li> </ol> <p>\ud83d\ude80 Community Impact: With OWA's streamlined recording and sharing pipeline, the open-source desktop agent community has rapidly grown from zero to hundreds of publicly available multimodal datasets, democratizing access to high-quality training data.</p>"},{"location":"data/comparison_with_lerobot/","title":"OWAMcap vs LeRobotDataset: A Technical Comparison","text":""},{"location":"data/comparison_with_lerobot/#executive-summary","title":"Executive Summary","text":"<p>Both OWAMcap and LeRobotDataset address the critical need for standardized multimodal data formats in embodied AI. However, they differ significantly in their architectural approach and target domains. This comparison analyzes three distinct layers: container format, data schema, and library ecosystem.</p>"},{"location":"data/comparison_with_lerobot/#three-layer-comparison-framework","title":"Three-Layer Comparison Framework","text":"<p>To properly compare OWAMcap and LeRobotDataset, we need to understand that they operate at different architectural levels. Rather than comparing them directly, we analyze three distinct layers of the data stack:</p> <p>Why Three Layers Matter:</p> <ul> <li>Container Format: Think of this as your storage unit\u2014how you pack your stuff (MCAP vs Parquet)</li> <li>Data Schema: This is what you actually put in those boxes\u2014the \"language\" your data speaks (OWAMcap vs LeRobotDataset)</li> <li>Library Ecosystem: The tools and trucks you need to move everything around (mcap-owa-support vs lerobot)</li> </ul> <p>This separation matters because without it, we'd be comparing fundamentally different things. It's like trying to compare a car's engine (container format) with its GPS system (data schema) with its maintenance costs (library ecosystem)\u2014they're all important, but they solve different problems and need to be evaluated on their own terms.</p>"},{"location":"data/comparison_with_lerobot/#layer-1-container-format-mcap-vs-parquet","title":"Layer 1: Container Format (MCAP vs Parquet)","text":"<p>Imagine you're organizing your digital life. MCAP is like having a smart filing cabinet that automatically timestamps everything and keeps related items together. Parquet? That's more like Excel on steroids\u2014fantastic for crunching numbers, but ask it to handle your mixed media collection and things get messy.</p> Feature MCAP Parquet (LeRobotDataset) Primary Design Time-synchronized multimodal logging Columnar analytics storage Data Organization Multiple channels/topics with explicit schemas Single table structure Heterogeneous Data \u2705 Native support for mixed data types \u274c Tabular data only; external file references Time Synchronization \u2705 Per-message timestamps with indexing \u274c Manual alignment across files required Streaming Safety \u2705 Crash-safe incremental writes \u274c Bulk writes; vulnerable to data loss Random Access \u2705 Indexed time/channel queries \u274c Sequential column scans Schema Extensibility \u2705 Custom message types supported \u274c Fixed table schema Self-Containedness \u2705 Embedded schemas and metadata \u274c External dependencies for interpretation"},{"location":"data/comparison_with_lerobot/#layer-2-data-format-owamcap-vs-lerobotdataset","title":"Layer 2: Data Format (OWAMcap vs LeRobotDataset)","text":"<p>While MCAP vs Parquet represents the container comparison, OWAMcap vs LeRobotDataset represents the data schema comparison\u2014how domain-specific message types and structures are defined on top of these containers.</p> <p>Commonalities: Both use lazy-loading for video frames to optimize storage and memory usage.</p> <p>Key Differences:</p> <pre><code># OWAMcap: Desktop-specific message types\nclass ScreenEmitted(OWAMessage):\n    path: str           # Video file reference\n    pts: int           # Precise frame timestamp\n    utc_ns: int        # System timestamp\n\nclass MouseEvent(OWAMessage):\n    event_type: str    # move, click, scroll\n    x: int, y: int     # Screen coordinates\n\nclass KeyboardEvent(OWAMessage):\n    event_type: str    # press, release\n    vk: int           # Virtual key code\n</code></pre> <pre><code># LeRobotDataset: Generic robotics observations\n{\n    \"observation.image\": \"path/to/frame.jpg\",\n    \"observation.state\": [x, y, z, ...],  # Robot joint positions\n    \"action\": [dx, dy, dz, ...]           # Action commands\n}\n</code></pre> <p>Domain Specialization Impact:</p> <ul> <li>OWAMcap: Pre-defined messages enables seamless integration across diverse desktop tasks (web browsing, document editing, gaming)</li> <li>LeRobotDataset: Generic structure requires domain-specific adaptations for each robot platform</li> </ul>"},{"location":"data/comparison_with_lerobot/#layer-3-library-ecosystem","title":"Layer 3: Library Ecosystem","text":"<p>Library Design Philosophy:</p> <p>The fundamental difference reflects two approaches: minimal dependencies (OWAMcap) for worry-free adoption vs comprehensive ecosystem (LeRobotDataset) bundling complete toolchains.</p> Metric mcap-owa-support lerobot Dependencies 21 packages 93 packages Install Time 0.75s 66.65s Adoption Friction \"Just works\" territory \"Hope nothing breaks\" zone <p>Dependency Analysis:</p> <pre><code># OWAMcap: The minimalist's dream\nmcap-owa-support\n\u251c\u2500\u2500 mcap (the core engine)\n\u251c\u2500\u2500 pydantic (keeps data honest)\n\u251c\u2500\u2500 loguru (friendly logging)\n\u2514\u2500\u2500 zstandard (compression magic)\n\n# LeRobotDataset: The everything ecosystem\nlerobot\n\u251c\u2500\u2500 torch + torchvision (GPU go brrrr)\n\u251c\u2500\u2500 gym + mujoco (virtual robot playground)\n\u251c\u2500\u2500 opencv + imageio (pixel manipulation station)\n\u251c\u2500\u2500 wandb (experiment diary)\n\u251c\u2500\u2500 hydra (configuration wizard)\n\u2514\u2500\u2500 [85+ more packages having a dependency party]\n</code></pre> <p>The Zero-Friction Philosophy \ud83d\udca1</p> <p>Our guiding principle is simple: developers should install our library and immediately get back to building cool stuff, not debugging dependency conflicts or waiting for installations to finish.</p>"},{"location":"data/comparison_with_lerobot/#why-container-choice-matters-for-foundation-models","title":"Why Container Choice Matters for Foundation Models","text":""},{"location":"data/comparison_with_lerobot/#random-access-the-need-for-speed","title":"Random Access: The Need for Speed","text":"<p>The difference between MCAP and Parquet for data access is like comparing a sports car to a city bus. Both get you there, but the experience is... different.</p> <pre><code># MCAP: \"I want data from 2:30 PM to 2:35 PM, please\"\nmessages = reader.iter_messages(\n    start_time=start_ns,\n    end_time=end_ns,\n    topics=[\"screen\", \"mouse\"]\n)  # Boom. Done. Lightning fast.\n\n# Parquet: \"Let me read everything and then filter...\"\ndf = pd.read_parquet(\"data.parquet\")\nfiltered = df[(df.timestamp &gt;= start) &amp; (df.timestamp &lt;= end)]\n# *waiting music intensifies*\n</code></pre>"},{"location":"data/comparison_with_lerobot/#multi-modal-synchronization-keeping-everyone-in-sync","title":"Multi-Modal Synchronization: Keeping Everyone in Sync","text":"<p>MCAP: Like a conductor with perfect timing\u2014every instrument (modality) hits their notes exactly when they should.</p> <pre><code>Channel 1: screen     [t1, t3, t5, t7, ...]\nChannel 2: mouse      [t1, t2, t4, t6, t8, ...]\nChannel 3: keyboard   [t2, t5, t9, ...]\n</code></pre> <p>Parquet: More like a garage band where everyone's trying to stay in time but someone's always slightly off-beat.</p>"},{"location":"data/comparison_with_lerobot/#desktop-vs-robotics-two-different-worlds","title":"Desktop vs Robotics: Two Different Worlds","text":"Domain Desktop Automation Robotics Session Length Hours of continuous interaction Minutes of task execution Event Frequency High-frequency input events Lower-frequency control commands Crash Recovery Critical for long sessions Less critical for short episodes Data Types Window focus, UI interactions, multi-monitor Joint positions, sensor readings, control commands"},{"location":"data/comparison_with_lerobot/#performance-implications-for-vla-training","title":"Performance Implications for VLA Training","text":""},{"location":"data/comparison_with_lerobot/#storage-efficiency","title":"Storage Efficiency","text":"<pre><code># Example 45-min desktop session\nMetadata (mcap):     24 MiB\nVideo (external):    5.4 GiB\nTotal:              5.4 GiB\n\n# Equivalent data in uncompressed format\nRaw frames:         ~447 GiB\nCompression ratio:  82x reduction\n</code></pre>"},{"location":"data/comparison_with_lerobot/#training-pipeline-impact","title":"Training Pipeline Impact","text":"<p>\ud83d\udea7 TODO: Here is TODO and subject to be changed.</p> <p>Data Loading Performance: <pre><code># OWAMcap: Efficient batch loading with precise temporal control\nfor batch in dataloader:\n    # Direct access to synchronized multimodal streams\n    screens = [msg.lazy_load() for msg in batch.screen_messages]\n    actions = batch.mouse_events + batch.keyboard_events\n    # No resampling artifacts; preserves original event timing\n\n# LeRobotDataset: The \"close enough\" approach\nfor batch in dataloader:\n    # delta_timestamps is the key design\n    frames = dataset[i:i+batch_size]\n    # Manual synchronization across heterogeneous streams required\n</code></pre></p> <p>Write Performance:</p> Scenario MCAP (OWAMcap) Parquet (LeRobotDataset) Real-time logging \u2705 Optimized append-only writes \u274c Requires batching; write overhead High-frequency events \u2705 Native support \u274c Must aggregate before writing Crash recovery \u2705 Partial file recovery possible \u274c Risk of data loss during writes"},{"location":"data/comparison_with_lerobot/#schema-evolution-and-fair-data-principles","title":"Schema Evolution and FAIR Data Principles","text":"<p>Schema Evolution:</p> <ul> <li>OWAMcap: Each channel maintains independent schema; new modalities added without affecting existing data</li> <li>LeRobotDataset: Global schema changes affect entire dataset</li> </ul> <p>FAIR Data Alignment:</p> Principle OWAMcap LeRobotDataset Findable \u2705 Rich embedded metadata \u26a0\ufe0f Depends on HF Hub infrastructure Accessible \u2705 Self-contained files \u26a0\ufe0f Multi-file dependencies Interoperable \u2705 Standard MCAP readers \u2705 HF ecosystem compatibility Reusable \u2705 Embedded schemas + provenance \u26a0\ufe0f External documentation required"},{"location":"data/comparison_with_lerobot/#strategic-recommendations","title":"Strategic Recommendations","text":""},{"location":"data/comparison_with_lerobot/#the-decision-matrix","title":"The Decision Matrix","text":"Use Case Recommended Format Why This Makes Sense Desktop Foundation Models OWAMcap Purpose-built, lightweight, just works Production Desktop Agents OWAMcap Zero dependencies headaches, crash-safe Novel Multimodal Research OWAMcap Flexibility to experiment without limits Academic Robotics Research LeRobotDataset Join the party everyone's already at"},{"location":"data/comparison_with_lerobot/#the-hybrid-approach-best-of-both-worlds","title":"The Hybrid Approach: Best of Both Worlds","text":"<p>For the ambitious researchers who want it all:</p> <ol> <li>Capture Phase: Use OWAMcap to grab everything (think of it as your digital net)</li> <li>Consumption Phase: Transform relevant bits for your ML pipeline (curated data delivery)</li> </ol>"},{"location":"data/comparison_with_lerobot/#conclusion-the-plot-twist-ending","title":"Conclusion: The Plot Twist Ending","text":"<p>Here's the thing\u2014OWAMcap and LeRobotDataset aren't really competitors. They're more like specialized tools designed for different jobs. OWAMcap is the precision instrument for desktop automation\u2014lightweight, focused, and built for the unique chaos of human-computer interaction. LeRobotDataset(rather, LeRobot) is the comprehensive toolkit for robotics research\u2014heavy-duty, feature-rich, and backed by a thriving community.</p> <p>The real question isn't \"which is better?\" but \"which fits your mission?\" If you're building the next generation of desktop AI agents, OWAMcap's specialized design will save you months of headaches. If you're advancing robotics research within existing academic frameworks, LeRobot's ecosystem might be your golden ticket.</p> <p>The future of embodied AI isn't about choosing sides\u2014it's about picking the right tool for the job and maybe, just maybe, building bridges between these different worlds. After all, the best AI systems might need to understand both digital desktops and physical robots. Now wouldn't that be something? \ud83d\ude80</p>"},{"location":"data/data_format/","title":"Redirected","text":"<p>This page has moved to data/infographic.html.</p> <p>You will be automatically redirected in a few seconds.</p> <p></p>"},{"location":"data/data_format_v1/","title":"Introducing OWAMcap","text":""},{"location":"data/data_format_v1/#overview","title":"Overview","text":"<p>OWAMcap is a high-performance, self-contained, flexible container file format for multimodal desktop log data, powered by the open-source container file format mcap. This format is designed for efficiently recording and processing message data in Open World Agents (OWA) applications.</p> <p>So, what exactly is mcap?</p> <p>Simply put, mcap is a format that allows you to record various types of events such as keyboard events, mouse events, and screen captures along with their timestamps. For more detailed information, please refer to the OWAMcap Format Specification section.</p>"},{"location":"data/data_format_v1/#usage-example-of-owamcap-desktop-recorder","title":"Usage Example of OWAMcap - Desktop Recorder","text":"<p>What exactly does the OWAMcap format contain? Let's demonstrate with an example of recorded desktop data. Below are sample datasets that you can download and explore yourself:</p> <ul> <li><code>example.mcap</code> [Download]</li> <li><code>example.mkv</code> [Download]</li> </ul> Click here to see <code>example.mkv</code>! <p> </p>"},{"location":"data/data_format_v1/#exploring-example-data","title":"Exploring Example Data","text":"<p>Let's examine the contents of an OWAMcap file using the <code>owl</code> command-line tool (Open World agents cLi).</p>"},{"location":"data/data_format_v1/#file-summary-with-owl-mcap-info","title":"File Summary with <code>owl mcap info</code>","text":"<p>First, we can get an overview of the file structure:</p> <pre><code>$ owl mcap info example.mcap\nlibrary:   mcap-owa-support 0.1.0; mcap 1.2.2\nprofile:   owa\nmessages:  518\nduration:  6.8558623s\nstart:     2025-03-21T17:06:30.7029335+09:00 (1742544390.702933500)\nend:       2025-03-21T17:06:37.5587958+09:00 (1742544397.558795800)\ncompression:\n        zstd: [1/1 chunks] [48.19 KiB/9.42 KiB (80.44%)] [1.37 KiB/sec]\nchannels:\n        (1) window            7 msgs (1.02 Hz)    : owa.env.desktop.msg.WindowInfo [jsonschema]\n        (2) keyboard/state    7 msgs (1.02 Hz)    : owa.env.desktop.msg.KeyboardState [jsonschema]\n        (3) mouse/state       7 msgs (1.02 Hz)    : owa.env.desktop.msg.MouseState [jsonschema]\n        (4) mouse           115 msgs (16.77 Hz)   : owa.env.desktop.msg.MouseEvent [jsonschema]\n        (5) screen          362 msgs (52.80 Hz)   : owa.env.gst.msg.ScreenEmitted [jsonschema]\n        (6) keyboard         20 msgs (2.92 Hz)    : owa.env.desktop.msg.KeyboardEvent [jsonschema]\nchannels: 6\nattachments: 0\nmetadata: 0\n</code></pre> <p>Key observations from this output:</p> <ol> <li> <p>File Overview:</p> <ul> <li>Contains 518 messages recorded over 6.86 seconds</li> <li>Records from March 21, 2025, with precise start and end timestamps</li> </ul> </li> <li> <p>Compression:</p> <ul> <li>Uses zstd compression, reducing file size by 80.44%</li> </ul> </li> <li> <p>Channels (Topics):</p> <ul> <li>The file contains 6 different channels (or topics), each tracking a specific type of event:</li> </ul> </li> </ol> Channel # Name Message Count Frequency Message Type 1 window 7 msgs 1.02 Hz WindowInfo 2 keyboard/state 7 msgs 1.02 Hz KeyboardState 3 mouse/state 7 msgs 1.02 Hz MouseState 4 mouse 115 msgs 16.77 Hz MouseEvent 5 screen 362 msgs 52.80 Hz ScreenEmitted 6 keyboard 20 msgs 2.92 Hz KeyboardEvent <p>For example, looking at channel #5 (screen), we can see:</p> <ul> <li>The topic name is \"screen\"</li> <li>It contains 362 messages</li> <li>Recording frequency is 52.80 Hz (slightly lower than the intended 60 Hz, likely due to the short recording time)</li> <li>Messages are of type <code>owa.env.gst.msg.ScreenEmitted</code></li> </ul>"},{"location":"data/data_format_v1/#detailed-message-inspection-with-owl-mcap-cat","title":"Detailed Message Inspection with <code>owl mcap cat</code>","text":"<p>To examine individual messages, we can use the <code>cat</code> command:</p> <pre><code>$ owl mcap cat example.mcap --n 8 --no-pretty\nTopic: window, Timestamp: 1741628814049712700, Message: {'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}\nTopic: keyboard/state, Timestamp: 1741628814049712700, Message: {'buttons': []}\nTopic: mouse/state, Timestamp: 1742544390703436600, Message: {'x': 1594, 'y': 1112, 'buttons': []}\nTopic: mouse, Timestamp: 1742544390707441200, Message: {'event_type': 'move', 'x': 1597, 'y': 1112}\nTopic: screen, Timestamp: 1741628814057575300, Message: {'path': 'example.mkv', 'pts': 14866666666, 'utc_ns': 1741628814056571100}\nTopic: screen, Timestamp: 1741628814073392700, Message: {'path': 'example.mkv', 'pts': 14883333333, 'utc_ns': 1741628814072476900}\nTopic: keyboard, Timestamp: 1741628815015522100, Message: {'event_type': 'release', 'vk': 162}\n</code></pre> <p>What we can learn from these messages:</p> <ol> <li> <p>Window messages - Track active windows</p> <ul> <li>Example: <code>{'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}</code></li> <li>Shows which window was active, its title, position and size</li> </ul> </li> <li> <p>Mouse messages - Track cursor position and button states</p> <ul> <li>Position tracking: <code>{'x': 1597, 'y': 1112}</code></li> <li>Event types include: \"move\", \"click\", etc.</li> </ul> </li> <li> <p>Keyboard messages - Track key presses and releases</p> <ul> <li>Example: <code>{'event_type': 'release', 'vk': 162}</code></li> <li>Records which virtual key was pressed or released</li> </ul> </li> <li> <p>Screen messages - Link to video frames in the MKV file</p> <ul> <li>Contains paths, presentation timestamps, and UTC timestamps</li> </ul> </li> </ol>"},{"location":"data/data_format_v1/#using-this-data","title":"Using This Data","text":"<p>This structured data allows for powerful analysis and use cases:</p> <ul> <li>You can filter data based on which window was active at a particular time</li> <li>You can synchronize keyboard/mouse events with screen captures</li> <li>The timestamps allow for precise reconstruction of user interactions</li> </ul> <p>What's VK(Virtual Key Code)?</p> <p>Operating systems don't directly use the physical keyboard input values (scan codes) but instead use virtualized keys called VKs. OWA's recorder uses VKs to record keyboard-agnostic data. If you're interested in more details, you can refer to the following resources:</p> <ul> <li>Keyboard Input Overview, Microsoft</li> <li>Virtual-Key Codes, Microsoft</li> </ul>"},{"location":"data/data_format_v1/#internals-owamcap-format-specification","title":"Internals - OWAMcap Format Specification","text":"<p>Note for Users</p> <p>This part is intended for developers who want to utilize the OWAMcap file format for their own applications. Regular users of the library may not need this information.</p>"},{"location":"data/data_format_v1/#technical-specifications","title":"Technical Specifications","text":"<ul> <li>OWAMcap uses the standard <code>mcap</code> format with <code>json</code> schema</li> <li>The <code>mcap-owa-support</code> Python package, which is within the open-world-agents repository, provides decoders, writers, and readers for this format</li> <li>All messages must inherit from or implement the <code>BaseMessage</code> class from <code>owa.core.message</code></li> </ul> <p>What's MCAP?</p> <p>MCAP (pronounced \"em-cap\") is an open-source container file format designed for multimodal log data. It supports multiple channels of timestamped pre-serialized data and is ideal for pub/sub or robotics applications.</p> <p>Key advantages of MCAP:</p> <ul> <li>High Performance: Efficient storage and retrieval of large event data streams</li> <li>Flexible &amp; Open: Works with diverse data types beyond robotics</li> <li>Self-Describing: Encodes schema information to ensure compatibility</li> </ul> <p>Learn more about MCAP</p>"},{"location":"data/data_format_v1/#implementation-guide","title":"Implementation Guide","text":"<p>Any message that implements <code>BaseMessage</code> can be recorded in the OWAMcap format. This provides flexibility while maintaining a consistent interface. Following block describes the interface of <code>BaseMessage</code>.</p> <pre><code>class BaseMessage(ABC):\n    _type: str\n\n    @abstractmethod\n    def serialize(self, buffer: io.BytesIO): ...\n\n    @classmethod\n    @abstractmethod\n    def deserialize(cls, buffer: io.BytesIO) -&gt; Self: ...\n\n    @classmethod\n    @abstractmethod\n    def get_schema(cls): ...\n</code></pre>"},{"location":"data/data_format_v1/#file-format-considerations","title":"File Format Considerations","text":""},{"location":"data/data_format_v1/#why-use-mcap","title":"Why Use <code>.mcap</code>?","text":"<p>There are very few open-source formats available for heterogeneous timestamped data. ROS's bagfile format is one option, but it heavily depends on the ROS ecosystem and often requires installation of ROS1/2. In comparison, <code>mcap</code> is self-contained and efficient, especially for random read (or seeking) operations, which is critical for training VLA (Vision-Language-Action) models.</p>"},{"location":"data/data_format_v2/","title":"Introducing OWAMcap","text":""},{"location":"data/data_format_v2/#overview","title":"Overview","text":"<p>OWAMcap is a specification for using the open-source mcap container file format with Open World Agents (OWA) message definitions. It defines how to structure multimodal desktop log data within standard mcap files using OWA-specific message schemas.</p> <p>What makes a file \"OWAMcap\":</p> <ul> <li>Standard mcap file format with OWA profile designation</li> <li>OWA's predefined message types for desktop interaction data (mouse, keyboard, screen, etc.)</li> <li>Optimized storage strategies (e.g., external video files referenced from mcap)</li> </ul> <p>So, what exactly is mcap?</p> <p>mcap is a format that records various timestamped events like keyboard inputs, mouse movements, and screen captures. OWAMcap leverages this by defining specific message schemas for desktop interaction data. See the Format Specification for details.</p> <p> Visualization of how OWAMcap stores multimodal data with precise timestamps</p>"},{"location":"data/data_format_v2/#the-vision-a-universal-standard-for-desktop-interaction-data","title":"The Vision: A Universal Standard for Desktop Interaction Data","text":""},{"location":"data/data_format_v2/#the-current-problem","title":"The Current Problem","text":"<p>The biggest obstacle to building foundation models for desktop automation is data fragmentation. Each research group collects data in proprietary formats, making it nearly impossible to combine datasets. This mirrors the robotics community, where enormous resources are continuously wasted converting between incompatible formats instead of advancing research.</p> <p>Real-World Example: Open-X Embodiment's Herculean Effort</p> <p>The Open-X Embodiment project perfectly illustrates this challenge. To create their unified robotics dataset, researchers had to:</p> <ul> <li>Manually convert 22 different datasets from completely different formats</li> <li>Spend months writing custom parsers for each proprietary format</li> <li>Standardize action spaces, observation formats, and metadata schemas</li> <li>Validate data integrity across heterogeneous sources</li> <li>Maintain conversion scripts as source datasets evolved</li> </ul> <p>This massive undertaking required an entire team's effort for what should have been a straightforward data combination task. The same challenge now faces desktop automation.</p> <p> Illustration of the exponential complexity when converting between N different proprietary formats</p>"},{"location":"data/data_format_v2/#owamcap-as-the-universal-standard","title":"OWAMcap as the Universal Standard","text":"<p>OWAMcap establishes a unified foundation that enables:</p> <p>\ud83c\udfaf Seamless Data Integration - Datasets from different organizations can be directly combined - No costly conversion processes between proprietary formats - Enables building truly large-scale, diverse training datasets</p> <p>\ud83d\ude80 Foundation Model Enablement - Aggregated data from multiple sources in a unified format - Efficient random access for training large models - Standardized preprocessing pipelines across the community</p> <p>\ud83d\udd17 Breaking Down Data Silos Imagine a future where: - Research institutions directly share desktop interaction datasets - Companies contribute to common training pools without format barriers - Individual researchers access and combine datasets from multiple sources seamlessly - Foundation models train on massive, diverse datasets spanning different applications</p> <p> Before: Fragmented data silos requiring costly conversion. After: Direct dataset combination with OWAMcap</p>"},{"location":"data/data_format_v2/#the-community-impact","title":"The Community Impact","text":"<p>By establishing OWAMcap as a standard, we redirect enormous resources currently spent on data format conversion toward actual research and model development. This is particularly crucial for foundation models, which require vast amounts of diverse data to achieve their full potential.</p> <p>Preventing the 'Format Wars'</p> <p>The desktop automation field is at a critical juncture. Without standardization, we risk repeating robotics' mistakes: researchers spending months on format conversion, valuable datasets remaining isolated, and foundation models unable to reach their potential due to fragmented training data.</p>"},{"location":"data/data_format_v2/#technical-innovation-hybrid-storage-strategy","title":"Technical Innovation: Hybrid Storage Strategy","text":"<p> OWAMcap's innovative approach: lightweight mcap metadata with external video storage</p> <p>OWAMcap's most innovative feature is its approach to video data:</p> <ul> <li>Video data: Stored in external files (<code>.mkv</code>) with efficient encoding</li> <li>Metadata: Stored in mcap with precise timestamps and frame references</li> <li>Result: Minimal file sizes with frame-accurate synchronization</li> </ul> <pre><code>class ScreenEmitted(OWAMessage):\n    _type = \"owa.env.gst.msg.ScreenEmitted\"\n\n    # Timestamps and frame references\n    utc_ns: int | None = None\n    path: str | None = None  # e.g., \"example.mkv\"\n    pts: int | None = None   # Precise frame timestamp\n\n    # Optional in-memory frame data\n    frame_arr: Optional[np.ndarray] = Field(None, exclude=True)\n    shape: Optional[Tuple[int, int]] = None\n\n    def lazy_load(self) -&gt; np.ndarray:\n        \"\"\"Load frame data on-demand from external video file.\"\"\"\n        if self.frame_arr is None and self.path and self.pts:\n            rgb_array = _video_reader.get_frame_at_pts(self.path, self.pts)\n            self.frame_arr = cv2.cvtColor(rgb_array, cv2.COLOR_RGB2BGRA)\n        return self.frame_arr\n</code></pre> <p>Benefits: Storage efficiency, library compatibility, lazy loading, and seamless integration with existing video tools.</p> <p> Storage size comparison: Traditional formats vs. OWAMcap's hybrid approach</p>"},{"location":"data/data_format_v2/#usage-example","title":"Usage Example","text":"<p>Sample datasets demonstrating the format:</p> <ul> <li><code>example.mcap</code> [Download] - Metadata and timestamps</li> <li><code>example.mkv</code> [Download] - Video data</li> </ul>    Your browser does not support the video tag.  <p>Interactive demonstration of loading and exploring OWAMcap data</p>"},{"location":"data/data_format_v2/#file-overview","title":"File Overview","text":"<pre><code>$ owl mcap info example.mcap\nlibrary:   mcap-owa-support 0.3.2; mcap 1.2.2\nprofile:   owa\nmessages:  751029\nduration:  1h27m38.9810357s\ncompression: zstd (86.96% reduction)\nchannels:\n    (1) window          5257 msgs (1.00 Hz) : WindowInfo\n    (2) keyboard/state  5256 msgs (1.00 Hz) : KeyboardState  \n    (3) mouse/state     5256 msgs (1.00 Hz) : MouseState\n    (4) screen        303524 msgs (57.72 Hz): ScreenEmitted\n    (5) mouse         429580 msgs (81.69 Hz): MouseEvent\n    (6) keyboard        2156 msgs (2.92 Hz) : KeyboardEvent\n</code></pre> <p>Key insight: Only 21 MiB for 1.5 hours of multimodal data, thanks to external video storage.</p>"},{"location":"data/data_format_v2/#message-examples","title":"Message Examples","text":"<pre><code>$ owl mcap cat example.mcap --n 4 --no-pretty\nTopic: window, Message: {'title': 'ZType \u2013 Typing Game - Chromium', 'rect': [389, 10, 955, 1022]}\nTopic: mouse, Message: {'event_type': 'move', 'x': 1597, 'y': 1112}\nTopic: screen, Message: {'path': 'example.mkv', 'pts': 14866666666, 'utc_ns': 1741628814056571100}\nTopic: keyboard, Message: {'event_type': 'release', 'vk': 162}\n</code></pre> <p>This structured data enables precise reconstruction of user interactions synchronized with screen captures, and most importantly, direct combination with datasets from other sources.</p>"},{"location":"data/data_format_v2/#format-specification","title":"Format Specification","text":""},{"location":"data/data_format_v2/#technical-definition","title":"Technical Definition","text":"<p>OWAMcap consists of:</p> <ul> <li>Base: Standard mcap format with JSON schema</li> <li>Profile: <code>owa</code> designation in mcap metadata  </li> <li>Messages: Must implement <code>BaseMessage</code> interface</li> <li>Support: <code>mcap-owa-support</code> package for reading/writing</li> </ul> <pre><code>class BaseMessage(ABC):\n    _type: str\n\n    @abstractmethod\n    def serialize(self, buffer: io.BytesIO): ...\n\n    @classmethod  \n    @abstractmethod\n    def deserialize(cls, buffer: io.BytesIO) -&gt; Self: ...\n\n    @classmethod\n    @abstractmethod\n    def get_schema(cls): ...\n</code></pre>"},{"location":"data/data_format_v2/#design-rationale","title":"Design Rationale","text":"<p>Why mcap? </p> <p>Few open-source formats support heterogeneous timestamped data. ROS bagfiles require heavy ROS dependencies, while mcap is self-contained and optimized for random access\u2014critical for VLA model training.</p> <p>Why external video storage?</p> <ul> <li>Video codecs (H.264, H.265) are highly optimized</li> <li>Maintains compatibility with existing video libraries</li> <li>Enables selective frame loading for large datasets</li> <li>Prevents metadata files from becoming unwieldy</li> </ul> <p>Why standardization matters?</p> <p>Without OWAMcap, the desktop automation field risks repeating robotics' mistakes: fragmented datasets, wasted conversion efforts, and limited foundation model potential. By establishing this standard early, we enable the community to focus on advancing capabilities rather than solving compatibility problems.</p> <p>The Bottom Line</p> <p>OWAMcap transforms desktop interaction data from isolated, proprietary collections into a unified resource for building the next generation of foundation models. It's not just a file format\u2014it's the infrastructure for collaborative progress in desktop automation.</p>"},{"location":"data/how_to_explorer_and_edit/","title":"Exploring &amp; Editing OWAMcap","text":""},{"location":"data/how_to_explorer_and_edit/#sample-datasets","title":"Sample Datasets","text":"<p>Below are sample datasets you can download and explore:</p> <ul> <li><code>example.mcap</code> [Download]</li> <li><code>example.mkv</code> [Download]</li> </ul> Click here to see <code>example.mkv</code>! <p> </p>"},{"location":"data/how_to_explorer_and_edit/#how-to-explore-the-dataset","title":"How to Explore the Dataset","text":"<p>There are multiple ways to explore OWAMcap files. Here are three methods:</p>"},{"location":"data/how_to_explorer_and_edit/#1-owa-dataset-visualizer","title":"1. OWA Dataset Visualizer","text":"<p>Click <code>Choose File</code> at <code>Upload Files</code>. Note that uploading file is inappropriate for large file. To visualize large file, self-host dataset visualizer by your own. Learn more...</p>"},{"location":"data/how_to_explorer_and_edit/#2-using-the-owl-command-line-tool","title":"2. Using the <code>owl</code> Command Line Tool","text":"<p>The <code>owl</code> (Open World agents cLi) tool provides a convenient way to inspect MCAP files.</p>"},{"location":"data/how_to_explorer_and_edit/#getting-a-summary","title":"Getting a Summary","text":"<p>View a summary of the MCAP file:</p> <pre><code>$ owl mcap info example.mcap\nlibrary:   mcap-owa-support 0.1.0; mcap 1.2.2\nprofile:   owa\nmessages:  518\nduration:  6.8558623s\nstart:     2025-03-21T17:06:30.7029335+09:00 (1742544390.702933500)\nend:       2025-03-21T17:06:37.5587958+09:00 (1742544397.558795800)\ncompression:\n        zstd: [1/1 chunks] [48.19 KiB/9.42 KiB (80.44%)] [1.37 KiB/sec]\nchannels:\n        (1) window            7 msgs (1.02 Hz)    : owa.env.desktop.msg.WindowInfo [jsonschema]\n        (2) keyboard/state    7 msgs (1.02 Hz)    : owa.env.desktop.msg.KeyboardState [jsonschema]\n        (3) mouse/state       7 msgs (1.02 Hz)    : owa.env.desktop.msg.MouseState [jsonschema]\n        (4) mouse           115 msgs (16.77 Hz)   : owa.env.desktop.msg.MouseEvent [jsonschema]\n        (5) screen          362 msgs (52.80 Hz)   : owa.env.gst.msg.ScreenEmitted [jsonschema]\n        (6) keyboard         20 msgs (2.92 Hz)    : owa.env.desktop.msg.KeyboardEvent [jsonschema]\nchannels: 6\nattachments: 0\nmetadata: 0\n</code></pre>"},{"location":"data/how_to_explorer_and_edit/#examining-message-content","title":"Examining Message Content","text":"<p>Inspect detailed messages (note that the output below is a created example):</p> <pre><code>$ owl mcap cat example.mcap --n 8 --no-pretty\nTopic: window, Timestamp: 1741628814049712700, Message: {'title': 'ZType \u2013 Typing Game - Type to Shoot - Chromium', 'rect': [389, 10, 955, 1022], 'hWnd': 7540094}\nTopic: keyboard/state, Timestamp: 1741628814049712700, Message: {'buttons': []}\nTopic: mouse/state, Timestamp: 1742544390703436600, Message: {'x': 1594, 'y': 1112, 'buttons': []}\nTopic: mouse, Timestamp: 1742544390707441200, Message: {'event_type': 'move', 'x': 1597, 'y': 1112}\nTopic: screen, Timestamp: 1741628814057575300, Message: {'path': 'example.mkv', 'pts': 14866666666, 'utc_ns': 1741628814056571100}\nTopic: screen, Timestamp: 1741628814073392700, Message: {'path': 'example.mkv', 'pts': 14883333333, 'utc_ns': 1741628814072476900}\nTopic: keyboard, Timestamp: 1741628815015522100, Message: {'event_type': 'release', 'vk': 162}\n</code></pre>"},{"location":"data/how_to_explorer_and_edit/#3-using-owamcapreader-in-python","title":"3. Using <code>OWAMcapReader</code> in Python","text":"<p>You can programmatically access the MCAP data using the Python API:</p> <pre><code>from mcap_owa.highlevel import OWAMcapReader\n\ndef main():\n    with OWAMcapReader(\"tmp/example.mcap\") as reader:\n        # Print available topics and time range\n        print(reader.topics)\n        print(reader.start_time, reader.end_time)\n\n        # Iterate through all messages\n        for topic, timestamp, msg in reader.iter_decoded_messages():\n            print(f\"Topic: {topic}, Timestamp: {timestamp}, Message: {msg}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"data/how_to_explorer_and_edit/#4-using-a-media-player-eg-vlc","title":"4. Using a Media Player (e.g., VLC)","text":"<p>For visual exploration of the data:</p> <ol> <li> <p>Convert MCAP to SRT subtitle format:    <pre><code># This command converts abcd.mcap into abcd.srt\nowl mcap convert abcd.mcap\n</code></pre></p> </li> <li> <p>Open the .mkv file with a media player that supports subtitles. We recommend VLC media player. You may also check <code>example.srt</code> [Download]</p> </li> </ol>"},{"location":"data/how_to_explorer_and_edit/#how-to-edit-owamcap-files","title":"How to Edit OWAMcap Files","text":"<p>You can create and modify OWAMcap files using the Python API. The example below demonstrates writing and reading messages:</p> <pre><code>import tempfile\n\nfrom mcap_owa.highlevel import OWAMcapReader, OWAMcapWriter\nfrom owa.core.message import OWAMessage\nfrom owa.env.desktop.msg import KeyboardEvent\n\n\nclass String(OWAMessage):\n    _type = \"std_msgs/String\"\n    data: str\n\n\ndef main():\n    with tempfile.TemporaryDirectory() as tmpdir:\n        file_path = tmpdir + \"/output.mcap\"\n\n        # Writing messages to an OWAMcap file\n        with OWAMcapWriter(file_path) as writer:\n            for i in range(0, 10):\n                publish_time = i\n                if i % 2 == 0:\n                    topic = \"/chatter\"\n                    event = String(data=\"string message\")\n                else:\n                    topic = \"/keyboard\"\n                    event = KeyboardEvent(event_type=\"press\", vk=1)\n                writer.write_message(topic, event, publish_time=publish_time)\n\n        # Reading messages from an OWAMcap file\n        with OWAMcapReader(file_path) as reader:\n            for topic, timestamp, msg in reader.iter_decoded_messages():\n                print(f\"Topic: {topic}, Timestamp: {timestamp}, Message: {msg}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Example output:</p> <pre><code>Topic: /chatter, Timestamp: 1741767097157638598, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097157965764, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097157997762, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158019602, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097158036925, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158051239, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097158065463, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158089318, Message: {'event_type': 'press', 'vk': 1}\nTopic: /chatter, Timestamp: 1741767097158113250, Message: {'data': 'string message'}\nTopic: /keyboard, Timestamp: 1741767097158129738, Message: {'event_type': 'press', 'vk': 1}\n</code></pre>"},{"location":"data/ocap/","title":"ocap","text":"<p>High-performance desktop recorder for Windows. Captures screen, audio, keyboard, mouse, and window events.</p>"},{"location":"data/ocap/#what-is-ocap","title":"What is ocap?","text":"<p>ocap (Omnimodal CAPture) captures all essential desktop signals in synchronized format. Records screen video, audio, keyboard/mouse input, and window events. Built for the open-world-agents project but works for any desktop recording needs.</p> <p>TL;DR: Complete, high-performance desktop recording tool for Windows. Captures everything in one command.</p>"},{"location":"data/ocap/#key-features","title":"Key Features","text":"<ul> <li>Complete desktop recording: Video, audio, keyboard/mouse events, window events</li> <li>High performance: Hardware-accelerated with Windows APIs and GStreamer</li> <li>Efficient encoding: H265/HEVC for high quality and small file size</li> <li>Simple operation: <code>ocap FILE_LOCATION</code> (stop with Ctrl+C)</li> <li>Clean architecture: Core logic in single 250-line Python file</li> <li>Modern formats: MKV with embedded timestamps, MCAP format for events</li> </ul>"},{"location":"data/ocap/#system-requirements","title":"System Requirements","text":"<p>Based on OBS Studio recommended specs + NVIDIA GPU requirements:</p> Component Specification OS Windows 11 (64-bit) Processor Intel i7 8700K / AMD Ryzen 1600X Memory 8 GB RAM Graphics NVIDIA GeForce 10 Series or newer \u26a0\ufe0f DirectX Version 11 Storage 600 MB + ~100MB per minute recording <p>\u26a0\ufe0f NVIDIA GPU Required: Currently only supports NVIDIA GPUs for hardware acceleration. AMD/Intel GPU support possible through GStreamer framework - contributions welcome!</p>"},{"location":"data/ocap/#installation-usage","title":"Installation &amp; Usage","text":""},{"location":"data/ocap/#option-1-download-release","title":"Option 1: Download Release","text":"<ol> <li>Download <code>ocap.zip</code> from releases</li> <li>Unzip and run:<ul> <li>Double-click <code>run.bat</code> (opens terminal with virtual environment)</li> <li>Or in CLI: <code>run.bat --help</code></li> </ul> </li> </ol>"},{"location":"data/ocap/#option-2-package-install","title":"Option 2: Package Install","text":"<p>All OWA packages are available on PyPI:</p> <pre><code># Install GStreamer dependencies first (for video recording)\n$ conda install open-world-agents::gstreamer-bundle\n\n# Install ocap\n$ pip install ocap\n</code></pre>"},{"location":"data/ocap/#basic-usage","title":"Basic Usage","text":"<pre><code># Start recording (stop with Ctrl+C)\n$ ocap my-recording\n\n# Show all options\n$ ocap --help\n\n# Advanced options\n$ ocap FILENAME --window-name \"App\"   # Record specific window\n$ ocap FILENAME --monitor-idx 1       # Record specific monitor\n$ ocap FILENAME --fps 60              # Set framerate\n$ ocap FILENAME --no-record-audio     # Disable audio\n</code></pre>"},{"location":"data/ocap/#output-files","title":"Output Files","text":"<ul> <li><code>.mcap</code> \u2014 Event log (keyboard, mouse, windows)</li> <li><code>.mkv</code>  \u2014 Video/audio with embedded timestamps</li> </ul> <p>Your recording files will be ready immediately!</p>"},{"location":"data/ocap/#feature-comparison","title":"Feature Comparison","text":"Feature ocap OBS wcap pillow/mss Advanced data formats (MCAP/MKV) \u2705 Yes \u274c No \u274c No \u274c No Timestamp aligned logging \u2705 Yes \u274c No \u274c No \u274c No Customizable event definition &amp; Listener \u2705 Yes \u274c No \u274c No \u274c No Single python file \u2705 Yes \u274c No \u274c No \u274c No Audio + Window + Keyboard + Mouse \u2705 Yes \u26a0\ufe0f Partial \u274c No \u274c No Hardware-accelerated encoder \u2705 Yes \u2705 Yes \u2705 Yes \u274c No Supports latest Windows APIs \u2705 Yes \u2705 Yes \u2705 Yes \u274c No (legacy APIs only) Optional mouse cursor capture \u2705 Yes \u2705 Yes \u2705 Yes \u274c No"},{"location":"data/ocap/#technical-architecture","title":"Technical Architecture","text":"<p>Built on GStreamer with clean, maintainable design:</p> <pre><code>flowchart TD\n    %% Input Sources\n    A[owa.env.desktop] --&gt; B[Keyboard Events]\n    A --&gt; C[Mouse Events] \n    A --&gt; D[Window Events]\n    E[owa.env.gst] --&gt; F[Screen Capture]\n    E --&gt; G[Audio Capture]\n\n    %% Core Processing\n    B --&gt; H[Event Queue]\n    C --&gt; H\n    D --&gt; H\n    F --&gt; H\n    F --&gt; I[Video/Audio Pipeline]\n    G --&gt; I\n\n    %% Outputs\n    H --&gt; J[MCAP Writer]\n    I --&gt; K[MKV Pipeline]\n\n    %% Files\n    J --&gt; L[\ud83d\udcc4 events.mcap]\n    K --&gt; M[\ud83c\udfa5 video.mkv]\n\n    style A fill:#e1f5fe\n    style E fill:#e1f5fe\n    style H fill:#fff3e0\n    style L fill:#e8f5e8\n    style M fill:#e8f5e8</code></pre> <ul> <li>Easy to verify: Extensive OWA's Env design enables customizable <code>record.py</code></li> <li>Native performance: Direct Windows API integration (DXGI/WGC, WASAPI)</li> </ul>"},{"location":"data/ocap/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Record terminates right after start? Re-run the same command a few times. This is due to an intermittent GStreamer crash with an unknown cause.</li> <li>GStreamer error message box appears on first run? This is a known issue where GStreamer may show error dialogs the first time you run <code>ocap</code>. These messages do not affect recording\u2014simply close the dialogs and continue. <code>ocap</code> will function normally.</li> <li>Audio not recording? By default, only audio from the target process is recorded. To change this, manually edit the GStreamer pipeline.</li> <li>Large file sizes? Reduce file size by adjusting the <code>gop-size</code> parameter in the <code>nvd3d11h265enc</code> element. See pipeline.py.</li> <li>Performance tips: Close unnecessary applications before recording, use SSD storage for better write performance, and record to a different drive than your OS drive.</li> </ul>"},{"location":"data/ocap/#faq","title":"FAQ","text":"<ul> <li>How much disk space do recordings use? ~100MB per minute for 1080p H265 recording.</li> <li>Can I customize recorded events? Yes. Enable/disable audio, keyboard, mouse, and window events individually. Since record.py is just a 250-line single python script, you may customize it easily.</li> <li>Will ocap slow down my computer? Minimal impact with hardware acceleration. Designed for low overhead.</li> <li>What formats are supported? MKV with H265/HEVC encoding for video and MCAP format for events for efficient storage and querying is supported, but you may customize it easily. (e.g. saving <code>jsonl</code> instead of <code>mcap</code> file takes minimal effort by editing record.py)</li> </ul>"},{"location":"data/ocap/#when-to-use-ocap","title":"When to Use ocap","text":"<ul> <li>Agent training: Capture all inputs and outputs for AI training</li> <li>Workflow documentation: Record exact steps with precise timing</li> <li>Performance testing: Low-overhead recording during intensive tasks</li> <li>Complete screen recording: When you need more than just video</li> </ul>"},{"location":"data/viewer/","title":"Viewer for OWAMcap","text":"<p>We provide a web-based viewer for users to easily visualize and check OWAMcap datasets.</p>"},{"location":"data/viewer/#public-hosted","title":"Public hosted","text":"<p>We offer a public hosted viewer at https://huggingface.co/spaces/open-world-agents/visualize_dataset.</p> <p>You can provide a huggingface repo id, or you can also upload your own OWAMcap dataset file via the viewer. Note that this public hosted viewer has a 100MB upload file size limit. If you need to upload larger files, you may self-host the viewer.</p>"},{"location":"data/viewer/#self-hosted","title":"Self hosted","text":"<ol> <li>Go to <code>projects/owa-mcap-viewer</code> directory.</li> <li>Setup <code>EXPORT_PATH</code> environment variable. You may setup <code>.env</code> or use <code>export</code> command.     <pre><code>export EXPORT_PATH=(path-to-your-folder-containing-mcap-and-mkvs)\n</code></pre></li> <li>Run <code>vuv install</code> for installing dependencies.</li> <li>Run the server with <code>uvicorn owa_viewer:app --host 0.0.0.0 --port 7860 --reload</code></li> <li>Access <code>http://localhost:7860</code> in your browser.</li> </ol>"},{"location":"env/","title":"Introducing OWA's Env","text":"<p>Open World Agents (OWA) introduces Env, a groundbreaking modular agent system designed for dynamic, real-time environments. Say goodbye to rigid frameworks with fixed interfaces\u2014Env's flexible architecture automatically discovers and loads components using Python's standard Entry Points system.</p>"},{"location":"env/#why-choose-owas-env","title":"Why Choose OWA's Env?","text":"<p>Traditional environmental interfaces like gymnasium.Env fall short when it comes to building real-time, real-world agents. They rely on synchronous steps (<code>env.step()</code>, <code>env.reset()</code>), which assume your agent has infinite time to process actions. That's not realistic for agents that need to react instantly in dynamic environments.</p> <p>Env changes the game with an event-driven, asynchronous design that mirrors real-world interactions. Here's what sets it apart:</p> <ul> <li> <p>Asynchronous Event Processing: Leverage <code>Callables</code>, <code>Listeners</code>, and <code>Runnables</code> for real-time interaction. No more waiting for <code>env.step()</code>\u2014the world doesn't stop, and neither should your agent. Learn more...</p> </li> <li> <p>Zero-Configuration Plugin System: Plugins are automatically discovered via Entry Points when installed with <code>pip install</code>. No manual activation needed\u2014components are immediately available with unified <code>namespace/name</code> patterns. Includes powerful CLI tools for plugin management. Learn more...</p> </li> <li> <p>Extensible, Open-Source Design: Built for the community, by the community. Create plugins using Python packaging standards and share them easily. Learn more...</p> </li> </ul>"},{"location":"env/#the-future-is-real-time","title":"The Future is Real-Time","text":"<p>Time waits for no one\u2014and neither do real-world agents. As we advance towards more responsive AI, agents must be capable of instantaneous reactions, just like humans. Env's architecture enables:</p> <ul> <li> <p>True Concurrent Processing: Handle multiple events simultaneously without bottlenecks.</p> </li> <li> <p>Measured Reaction Times: Agents operate within realistic timeframes, ensuring timely responses in dynamic settings.</p> </li> </ul> <p>We prioritize minimizing latency within the framework, aiming for agent reaction times that match or surpass human capabilities. Throughout our codebase, we ensure latency doesn't exceed 30ms. Check out how we achieve this in our Screen Listeners, and Test Screen Listener.</p>"},{"location":"env/#get-started-today","title":"Get Started Today","text":"<p>Don't let outdated frameworks hold you back. Embrace the future with OWA's Env and build agents that are ready for the real world.</p>"},{"location":"env/#documentation","title":"Documentation","text":"<ul> <li>Comprehensive Guide - Complete overview of OWA's Env system</li> <li>Custom Plugins - How to create your own plugins</li> <li>Plugin Specification Guide - Detailed guide for writing PluginSpec in Python and YAML</li> <li>YAML Plugin Guide - Focused guide for YAML-based plugin specifications</li> <li>Documentation Validation - Tools for validating plugin documentation</li> </ul>"},{"location":"env/#available-plugins","title":"Available Plugins","text":"<ul> <li>Standard Environment - Core utilities and timing functions</li> <li>Desktop Environment - Mouse, keyboard, and window control</li> <li>GStreamer Environment - High-performance multimedia processing</li> </ul>"},{"location":"env/custom_plugins/","title":"How to write your own EnvPlugin","text":"<p>You can write &amp; contribute your own EnvPlugin using the Entry Points-based system for automatic discovery.</p>"},{"location":"env/custom_plugins/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Copy the example template: Copy &amp; Paste owa-env-example directory. This directory contains:     <pre><code>owa-env-example\n\u251c\u2500\u2500 owa/env/example\n\u2502   \u251c\u2500\u2500 __init__.py           # Plugin specification\n\u2502   \u251c\u2500\u2500 example_callable.py\n\u2502   \u251c\u2500\u2500 example_listener.py\n\u2502   \u2514\u2500\u2500 example_runnable.py\n\u251c\u2500\u2500 pyproject.toml            # Entry point declaration\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 test_print.py\n\u2514\u2500\u2500 uv.lock\n</code></pre></p> </li> <li> <p>Rename and customize: Rename <code>owa-env-example</code> to your plugin name (e.g., <code>owa-env-myplugin</code>).</p> </li> <li> <p>Update Entry Point Declaration: In <code>pyproject.toml</code>, update the entry point:     <pre><code>[project.entry-points.\"owa.env.plugins\"]\nmyplugin = \"owa.env.myplugin:plugin_spec\"\n</code></pre></p> </li> <li> <p>Create Plugin Specification: In your <code>__init__.py</code>, define the plugin specification:     <pre><code>from owa.core.plugin_spec import PluginSpec\n\nplugin_spec = PluginSpec(\n    namespace=\"myplugin\",\n    version=\"0.1.0\",\n    description=\"My custom plugin\",\n    author=\"Your Name\",\n    components={\n        \"callables\": {\n            \"hello\": \"owa.env.myplugin:say_hello\",\n            \"add\": \"owa.env.myplugin:add_numbers\",\n        },\n        \"listeners\": {\n            \"events\": \"owa.env.myplugin:EventListener\",\n        },\n        \"runnables\": {\n            \"processor\": \"owa.env.myplugin:DataProcessor\",\n        }\n    }\n)\n</code></pre></p> <p>\ud83d\udcd6 For detailed guidance on writing plugin specifications, see: - Plugin Specification Guide - Complete guide for Python and YAML formats - YAML Plugin Guide - Focused guide for YAML-based specifications</p> </li> <li> <p>Implement Components: Write your component implementations using the unified <code>namespace/name</code> pattern.</p> </li> <li> <p>Package Structure: Maintain the namespace package structure:</p> <ul> <li>Important: All source files must be inside the <code>owa/env/myplugin</code> folder.</li> <li>What NOT to do: Don't place source files between <code>owa</code> and <code>owa/env/myplugin</code>.</li> <li>Correct structure:     <pre><code>owa\n\u2514\u2500\u2500 env\n    \u2514\u2500\u2500 myplugin\n        \u251c\u2500\u2500 __init__.py      # Plugin specification\n        \u251c\u2500\u2500 your_code.py\n        \u251c\u2500\u2500 your_module.py\n        \u2514\u2500\u2500 components.py\n</code></pre></li> </ul> </li> <li> <p>Install and Test: Install your plugin with <code>pip install -e .</code> and test that components are automatically available.</p> </li> <li> <p>Validate Plugin: Use the CLI to validate your plugin specification:    <pre><code># Validate Python entry point specification\nowl env validate owa.env.myplugin:plugin_spec\n\n# Validate YAML specification (if using YAML format)\nowl env validate ./plugin.yaml\n\n# Validate with detailed output\nowl env validate owa.env.myplugin:plugin_spec --verbose\n\n# List your plugin to verify it's discovered\nowl env list --namespace myplugin\n\n# Show detailed component information\nowl env show myplugin --components\n</code></pre></p> </li> <li> <p>Contribute: Make a PR following the Contributing Guide.</p> </li> </ol>"},{"location":"env/custom_plugins/#cli-tools-for-plugin-development","title":"CLI Tools for Plugin Development","text":"<p>The <code>owl env</code> command provides comprehensive tools for plugin development and testing:</p> <pre><code># Discover and list your plugin\n$ owl env list --namespace myplugin\n\n# Show detailed component information with import paths\n$ owl env show myplugin --components --details\n\n# Inspect specific components\n$ owl env show myplugin --inspect my_function\n\n# Search for components in your plugin\n$ owl env search \"my.*function\" --namespace myplugin\n\n# List specific component types with details\n$ owl env list --type callables --details --table\n\n# Check ecosystem health and your plugin's integration\n$ owl env health\n$ owl env stats --by-namespace\n\n# Quick exploration shortcuts\n$ owl env ls myplugin                              # Quick plugin overview\n$ owl env find my_function                         # Quick component search\n$ owl env namespaces                               # See all available namespaces\n\n# Validate plugin specifications\n$ owl env validate owa.env.myplugin:plugin_spec    # Python entry point\n$ owl env validate ./plugin.yaml                   # YAML file\n</code></pre>"},{"location":"env/custom_plugins/#key-benefits-of-entry-points-system","title":"Key Benefits of Entry Points System","text":"<ul> <li>Zero Configuration: Users just <code>pip install</code> your plugin - no manual activation needed</li> <li>Automatic Discovery: Components are immediately available after installation</li> <li>Unified Naming: All components use <code>namespace/name</code> pattern for consistency</li> <li>Python Standards: Follows official Python packaging guidelines</li> <li>Lazy Loading: Components are imported only when accessed for better performance</li> <li>CLI Support: Rich command-line tools for plugin management and validation</li> </ul>"},{"location":"env/documentation_quick_reference/","title":"Documentation Quick Reference","text":"<p>Quick reference for OEP-0004 documentation validation and generation features.</p>"},{"location":"env/documentation_quick_reference/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"env/documentation_quick_reference/#validate-all-plugins","title":"Validate All Plugins","text":"<pre><code>owl env validate-docs\n</code></pre>"},{"location":"env/documentation_quick_reference/#validate-specific-plugin","title":"Validate Specific Plugin","text":"<pre><code>owl env validate-docs example\n</code></pre>"},{"location":"env/documentation_quick_reference/#cicd-mode","title":"CI/CD Mode","text":"<pre><code>owl env validate-docs --strict\n</code></pre>"},{"location":"env/documentation_quick_reference/#commands-reference","title":"\ud83d\udcca Commands Reference","text":"Command Description Example <code>owl env validate-docs</code> Validate all plugins <code>owl env validate-docs</code> <code>owl env validate-docs PLUGIN</code> Validate specific plugin <code>owl env validate-docs example</code> <code>owl env validate-docs --strict</code> Enforce 100% coverage <code>owl env validate-docs --strict</code> <code>owl env validate-docs --format json</code> JSON output <code>owl env validate-docs --format json</code> <code>owl env validate-docs --check-quality</code> Detailed quality checks <code>owl env validate-docs --check-quality</code> <code>owl env docs-stats</code> Show statistics <code>owl env docs-stats</code> <code>owl env docs-stats --by-type</code> Group by component type <code>owl env docs-stats --by-type</code>"},{"location":"env/documentation_quick_reference/#exit-codes","title":"\ud83c\udfaf Exit Codes","text":"Code Meaning Usage 0 All validations passed Success in CI/CD 1 Documentation issues found Fail in CI/CD 2 Command error Fix command usage"},{"location":"env/documentation_quick_reference/#mkdocstrings-usage","title":"\ud83d\udcdd mkdocstrings Usage","text":""},{"location":"env/documentation_quick_reference/#plugin-overview","title":"Plugin Overview","text":"<pre><code>::: example\n    handler: owa\n</code></pre>"},{"location":"env/documentation_quick_reference/#individual-component","title":"Individual Component","text":"<pre><code>::: example/mouse.click\n    handler: owa\n    options:\n      show_signature: true\n      show_examples: true\n</code></pre>"},{"location":"env/documentation_quick_reference/#configuration","title":"Configuration","text":"<pre><code># mkdocs.yml\nplugins:\n  - mkdocstrings:\n      handlers:\n        owa:\n          options:\n            show_plugin_metadata: true\n            include_source_links: true\n</code></pre> <p>Note: Requires <code>pip install -e projects/owa-core</code> for entry point registration.</p>"},{"location":"env/documentation_quick_reference/#documentation-checklist","title":"\u2705 Documentation Checklist","text":""},{"location":"env/documentation_quick_reference/#required-elements","title":"Required Elements","text":"<ul> <li>[ ] Non-empty docstring</li> <li>[ ] Clear summary (first line)</li> <li>[ ] Parameter documentation (if applicable)</li> <li>[ ] Return value documentation</li> <li>[ ] Usage examples</li> <li>[ ] Type hints</li> </ul>"},{"location":"env/documentation_quick_reference/#example-well-documented-function","title":"Example: Well-Documented Function","text":"<pre><code>def screen_capture(region: Optional[Tuple[int, int, int, int]] = None) -&gt; Image:\n    \"\"\"\n    Capture a screenshot of the desktop or a specific region.\n\n    This function captures the current state of the desktop and returns\n    it as a PIL Image object.\n\n    Args:\n        region: Optional tuple (x, y, width, height) defining the capture area.\n               If None, captures the entire screen.\n\n    Returns:\n        PIL Image object containing the captured screenshot.\n\n    Raises:\n        ScreenCaptureError: If the screen capture fails.\n\n    Examples:\n        Capture the entire screen:\n\n        &gt;&gt;&gt; image = screen_capture()\n        &gt;&gt;&gt; image.save(\"screenshot.png\")\n\n        Capture a specific region:\n\n        &gt;&gt;&gt; region_image = screen_capture((100, 100, 800, 600))\n        &gt;&gt;&gt; region_image.show()\n    \"\"\"\n</code></pre>"},{"location":"env/documentation_quick_reference/#cicd-integration","title":"\ud83d\udd27 CI/CD Integration","text":""},{"location":"env/documentation_quick_reference/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Validate Documentation\n  run: owl env validate-docs --strict\n</code></pre>"},{"location":"env/documentation_quick_reference/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>- repo: local\n  hooks:\n    - id: validate-docs\n      name: Validate Plugin Documentation\n      entry: owl env validate-docs\n      language: system\n      pass_filenames: false\n</code></pre>"},{"location":"env/documentation_quick_reference/#pytest-integration","title":"pytest Integration","text":"<pre><code>def test_plugin_documentation():\n    result = subprocess.run(\n        [\"owl\", \"env\", \"validate-docs\", \"--format\", \"json\"],\n        capture_output=True, text=True\n    )\n    data = json.loads(result.stdout)\n    assert data[\"overall_coverage\"] &gt;= 0.9\n    assert result.returncode == 0\n</code></pre>"},{"location":"env/documentation_quick_reference/#common-issues","title":"\ud83d\udc1b Common Issues","text":"Issue Solution \"Missing docstring\" Add docstring to component \"Missing type hints\" Add type annotations \"Missing usage examples\" Add Examples section to docstring \"Component failed to load\" Check imports and dependencies \"Summary too short\" Write descriptive summary (&gt;10 chars)"},{"location":"env/documentation_quick_reference/#output-examples","title":"\ud83d\udcc8 Output Examples","text":""},{"location":"env/documentation_quick_reference/#text-output","title":"Text Output","text":"<pre><code>\u2705 std plugin: 2/2 components documented (100%)\n\u26a0\ufe0f  desktop plugin: 23/25 components documented (92%)\n\u274c custom plugin: 1/5 components documented (20%)\n\n\ud83d\udcca Overall: 26/32 components documented (81%)\n\u274c FAIL: Documentation coverage 81% below minimum 90%\n</code></pre>"},{"location":"env/documentation_quick_reference/#json-output","title":"JSON Output","text":"<pre><code>{\n  \"overall_coverage\": 0.81,\n  \"plugins\": {\n    \"std\": {\n      \"coverage\": 1.0,\n      \"documented\": 2,\n      \"total\": 2,\n      \"status\": \"pass\"\n    }\n  },\n  \"exit_code\": 1\n}\n</code></pre>"},{"location":"env/documentation_quick_reference/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Write Clear Summaries: First line should be descriptive</li> <li>Document Parameters: Use Args: section for all parameters</li> <li>Include Examples: Show practical usage</li> <li>Use Type Hints: Add proper type annotations</li> <li>Test Documentation: Run validation regularly</li> <li>Automate Checks: Add to CI/CD pipeline</li> </ol>"},{"location":"env/documentation_quick_reference/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Full Documentation Guide</li> <li>Custom Plugin Development</li> <li>OEP-0004 Specification</li> </ul>"},{"location":"env/documentation_validation/","title":"Documentation Validation (OEP-0004)","text":"<p>OEP-0004 introduces a comprehensive documentation validation system for OWA plugins, providing both CI/CD integration and automatic documentation generation capabilities.</p>"},{"location":"env/documentation_validation/#overview","title":"Overview","text":"<p>The documentation validation system consists of two main components:</p> <ol> <li>Documentation Validator: A command-line tool for validating plugin documentation quality</li> <li>mkdocstrings Handler: A custom handler for automatic documentation generation</li> </ol>"},{"location":"env/documentation_validation/#documentation-validation","title":"Documentation Validation","text":""},{"location":"env/documentation_validation/#basic-usage","title":"Basic Usage","text":"<p>Validate documentation for all plugins:</p> <pre><code>$ owl env validate-docs\n\u2705 std plugin: 2/2 components documented (100%)\n\u2705 example plugin: 7/7 components documented (100%)  \n\u26a0\ufe0f  desktop plugin: 23/25 components documented (92%)\n\u274c custom plugin: 1/5 components documented (20%)\n\n\ud83d\udcca Overall: 33/39 components documented (85%)\n\u274c FAIL: Documentation coverage 85% below minimum 90%\n</code></pre> <p>Validate a specific plugin:</p> <pre><code>$ owl env validate-docs example\n\u2705 example plugin: 7/7 components documented (100%)\n\u2705 PASS: All components properly documented\n</code></pre>"},{"location":"env/documentation_validation/#cicd-integration","title":"CI/CD Integration","text":"<p>The validation command provides proper exit codes for automated testing:</p> <ul> <li>Exit Code 0: All validations passed</li> <li>Exit Code 1: Documentation issues found</li> <li>Exit Code 2: Command error (invalid arguments, plugin not found, etc.)</li> </ul>"},{"location":"env/documentation_validation/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: Documentation Validation\non: [push, pull_request]\n\njobs:\n  validate-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: pip install -e .\n      - name: Validate Documentation\n        run: owl env validate-docs --strict\n</code></pre>"},{"location":"env/documentation_validation/#advanced-options","title":"Advanced Options","text":""},{"location":"env/documentation_validation/#strict-mode","title":"Strict Mode","text":"<p>In strict mode, any missing documentation is treated as a failure:</p> <pre><code>$ owl env validate-docs --strict\n\u274c FAIL: Documentation coverage 88% below minimum 100% (strict mode)\n</code></pre>"},{"location":"env/documentation_validation/#json-output","title":"JSON Output","text":"<p>For tooling integration, use JSON output format:</p> <pre><code>$ owl env validate-docs --format json\n{\n  \"overall_coverage\": 0.88,\n  \"plugins\": {\n    \"example\": {\n      \"coverage\": 1.0,\n      \"documented\": 7,\n      \"total\": 7,\n      \"status\": \"pass\"\n    },\n    \"desktop\": {\n      \"coverage\": 0.92,\n      \"documented\": 23,\n      \"total\": 25,\n      \"status\": \"warning\"\n    }\n  },\n  \"exit_code\": 1\n}\n</code></pre>"},{"location":"env/documentation_validation/#quality-checks","title":"Quality Checks","text":"<p>Enable detailed quality validation:</p> <pre><code>$ owl env validate-docs --check-quality --min-examples 1\n\u274c desktop/window.get_active: Missing usage examples\n\u274c desktop/screen.capture: Missing parameter documentation\n\u26a0\ufe0f  Found 2 quality issues across 2 plugins\n</code></pre>"},{"location":"env/documentation_validation/#validation-criteria","title":"Validation Criteria","text":"<p>The validator checks for:</p> <ol> <li>Docstring Presence: Every component must have a non-empty docstring</li> <li>Docstring Quality: Docstrings should include summary and parameter documentation</li> <li>Type Hints: Functions should have type hints for parameters and return values</li> <li>Examples: Components should include usage examples in docstrings</li> <li>Component Loading: Components must be loadable without errors</li> </ol>"},{"location":"env/documentation_validation/#automatic-documentation-generation","title":"Automatic Documentation Generation","text":""},{"location":"env/documentation_validation/#mkdocstrings-integration","title":"mkdocstrings Integration","text":"<p>OEP-0004 provides a custom mkdocstrings handler that understands OWA's plugin structure:</p>"},{"location":"env/documentation_validation/#plugin-overview","title":"Plugin Overview","text":"<pre><code># Example Plugin Documentation\n\n::: example\n    handler: owa\n</code></pre> <p>This generates a complete plugin overview with all components.</p>"},{"location":"env/documentation_validation/#individual-components","title":"Individual Components","text":"<pre><code># Mouse Click Function\n\n::: example/mouse.click\n    handler: owa\n    options:\n      show_signature: true\n      show_examples: true\n</code></pre> <p>This generates detailed documentation for a specific component.</p>"},{"location":"env/documentation_validation/#configuration","title":"Configuration","text":"<p>The owa handler is available through the <code>mkdocstrings_handlers</code> package structure. Add it to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        owa:\n          options:\n            show_plugin_metadata: true\n            include_source_links: true\n</code></pre> <p>Note: The handler is located in <code>mkdocstrings_handlers/owa.py</code> following the mkdocstrings custom handler convention. It automatically detects and imports OWA core modules when available.</p>"},{"location":"env/documentation_validation/#documentation-statistics","title":"Documentation Statistics","text":"<p>View documentation statistics for development:</p> <pre><code>$ owl env docs-stats\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Plugin  \u2503 Coverage \u2503 Documented  \u2503 Total \u2503 Status \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 std     \u2502    100%  \u2502          2  \u2502     2 \u2502   \u2705   \u2502\n\u2502 example \u2502    100%  \u2502          7  \u2502     7 \u2502   \u2705   \u2502\n\u2502 desktop \u2502     92%  \u2502         23  \u2502    25 \u2502   \u26a0\ufe0f   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udcca Overall Coverage: 82.1% (32/39)\n</code></pre> <p>Group by component type:</p> <pre><code>$ owl env docs-stats --by-type\n</code></pre>"},{"location":"env/documentation_validation/#best-practices","title":"Best Practices","text":""},{"location":"env/documentation_validation/#writing-good-documentation","title":"Writing Good Documentation","text":"<ol> <li>Clear Summaries: Start with a concise one-line summary</li> <li>Parameter Documentation: Document all parameters with types and descriptions</li> <li>Return Values: Clearly describe what the function returns</li> <li>Examples: Include practical usage examples</li> <li>Type Hints: Use proper type annotations</li> </ol>"},{"location":"env/documentation_validation/#example-well-documented-component","title":"Example: Well-Documented Component","text":"<pre><code>def screen_capture(region: Optional[Tuple[int, int, int, int]] = None) -&gt; Image:\n    \"\"\"\n    Capture a screenshot of the desktop or a specific region.\n\n    This function captures the current state of the desktop and returns\n    it as a PIL Image object. Optionally, you can specify a region to\n    capture only a portion of the screen.\n\n    Args:\n        region: Optional tuple (x, y, width, height) defining the capture area.\n               If None, captures the entire screen.\n\n    Returns:\n        PIL Image object containing the captured screenshot.\n\n    Raises:\n        ScreenCaptureError: If the screen capture fails.\n\n    Examples:\n        Capture the entire screen:\n\n        &gt;&gt;&gt; image = screen_capture()\n        &gt;&gt;&gt; image.save(\"screenshot.png\")\n\n        Capture a specific region:\n\n        &gt;&gt;&gt; region_image = screen_capture((100, 100, 800, 600))\n        &gt;&gt;&gt; region_image.show()\n    \"\"\"\n    # Implementation here...\n</code></pre>"},{"location":"env/documentation_validation/#integration-with-development-workflow","title":"Integration with Development Workflow","text":""},{"location":"env/documentation_validation/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Add documentation validation to your pre-commit hooks:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: validate-docs\n        name: Validate Plugin Documentation\n        entry: owl env validate-docs\n        language: system\n        pass_filenames: false\n</code></pre>"},{"location":"env/documentation_validation/#pytest-integration","title":"pytest Integration","text":"<p>Include documentation validation in your test suite:</p> <pre><code>import subprocess\nimport json\n\ndef test_plugin_documentation():\n    \"\"\"Test that all plugins have adequate documentation.\"\"\"\n    result = subprocess.run(\n        [\"owl\", \"env\", \"validate-docs\", \"--format\", \"json\"],\n        capture_output=True, text=True\n    )\n\n    data = json.loads(result.stdout)\n    assert data[\"overall_coverage\"] &gt;= 0.9, f\"Documentation coverage {data['overall_coverage']} below 90%\"\n    assert result.returncode == 0, \"Documentation validation failed\"\n</code></pre>"},{"location":"env/documentation_validation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"env/documentation_validation/#common-issues","title":"Common Issues","text":"<ol> <li>Import Errors: Ensure all plugin dependencies are installed</li> <li>Missing Type Hints: Add type annotations to function parameters and return values</li> <li>Empty Docstrings: Add meaningful documentation to all components</li> <li>Loading Failures: Check that components can be imported without errors</li> </ol>"},{"location":"env/documentation_validation/#getting-help","title":"Getting Help","text":"<ul> <li>Check the validation output for specific issues</li> <li>Use <code>--check-quality</code> for detailed quality analysis</li> <li>Review the Plugin Development Guide for best practices</li> </ul>"},{"location":"env/guide/","title":"Comprehensive Guide for Env","text":""},{"location":"env/guide/#core-concepts","title":"Core Concepts","text":""},{"location":"env/guide/#three-main-components","title":"Three Main Components:","text":"<p>Open World Agents (OWA)'s Env consists of three primary components that enable interaction with the environment in different ways.</p> <ol> <li> <p>Callable - Functions you actively call to perform actions or get state</p> <ul> <li>These are like traditional function calls; you invoke them when you need to perform an action or retrieve some information from the environment.</li> <li>Implements <code>__call__</code> function</li> <li>Example: <code>CALLABLES[\"std/time_ns\"]()</code></li> </ul> </li> <li> <p>Listener - Components that respond to events and execute your callbacks</p> <ul> <li>Listeners wait for specific events and execute your callback functions when those events occur.</li> <li>Takes a <code>callback</code> parameter in the <code>configure</code> method</li> <li>Example: <pre><code>listener = LISTENERS[\"keyboard\"]().configure(callback=my_callback)\nwith listener.session:\n    input(\"Type enter to exit.\")\n</code></pre> This example sets up a keyboard listener that invokes <code>my_callback</code> whenever a keyboard event is detected.</li> </ul> </li> <li> <p>Runnable - Background processes that can be started and stopped</p> <ul> <li>Runnables run in the background and can be managed with start and stop operations.</li> <li>Parent class of <code>Listener</code>, the only difference is absence of <code>callback</code> argument in <code>configure</code>.</li> <li>Supports <code>start()</code>, <code>stop()</code>, and <code>join()</code> operations</li> </ul> </li> </ol> <p>What's the difference between Callable and Listener?</p> <p>The key difference between these two is who initiates the call:</p> <ul> <li>In Callable, caller actively executes the Callable.</li> <li>In Listener, callee waits for events and then calls user-provided \"callbacks\".</li> </ul> <p>In other words, Callables are synchronous functions you call directly, while Listeners are asynchronous and react to events.</p> <p>Common environmental interfaces such as gymnasium.Env only provides object/method equivalent to Callable.</p>"},{"location":"env/guide/#registry-system","title":"Registry System","text":"<p>The OWA environment uses a registry system to manage and access the various components.</p> <p>Components are managed through global registries:</p> <ul> <li> <p><code>CALLABLES</code> - Dictionary of callable functions</p> </li> <li> <p><code>LISTENERS</code> - Dictionary of event listeners</p> </li> <li> <p><code>RUNNABLES</code> - Dictionary of background processes</p> </li> </ul> <p>Zero-Configuration Plugin Discovery: Plugins are automatically discovered when installed via pip using Python's Entry Points system. No manual activation needed!</p> <pre><code>from owa.core.registry import CALLABLES, LISTENERS, RUNNABLES\n# Components automatically available after plugin installation\n</code></pre> <p>All components use unified <code>namespace/name</code> naming pattern for consistency.</p>"},{"location":"env/guide/#environment-usage-examples","title":"Environment Usage Examples","text":""},{"location":"env/guide/#standard-environment-owaenvstd","title":"Standard Environment (<code>owa.env.std</code>)","text":"<p>Here is an example of how to use the standard environment to interact with clock functionalities.</p> <p><pre><code>import time\nfrom owa.core.registry import CALLABLES, LISTENERS\n\n# Components automatically available - no activation needed!\n# Unified namespace/name pattern: std/time_ns, std/tick\n\n# Testing the std/tick listener\ntick = LISTENERS[\"std/tick\"]().configure(callback=lambda: print(CALLABLES[\"std/time_ns\"]()), interval=1)\ntick.start()\n\ntime.sleep(2)  # The listener prints the current time in nanoseconds a few times\n\ntick.stop(), tick.join()\n</code></pre> Components are automatically discovered and available after installation. All components use the unified <code>namespace/name</code> pattern.</p> <p>Instead of manual <code>start-stop-join</code> procedure, you may utilize context manager: <code>.session</code>! Following example shows how to abbreviate <code>start-stop-join</code> steps.</p> <pre><code>with tick.session:\n    time.sleep(2)\n</code></pre>"},{"location":"env/guide/#desktop-environment-owaenvdesktop","title":"Desktop Environment (<code>owa.env.desktop</code>)","text":"<p>The desktop environment module provides capabilities for UI interaction and input handling.</p> <p><pre><code>from owa.core.registry import CALLABLES, LISTENERS\nfrom owa.env.desktop.msg import KeyboardEvent\n\n# Components automatically available - unified namespace/name pattern\n\n# Using screen capture and window management features\nprint(f\"{CALLABLES['desktop/screen.capture']().shape=}\")  # Example output: (1080, 1920, 3)\nprint(f\"{CALLABLES['desktop/window.get_active_window']()=}\")\nprint(f\"{CALLABLES['desktop/window.get_window_by_title']('open-world-agents')=}\")\n\n# Simulating a mouse click (left button, double click)\nmouse_click = CALLABLES[\"desktop/mouse.click\"]\nmouse_click(\"left\", 2)\n\n\n# Configuring a keyboard listener\ndef on_keyboard_event(keyboard_event: KeyboardEvent):\n    print(f\"Keyboard event: {keyboard_event.event_type=}, {keyboard_event.vk=}\")\n\n\nkeyboard_listener = LISTENERS[\"desktop/keyboard\"]().configure(callback=on_keyboard_event)\nwith keyboard_listener.session:\n    input(\"Type enter to exit.\\n\")\n</code></pre> Components are automatically available with unified naming. This code demonstrates capturing the screen, retrieving window information, simulating mouse clicks, and listening to keyboard events.</p>"},{"location":"env/guide/#custom-envplugin-example","title":"Custom EnvPlugin Example","text":"<p>You can create your own plugins using Entry Points for automatic discovery. For more information, see Custom EnvPlugin.</p> <p>Creating custom plugins allows you to extend the OWA environment with your own functionalities.</p> <p><pre><code># In your plugin's pyproject.toml:\n# [project.entry-points.\"owa.env.plugins\"]\n# myplugin = \"owa.env.myplugin:plugin_spec\"\n\n# In your plugin specification:\nfrom owa.core.plugin_spec import PluginSpec\n\nplugin_spec = PluginSpec(\n    namespace=\"myplugin\",\n    version=\"0.1.0\",\n    description=\"My custom plugin\",\n    components={\n        \"callables\": {\n            \"add\": \"owa.env.myplugin:add_function\",\n        },\n        \"listeners\": {\n            \"events\": \"owa.env.myplugin:EventListener\",\n        }\n    }\n)\n\n# Using the custom plugin (automatically available after pip install)\nfrom owa.core.registry import CALLABLES, LISTENERS\nresult = CALLABLES[\"myplugin/add\"](5, 3)  # Returns 8\n</code></pre> Plugins use Entry Points for automatic discovery and unified <code>namespace/name</code> pattern for all components.</p>"},{"location":"env/guide/#architecture-summary","title":"Architecture Summary","text":"<p>The diagram below summarizes the architecture of the OWA environment and how components are registered and used.</p> <pre><code>graph LR;\n    EP[Entry Points] --&gt;|Auto-discovers| SM[\"Standard Plugin(owa.env.std)\"]\n    EP --&gt;|Auto-discovers| DM[\"Desktop Plugin(owa.env.desktop)\"]\n    SM --&gt;|Provides| C1[std/time_ns]\n    SM --&gt;|Provides| L1[std/tick Listener]\n    DM --&gt;|Provides| C2[desktop/screen.capture]\n    DM --&gt;|Provides| C3[desktop/window.get_active_window]\n    DM --&gt;|Provides| L2[desktop/keyboard Listener]\n    User --&gt;|pip install| PI[Plugin Installation]\n    PI --&gt; EP\n    EP --&gt; R[Registry]</code></pre>"},{"location":"env/guide/#cli-tools-for-plugin-management","title":"CLI Tools for Plugin Management","text":"<p>The <code>owl env</code> command provides powerful tools for managing and exploring plugins with enhanced filtering, search, and analysis capabilities:</p>"},{"location":"env/guide/#plugin-discovery-and-listing","title":"Plugin Discovery and Listing","text":"<pre><code># List all discovered plugins\n$ owl env list\n\n# Enhanced filtering and display options\n$ owl env list --namespace example                # Filter by namespace\n$ owl env list --type callables                   # Filter by component type\n$ owl env list --search mouse                     # Search by pattern\n$ owl env list --details                          # Show import paths and load status\n$ owl env list --table                            # Display in table format\n$ owl env list --sort name                        # Sort by name, namespace, or type\n</code></pre>"},{"location":"env/guide/#plugin-information-and-inspection","title":"Plugin Information and Inspection","text":"<pre><code># Show plugin summary\n$ owl env show example\n\n# Enhanced plugin exploration\n$ owl env show example --components               # Show detailed component list\n$ owl env show example --inspect mouse.click      # Inspect specific component\n$ owl env show example --type callables           # Filter by component type\n$ owl env show example --search window            # Search within namespace\n$ owl env show example --table                    # Display in table format\n</code></pre>"},{"location":"env/guide/#advanced-search-and-discovery","title":"Advanced Search and Discovery","text":"<pre><code># Search across all plugins\n$ owl env search \"mouse.*click\"                   # Regex pattern search\n$ owl env search window --details --table         # Detailed search results\n$ owl env search keyboard --type callables        # Search specific component type\n\n# Quick access shortcuts\n$ owl env ls                                       # Quick plugin list\n$ owl env ls desktop                              # Quick namespace exploration\n$ owl env find mouse                              # Quick component search\n$ owl env namespaces                              # List all available namespaces\n</code></pre>"},{"location":"env/guide/#ecosystem-analysis","title":"Ecosystem Analysis","text":"<pre><code># Statistics and health monitoring\n$ owl env stats                                    # Show ecosystem statistics\n$ owl env stats --by-namespace                    # Group by namespace\n$ owl env stats --by-type                         # Group by component type\n$ owl env health                                   # Perform health check\n</code></pre>"},{"location":"env/guide/#plugin-development","title":"Plugin Development","text":"<pre><code># Validate plugin specifications\n$ owl env validate owa.env.myplugin:plugin_spec    # Python entry point\n$ owl env validate ./plugin.yaml                   # YAML file\n$ owl env validate ./plugin.yaml --verbose         # Detailed validation\n$ owl env validate ./plugin.yaml --no-check-imports # Skip import validation\n</code></pre>"},{"location":"env/guide/#example-cli-output","title":"Example CLI Output","text":"<pre><code>$ owl env list\n\ud83d\udce6 Discovered Plugins (4)\n\u251c\u2500\u2500 desktop (25 components)\n\u2502   \u251c\u2500\u2500 \ud83d\udcde Callables: 20\n\u2502   \u2514\u2500\u2500 \ud83d\udc42 Listeners: 5\n\u251c\u2500\u2500 example (7 components)\n\u2502   \u251c\u2500\u2500 \ud83d\udcde Callables: 3\n\u2502   \u251c\u2500\u2500 \ud83d\udc42 Listeners: 2\n\u2502   \u2514\u2500\u2500 \ud83c\udfc3 Runnables: 2\n\u251c\u2500\u2500 gst (4 components)\n\u2502   \u251c\u2500\u2500 \ud83d\udc42 Listeners: 2\n\u2502   \u2514\u2500\u2500 \ud83c\udfc3 Runnables: 2\n\u2514\u2500\u2500 std (2 components)\n    \u251c\u2500\u2500 \ud83d\udcde Callables: 1\n    \u2514\u2500\u2500 \ud83d\udc42 Listeners: 1\n\n$ owl env show example --components\n\ud83d\udce6 Plugin: example (7 components)\n\u251c\u2500\u2500 \ud83d\udcde Callables: 3\n\u251c\u2500\u2500 \ud83d\udc42 Listeners: 2\n\u2514\u2500\u2500 \ud83c\udfc3 Runnables: 2\n\ud83d\udcde Callables (3)\n\u251c\u2500\u2500 example/add\n\u251c\u2500\u2500 example/callable\n\u2514\u2500\u2500 example/print\n\ud83d\udc42 Listeners (2)\n\u251c\u2500\u2500 example/listener\n\u2514\u2500\u2500 example/timer\n\ud83c\udfc3 Runnables (2)\n\u251c\u2500\u2500 example/counter\n\u2514\u2500\u2500 example/runnable\n\n$ owl env search \"mouse\" --table\n               Search Results for 'mouse' (9 matches)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Component               \u2503 Type      \u2503 Namespace \u2503 Name            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 desktop/mouse           \u2502 listeners \u2502 desktop   \u2502 mouse           \u2502\n\u2502 desktop/mouse.click     \u2502 callables \u2502 desktop   \u2502 mouse.click     \u2502\n\u2502 desktop/mouse.move      \u2502 callables \u2502 desktop   \u2502 mouse.move      \u2502\n\u2502 desktop/mouse.press     \u2502 callables \u2502 desktop   \u2502 mouse.press     \u2502\n\u2502 desktop/mouse.scroll    \u2502 callables \u2502 desktop   \u2502 mouse.scroll    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n$ owl env namespaces\n             Available Namespaces\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Namespace \u2503 Components \u2503 Quick Access       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 desktop   \u2502        25 \u2502 owl env ls desktop \u2502\n\u2502 example   \u2502         7 \u2502 owl env ls example \u2502\n\u2502 gst       \u2502         4 \u2502 owl env ls gst     \u2502\n\u2502 std       \u2502         2 \u2502 owl env ls std     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"env/guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>For standard module details: owa-env-std</li> <li>For desktop features: owa-env-desktop</li> <li>For multimedia support: owa-env-gst</li> <li>For custom EnvPlugin development: custom_plugins.md</li> </ul>"},{"location":"env/plugin_specification_guide/","title":"Plugin Specification Guide","text":"<p>This guide covers how to write PluginSpec configurations in both Python and YAML formats for Open World Agents (OWA) plugins.</p>"},{"location":"env/plugin_specification_guide/#overview","title":"Overview","text":"<p>A PluginSpec defines the structure and components of your plugin, enabling automatic discovery and registration through the OWA plugin system. You can define your plugin specification in two ways:</p> <ol> <li>Python Format - Direct PluginSpec object (recommended for most cases)</li> <li>YAML Format - External YAML file (useful for configuration-driven development)</li> </ol>"},{"location":"env/plugin_specification_guide/#python-format-recommended","title":"Python Format (Recommended)","text":""},{"location":"env/plugin_specification_guide/#basic-structure","title":"Basic Structure","text":"<p>Create a <code>PluginSpec</code> object in your plugin's <code>__init__.py</code> file:</p> <pre><code>from owa.core.plugin_spec import PluginSpec\n\nplugin_spec = PluginSpec(\n    namespace=\"myplugin\",\n    version=\"1.0.0\", \n    description=\"My custom plugin for OWA\",\n    author=\"Your Name\",  # Optional\n    components={\n        \"callables\": {\n            \"function_name\": \"module.path:function_name\",\n        },\n        \"listeners\": {\n            \"listener_name\": \"module.path:ListenerClass\",\n        },\n        \"runnables\": {\n            \"runnable_name\": \"module.path:RunnableClass\",\n        }\n    }\n)\n</code></pre>"},{"location":"env/plugin_specification_guide/#required-fields","title":"Required Fields","text":"<ul> <li>namespace: Unique identifier for your plugin (letters, numbers, underscores, hyphens)</li> <li>version: Plugin version following semantic versioning</li> <li>description: Brief description of plugin functionality</li> <li>components: Dictionary of component types and their definitions</li> </ul>"},{"location":"env/plugin_specification_guide/#optional-fields","title":"Optional Fields","text":"<ul> <li>author: Plugin author name</li> </ul>"},{"location":"env/plugin_specification_guide/#component-types","title":"Component Types","text":""},{"location":"env/plugin_specification_guide/#callables","title":"Callables","text":"<p>Functions that users can call directly:</p> <pre><code>\"callables\": {\n    \"add\": \"owa.env.myplugin.math:add_numbers\",\n    \"screen.capture\": \"owa.env.myplugin.screen:capture_screen\",\n    \"mouse.click\": \"owa.env.myplugin.input:click_mouse\",\n}\n</code></pre>"},{"location":"env/plugin_specification_guide/#listeners","title":"Listeners","text":"<p>Event-driven components that respond to system events:</p> <pre><code>\"listeners\": {\n    \"keyboard\": \"owa.env.myplugin.input:KeyboardListener\",\n    \"file.watcher\": \"owa.env.myplugin.fs:FileWatcher\",\n    \"network.monitor\": \"owa.env.myplugin.net:NetworkMonitor\",\n}\n</code></pre>"},{"location":"env/plugin_specification_guide/#runnables","title":"Runnables","text":"<p>Background processes that can be started and stopped:</p> <pre><code>\"runnables\": {\n    \"data.processor\": \"owa.env.myplugin.processing:DataProcessor\", \n    \"log.collector\": \"owa.env.myplugin.logging:LogCollector\",\n    \"health.monitor\": \"owa.env.myplugin.monitoring:HealthMonitor\",\n}\n</code></pre>"},{"location":"env/plugin_specification_guide/#complete-example","title":"Complete Example","text":"<pre><code>from owa.core.plugin_spec import PluginSpec\n\nplugin_spec = PluginSpec(\n    namespace=\"mycompany_tools\",\n    version=\"2.1.0\",\n    description=\"Custom tools for automation and monitoring\",\n    author=\"MyCompany Development Team\",\n    components={\n        \"callables\": {\n            # Math utilities\n            \"math.add\": \"owa.env.mycompany_tools.math:add_numbers\",\n            \"math.multiply\": \"owa.env.mycompany_tools.math:multiply_numbers\",\n\n            # File operations\n            \"file.read\": \"owa.env.mycompany_tools.files:read_file\",\n            \"file.write\": \"owa.env.mycompany_tools.files:write_file\",\n\n            # System utilities\n            \"system.info\": \"owa.env.mycompany_tools.system:get_system_info\",\n        },\n        \"listeners\": {\n            # Event monitoring\n            \"file.changes\": \"owa.env.mycompany_tools.monitoring:FileChangeListener\",\n            \"system.alerts\": \"owa.env.mycompany_tools.monitoring:SystemAlertListener\",\n        },\n        \"runnables\": {\n            # Background services\n            \"log.processor\": \"owa.env.mycompany_tools.services:LogProcessor\",\n            \"health.checker\": \"owa.env.mycompany_tools.services:HealthChecker\",\n        }\n    }\n)\n</code></pre>"},{"location":"env/plugin_specification_guide/#entry-point-declaration","title":"Entry Point Declaration","text":"<p>In your <code>pyproject.toml</code>, declare the entry point:</p> <pre><code>[project.entry-points.\"owa.env.plugins\"]\nmycompany_tools = \"owa.env.mycompany_tools:plugin_spec\"\n</code></pre>"},{"location":"env/plugin_specification_guide/#yaml-format","title":"YAML Format","text":""},{"location":"env/plugin_specification_guide/#basic-structure_1","title":"Basic Structure","text":"<p>Create a <code>plugin.yaml</code> file with the same structure:</p> <pre><code>namespace: myplugin\nversion: \"1.0.0\"\ndescription: \"My custom plugin for OWA\"\nauthor: \"Your Name\"  # Optional\ncomponents:\n  callables:\n    function_name: \"module.path:function_name\"\n  listeners:\n    listener_name: \"module.path:ListenerClass\"\n  runnables:\n    runnable_name: \"module.path:RunnableClass\"\n</code></pre>"},{"location":"env/plugin_specification_guide/#complete-yaml-example","title":"Complete YAML Example","text":"<pre><code>namespace: mycompany_tools\nversion: \"2.1.0\"\ndescription: \"Custom tools for automation and monitoring\"\nauthor: \"MyCompany Development Team\"\ncomponents:\n  callables:\n    # Math utilities\n    math.add: \"owa.env.mycompany_tools.math:add_numbers\"\n    math.multiply: \"owa.env.mycompany_tools.math:multiply_numbers\"\n\n    # File operations  \n    file.read: \"owa.env.mycompany_tools.files:read_file\"\n    file.write: \"owa.env.mycompany_tools.files:write_file\"\n\n    # System utilities\n    system.info: \"owa.env.mycompany_tools.system:get_system_info\"\n\n  listeners:\n    # Event monitoring\n    file.changes: \"owa.env.mycompany_tools.monitoring:FileChangeListener\"\n    system.alerts: \"owa.env.mycompany_tools.monitoring:SystemAlertListener\"\n\n  runnables:\n    # Background services\n    log.processor: \"owa.env.mycompany_tools.services:LogProcessor\"\n    health.checker: \"owa.env.mycompany_tools.services:HealthChecker\"\n</code></pre>"},{"location":"env/plugin_specification_guide/#loading-yaml-in-python","title":"Loading YAML in Python","text":"<p>To use a YAML specification in your plugin:</p> <pre><code>from owa.core.plugin_spec import PluginSpec\nfrom pathlib import Path\n\n# Load from YAML file\nplugin_spec = PluginSpec.from_yaml(Path(__file__).parent / \"plugin.yaml\")\n</code></pre>"},{"location":"env/plugin_specification_guide/#naming-conventions","title":"Naming Conventions","text":""},{"location":"env/plugin_specification_guide/#namespace-rules","title":"Namespace Rules","text":"<ul> <li>Use letters, numbers, underscores, and hyphens only</li> <li>Keep it short and descriptive</li> <li>Examples: <code>desktop</code>, <code>gst</code>, <code>mycompany_tools</code></li> </ul>"},{"location":"env/plugin_specification_guide/#component-name-rules","title":"Component Name Rules","text":"<ul> <li>Use letters, numbers, underscores, and dots only</li> <li>Use dots for logical grouping: <code>mouse.click</code>, <code>file.read</code></li> <li>Keep names descriptive and consistent</li> <li>Examples: <code>screen_capture</code>, <code>mouse.click</code>, <code>omnimodal.recorder</code></li> </ul>"},{"location":"env/plugin_specification_guide/#import-path-format","title":"Import Path Format","text":"<ul> <li>Must use format: <code>\"module.path:object_name\"</code></li> <li>Module path should be importable Python module</li> <li>Object name should be the exact name in the module</li> <li>Examples: <code>\"owa.env.myplugin.utils:helper_function\"</code></li> </ul>"},{"location":"env/plugin_specification_guide/#validation","title":"Validation","text":""},{"location":"env/plugin_specification_guide/#using-the-cli-tool","title":"Using the CLI Tool","text":"<p>Validate your plugin specification:</p> <pre><code># Validate Python entry point\nowl env validate owa.env.myplugin:plugin_spec\n\n# Validate YAML file  \nowl env validate ./plugin.yaml\n\n# Validate with verbose output\nowl env validate owa.env.myplugin:plugin_spec --verbose\n\n# Skip import validation (faster)\nowl env validate ./plugin.yaml --no-check-imports\n</code></pre>"},{"location":"env/plugin_specification_guide/#common-validation-errors","title":"Common Validation Errors","text":"<ol> <li>Invalid namespace: Contains invalid characters</li> <li>Invalid component names: Contains invalid characters  </li> <li>Missing colon in import path: Must use <code>module:object</code> format</li> <li>Module not found: Import path points to non-existent module</li> <li>Object not found: Object doesn't exist in specified module</li> <li>Wrong object type: Object is not a PluginSpec instance (for entry points)</li> </ol>"},{"location":"env/plugin_specification_guide/#best-practices","title":"Best Practices","text":""},{"location":"env/plugin_specification_guide/#1-choose-the-right-format","title":"1. Choose the Right Format","text":"<ul> <li>Python format: Better for most cases, easier IDE support, type checking</li> <li>YAML format: Good for configuration-driven development, external tools</li> </ul>"},{"location":"env/plugin_specification_guide/#2-organize-components-logically","title":"2. Organize Components Logically","text":"<pre><code>components={\n    \"callables\": {\n        # Group related functions\n        \"math.add\": \"...\",\n        \"math.subtract\": \"...\",\n        \"file.read\": \"...\", \n        \"file.write\": \"...\",\n    }\n}\n</code></pre>"},{"location":"env/plugin_specification_guide/#3-use-descriptive-names","title":"3. Use Descriptive Names","text":"<pre><code># Good\n\"screen.capture\": \"owa.env.myplugin.screen:capture_screen\"\n\"mouse.click\": \"owa.env.myplugin.input:click_mouse\"\n\n# Avoid\n\"sc\": \"owa.env.myplugin.screen:capture_screen\"\n\"click\": \"owa.env.myplugin.input:click_mouse\"\n</code></pre>"},{"location":"env/plugin_specification_guide/#4-keep-import-paths-consistent","title":"4. Keep Import Paths Consistent","text":"<pre><code># Good - consistent module organization\n\"math.add\": \"owa.env.myplugin.math:add_numbers\"\n\"math.subtract\": \"owa.env.myplugin.math:subtract_numbers\"\n\n# Avoid - scattered across modules\n\"math.add\": \"owa.env.myplugin.utils:add_numbers\"  \n\"math.subtract\": \"owa.env.myplugin.helpers:subtract_numbers\"\n</code></pre>"},{"location":"env/plugin_specification_guide/#5-version-your-plugin-properly","title":"5. Version Your Plugin Properly","text":"<ul> <li>Follow semantic versioning: <code>MAJOR.MINOR.PATCH</code></li> <li>Update version when making changes</li> <li>Document breaking changes in major versions</li> </ul>"},{"location":"env/plugin_specification_guide/#quick-reference","title":"Quick Reference","text":""},{"location":"env/plugin_specification_guide/#validation-commands","title":"Validation Commands","text":"<pre><code># Validate Python entry point\nowl env validate owa.env.myplugin:plugin_spec\n\n# Validate YAML file\nowl env validate ./plugin.yaml\n\n# Validate with verbose output\nowl env validate ./plugin.yaml --verbose\n\n# Skip import validation (faster)\nowl env validate ./plugin.yaml --no-check-imports\n</code></pre>"},{"location":"env/plugin_specification_guide/#example-files","title":"Example Files","text":"<ul> <li>Complete YAML Example - Comprehensive YAML specification example</li> </ul>"},{"location":"env/plugin_specification_guide/#next-steps","title":"Next Steps","text":"<ul> <li>See Custom Plugins Guide for complete plugin development workflow</li> <li>Check YAML Plugin Guide for YAML-specific details</li> <li>Use <code>owl env validate</code> to test your specifications</li> <li>Explore CLI Tools Guide for development tools</li> </ul>"},{"location":"env/yaml_plugin_guide/","title":"YAML Plugin Specification Guide","text":"<p>This guide focuses specifically on creating and managing plugin specifications using YAML format for Open World Agents (OWA).</p>"},{"location":"env/yaml_plugin_guide/#why-use-yaml-format","title":"Why Use YAML Format?","text":"<p>YAML format is ideal when you want to: - Separate configuration from code - Enable non-programmers to modify plugin definitions - Use external tools to generate or modify plugin specifications - Version control plugin configurations separately from implementation - Support dynamic plugin configuration</p>"},{"location":"env/yaml_plugin_guide/#basic-yaml-structure","title":"Basic YAML Structure","text":""},{"location":"env/yaml_plugin_guide/#minimal-example","title":"Minimal Example","text":"<pre><code>namespace: simple_plugin\nversion: \"1.0.0\"\ndescription: \"A simple example plugin\"\ncomponents:\n  callables:\n    hello: \"owa.env.simple_plugin:say_hello\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#complete-example","title":"Complete Example","text":"<pre><code>namespace: advanced_plugin\nversion: \"2.1.0\"\ndescription: \"Advanced plugin with multiple component types\"\nauthor: \"Plugin Developer\"\ncomponents:\n  callables:\n    # Math operations\n    add: \"owa.env.advanced_plugin.math:add_numbers\"\n    multiply: \"owa.env.advanced_plugin.math:multiply_numbers\"\n\n    # File operations\n    file.read: \"owa.env.advanced_plugin.files:read_file\"\n    file.write: \"owa.env.advanced_plugin.files:write_file\"\n    file.exists: \"owa.env.advanced_plugin.files:file_exists\"\n\n    # System utilities\n    system.info: \"owa.env.advanced_plugin.system:get_system_info\"\n    process.list: \"owa.env.advanced_plugin.system:list_processes\"\n\n  listeners:\n    # Event monitoring\n    file.watcher: \"owa.env.advanced_plugin.monitoring:FileWatcher\"\n    keyboard.events: \"owa.env.advanced_plugin.input:KeyboardListener\"\n    network.monitor: \"owa.env.advanced_plugin.network:NetworkMonitor\"\n\n  runnables:\n    # Background services\n    log.processor: \"owa.env.advanced_plugin.services:LogProcessor\"\n    data.collector: \"owa.env.advanced_plugin.services:DataCollector\"\n    health.monitor: \"owa.env.advanced_plugin.services:HealthMonitor\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#field-reference","title":"Field Reference","text":""},{"location":"env/yaml_plugin_guide/#required-fields","title":"Required Fields","text":""},{"location":"env/yaml_plugin_guide/#namespace","title":"namespace","text":"<ul> <li>Type: String</li> <li>Rules: Letters, numbers, underscores, hyphens only</li> <li>Purpose: Unique identifier for your plugin</li> <li>Examples: <code>desktop</code>, <code>gst</code>, <code>my_company_tools</code></li> </ul> <pre><code>namespace: my_awesome_plugin\n</code></pre>"},{"location":"env/yaml_plugin_guide/#version","title":"version","text":"<ul> <li>Type: String (quoted recommended)</li> <li>Rules: Follow semantic versioning</li> <li>Purpose: Plugin version tracking</li> <li>Examples: <code>\"1.0.0\"</code>, <code>\"2.1.3\"</code>, <code>\"0.1.0-beta\"</code></li> </ul> <pre><code>version: \"1.2.3\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#description","title":"description","text":"<ul> <li>Type: String</li> <li>Purpose: Brief description of plugin functionality</li> <li>Best Practice: Keep under 100 characters</li> </ul> <pre><code>description: \"Desktop automation tools for mouse, keyboard, and window management\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#components","title":"components","text":"<ul> <li>Type: Dictionary</li> <li>Purpose: Defines all plugin components</li> <li>Required: At least one component type</li> </ul> <pre><code>components:\n  callables: {}    # At least one of these\n  listeners: {}    # must be present\n  runnables: {}    # (can be empty)\n</code></pre>"},{"location":"env/yaml_plugin_guide/#optional-fields","title":"Optional Fields","text":""},{"location":"env/yaml_plugin_guide/#author","title":"author","text":"<ul> <li>Type: String</li> <li>Purpose: Plugin author information</li> </ul> <pre><code>author: \"John Doe &lt;john@example.com&gt;\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#component-types","title":"Component Types","text":""},{"location":"env/yaml_plugin_guide/#callables","title":"Callables","text":"<p>Functions that users call directly to perform actions or get information.</p> <pre><code>components:\n  callables:\n    # Simple function\n    hello: \"owa.env.myplugin:say_hello\"\n\n    # Grouped functions using dots\n    math.add: \"owa.env.myplugin.math:add_numbers\"\n    math.subtract: \"owa.env.myplugin.math:subtract_numbers\"\n\n    # Complex nested grouping\n    file.text.read: \"owa.env.myplugin.files:read_text_file\"\n    file.binary.read: \"owa.env.myplugin.files:read_binary_file\"\n\n    # System operations\n    system.memory.usage: \"owa.env.myplugin.system:get_memory_usage\"\n    system.cpu.usage: \"owa.env.myplugin.system:get_cpu_usage\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#listeners","title":"Listeners","text":"<p>Event-driven components that respond to system events with user-provided callbacks.</p> <pre><code>components:\n  listeners:\n    # Input monitoring\n    keyboard: \"owa.env.myplugin.input:KeyboardListener\"\n    mouse: \"owa.env.myplugin.input:MouseListener\"\n\n    # File system monitoring\n    file.changes: \"owa.env.myplugin.fs:FileChangeListener\"\n    directory.watcher: \"owa.env.myplugin.fs:DirectoryWatcher\"\n\n    # Network monitoring\n    network.traffic: \"owa.env.myplugin.network:TrafficListener\"\n    connection.monitor: \"owa.env.myplugin.network:ConnectionMonitor\"\n\n    # System events\n    process.monitor: \"owa.env.myplugin.system:ProcessMonitor\"\n    window.events: \"owa.env.myplugin.ui:WindowEventListener\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#runnables","title":"Runnables","text":"<p>Background processes that can be started, stopped, and managed.</p> <pre><code>components:\n  runnables:\n    # Data processing\n    log.processor: \"owa.env.myplugin.processing:LogProcessor\"\n    data.analyzer: \"owa.env.myplugin.processing:DataAnalyzer\"\n\n    # Monitoring services\n    health.checker: \"owa.env.myplugin.monitoring:HealthChecker\"\n    performance.monitor: \"owa.env.myplugin.monitoring:PerformanceMonitor\"\n\n    # Background tasks\n    backup.service: \"owa.env.myplugin.services:BackupService\"\n    cleanup.task: \"owa.env.myplugin.services:CleanupTask\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#import-path-format","title":"Import Path Format","text":"<p>All component values must follow the format: <code>\"module.path:object_name\"</code></p>"},{"location":"env/yaml_plugin_guide/#valid-examples","title":"Valid Examples","text":"<pre><code>components:\n  callables:\n    # Standard format\n    function1: \"owa.env.myplugin.module:function_name\"\n\n    # Deep module path\n    function2: \"owa.env.myplugin.subpackage.module:function_name\"\n\n    # Class reference\n    processor: \"owa.env.myplugin.processing:DataProcessor\"\n\n    # Function in __init__.py\n    helper: \"owa.env.myplugin:helper_function\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#invalid-examples","title":"Invalid Examples","text":"<pre><code>components:\n  callables:\n    # Missing colon\n    bad1: \"owa.env.myplugin.module.function_name\"\n\n    # Wrong separator\n    bad2: \"owa.env.myplugin.module::function_name\"\n\n    # No module path\n    bad3: \"function_name\"\n\n    # Multiple colons\n    bad4: \"owa.env.myplugin:module:function\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#loading-yaml-in-python","title":"Loading YAML in Python","text":""},{"location":"env/yaml_plugin_guide/#method-1-direct-loading","title":"Method 1: Direct Loading","text":"<pre><code>from owa.core.plugin_spec import PluginSpec\nfrom pathlib import Path\n\n# Load from YAML file\nplugin_spec = PluginSpec.from_yaml(\"plugin.yaml\")\n\n# Or with Path object\nplugin_spec = PluginSpec.from_yaml(Path(__file__).parent / \"plugin.yaml\")\n</code></pre>"},{"location":"env/yaml_plugin_guide/#method-2-entry-point-with-yaml","title":"Method 2: Entry Point with YAML","text":"<pre><code># In your __init__.py\nfrom owa.core.plugin_spec import PluginSpec\nfrom pathlib import Path\n\n# Load the YAML specification\nplugin_spec = PluginSpec.from_yaml(Path(__file__).parent / \"plugin.yaml\")\n</code></pre> <p>Then in <code>pyproject.toml</code>: <pre><code>[project.entry-points.\"owa.env.plugins\"]\nmyplugin = \"owa.env.myplugin:plugin_spec\"\n</code></pre></p>"},{"location":"env/yaml_plugin_guide/#real-world-examples","title":"Real-World Examples","text":""},{"location":"env/yaml_plugin_guide/#example-1-development-tools-plugin","title":"Example 1: Development Tools Plugin","text":"<pre><code>namespace: devtools\nversion: \"1.0.0\"\ndescription: \"Development utilities and automation tools\"\nauthor: \"DevTeam\"\ncomponents:\n  callables:\n    # Git operations\n    git.status: \"owa.env.devtools.git:get_status\"\n    git.commit: \"owa.env.devtools.git:create_commit\"\n    git.push: \"owa.env.devtools.git:push_changes\"\n\n    # Code analysis\n    code.lint: \"owa.env.devtools.analysis:lint_code\"\n    code.format: \"owa.env.devtools.analysis:format_code\"\n    code.test: \"owa.env.devtools.analysis:run_tests\"\n\n    # Build operations\n    build.compile: \"owa.env.devtools.build:compile_project\"\n    build.package: \"owa.env.devtools.build:package_project\"\n\n  listeners:\n    # File monitoring\n    file.changes: \"owa.env.devtools.monitoring:FileChangeListener\"\n    test.runner: \"owa.env.devtools.testing:TestRunnerListener\"\n\n  runnables:\n    # Background services\n    auto.formatter: \"owa.env.devtools.services:AutoFormatter\"\n    continuous.tester: \"owa.env.devtools.services:ContinuousTester\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#example-2-system-monitoring-plugin","title":"Example 2: System Monitoring Plugin","text":"<pre><code>namespace: sysmon\nversion: \"2.0.1\"\ndescription: \"Comprehensive system monitoring and alerting\"\nauthor: \"SysAdmin Team &lt;sysadmin@company.com&gt;\"\ncomponents:\n  callables:\n    # Resource monitoring\n    cpu.usage: \"owa.env.sysmon.resources:get_cpu_usage\"\n    memory.usage: \"owa.env.sysmon.resources:get_memory_usage\"\n    disk.usage: \"owa.env.sysmon.resources:get_disk_usage\"\n    network.stats: \"owa.env.sysmon.resources:get_network_stats\"\n\n    # Process management\n    process.list: \"owa.env.sysmon.processes:list_processes\"\n    process.kill: \"owa.env.sysmon.processes:kill_process\"\n    process.info: \"owa.env.sysmon.processes:get_process_info\"\n\n    # System information\n    system.info: \"owa.env.sysmon.system:get_system_info\"\n    uptime: \"owa.env.sysmon.system:get_uptime\"\n\n  listeners:\n    # Resource monitoring\n    cpu.monitor: \"owa.env.sysmon.monitoring:CpuMonitor\"\n    memory.monitor: \"owa.env.sysmon.monitoring:MemoryMonitor\"\n    disk.monitor: \"owa.env.sysmon.monitoring:DiskMonitor\"\n\n    # Process monitoring\n    process.monitor: \"owa.env.sysmon.monitoring:ProcessMonitor\"\n    service.monitor: \"owa.env.sysmon.monitoring:ServiceMonitor\"\n\n  runnables:\n    # Alert services\n    alert.manager: \"owa.env.sysmon.alerts:AlertManager\"\n    log.collector: \"owa.env.sysmon.logging:LogCollector\"\n    metric.collector: \"owa.env.sysmon.metrics:MetricCollector\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#validation-and-testing","title":"Validation and Testing","text":""},{"location":"env/yaml_plugin_guide/#using-the-cli-tool","title":"Using the CLI Tool","text":"<pre><code># Validate YAML file\nowl env validate plugin.yaml\n\n# Validate with detailed output\nowl env validate plugin.yaml --verbose\n\n# Skip import validation for faster checking\nowl env validate plugin.yaml --no-check-imports\n\n# Validate and show component details\nowl env validate plugin.yaml --check-imports\n</code></pre>"},{"location":"env/yaml_plugin_guide/#common-yaml-errors","title":"Common YAML Errors","text":"<ol> <li> <p>Syntax Errors <pre><code># Wrong: Missing quotes around version\nversion: 1.0.0\n\n# Correct: Version should be quoted\nversion: \"1.0.0\"\n</code></pre></p> </li> <li> <p>Indentation Errors <pre><code># Wrong: Inconsistent indentation\ncomponents:\n  callables:\n  hello: \"module:function\"\n\n# Correct: Consistent indentation\ncomponents:\n  callables:\n    hello: \"module:function\"\n</code></pre></p> </li> <li> <p>Invalid Import Paths <pre><code># Wrong: Missing colon\ncomponents:\n  callables:\n    hello: \"owa.env.myplugin.say_hello\"\n\n# Correct: Include colon separator\ncomponents:\n  callables:\n    hello: \"owa.env.myplugin:say_hello\"\n</code></pre></p> </li> </ol>"},{"location":"env/yaml_plugin_guide/#best-practices","title":"Best Practices","text":""},{"location":"env/yaml_plugin_guide/#1-file-organization","title":"1. File Organization","text":"<pre><code>owa-env-myplugin/\n\u251c\u2500\u2500 owa/env/myplugin/\n\u2502   \u251c\u2500\u2500 __init__.py          # Load plugin_spec from YAML\n\u2502   \u251c\u2500\u2500 plugin.yaml          # Plugin specification\n\u2502   \u251c\u2500\u2500 core.py             # Core functionality\n\u2502   \u2514\u2500\u2500 utils.py            # Utility functions\n\u251c\u2500\u2500 pyproject.toml          # Entry point declaration\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"env/yaml_plugin_guide/#2-yaml-structure","title":"2. YAML Structure","text":"<pre><code># Use comments to organize sections\nnamespace: myplugin\nversion: \"1.0.0\"\ndescription: \"Plugin description\"\nauthor: \"Author Name\"\n\ncomponents:\n  # Core functionality\n  callables:\n    # Group related functions\n    math.add: \"owa.env.myplugin.math:add\"\n    math.subtract: \"owa.env.myplugin.math:subtract\"\n\n    # File operations\n    file.read: \"owa.env.myplugin.files:read\"\n    file.write: \"owa.env.myplugin.files:write\"\n\n  # Event handling\n  listeners:\n    events: \"owa.env.myplugin.events:EventListener\"\n\n  # Background services  \n  runnables:\n    processor: \"owa.env.myplugin.services:Processor\"\n</code></pre>"},{"location":"env/yaml_plugin_guide/#3-version-control","title":"3. Version Control","text":"<ul> <li>Keep YAML files in version control</li> <li>Use meaningful commit messages for specification changes</li> <li>Tag releases with version numbers matching the YAML version</li> </ul>"},{"location":"env/yaml_plugin_guide/#4-documentation","title":"4. Documentation","text":"<ul> <li>Document each component in comments</li> <li>Maintain a changelog for specification changes</li> <li>Include examples in your README</li> </ul>"},{"location":"env/yaml_plugin_guide/#converting-between-formats","title":"Converting Between Formats","text":""},{"location":"env/yaml_plugin_guide/#python-to-yaml","title":"Python to YAML","text":"<pre><code>from owa.core.plugin_spec import PluginSpec\n\n# Existing Python specification\nplugin_spec = PluginSpec(\n    namespace=\"myplugin\",\n    version=\"1.0.0\",\n    description=\"My plugin\",\n    components={\"callables\": {\"hello\": \"owa.env.myplugin:say_hello\"}}\n)\n\n# Save to YAML\nplugin_spec.to_yaml(\"plugin.yaml\")\n</code></pre>"},{"location":"env/yaml_plugin_guide/#yaml-to-python","title":"YAML to Python","text":"<pre><code>from owa.core.plugin_spec import PluginSpec\n\n# Load from YAML\nplugin_spec = PluginSpec.from_yaml(\"plugin.yaml\")\n\n# Now you can use it as a Python object\nprint(plugin_spec.namespace)\nprint(plugin_spec.components)\n</code></pre>"},{"location":"env/yaml_plugin_guide/#example-files","title":"Example Files","text":"<ul> <li>Complete YAML Example - Comprehensive example demonstrating all features</li> </ul>"},{"location":"env/yaml_plugin_guide/#next-steps","title":"Next Steps","text":"<ul> <li>See Plugin Specification Guide for Python format details</li> <li>Check Custom Plugins Guide for complete development workflow</li> <li>Use <code>owl env validate</code> to test your YAML specifications</li> <li>Explore CLI Tools for development assistance</li> </ul>"},{"location":"env/plugins/desktop/","title":"Desktop Environment","text":"<p>The Desktop Environment module (owa.env.desktop) extends Open World Agents by providing functionalities that interact with the operating system's desktop. It focuses on user interface interactions and input simulation.</p>"},{"location":"env/plugins/desktop/#features","title":"Features","text":"<ul> <li>Screen Capture: Capture the current screen using CALLABLES[\"desktop/screen.capture\"].</li> <li>Window Management: Retrieve information about active windows and search for windows by title using functions like CALLABLES[\"desktop/window.get_active_window\"] and CALLABLES[\"desktop/window.get_window_by_title\"].</li> <li>Input Simulation: Simulate mouse actions (e.g., CALLABLES[\"desktop/mouse.click\"]) and set up keyboard listeners to handle input events.</li> </ul>"},{"location":"env/plugins/desktop/#usage","title":"Usage","text":"<p>The Desktop Environment module is automatically available when you install <code>owa-env-desktop</code>. No manual activation needed!</p> <pre><code># Components automatically available after installation\nfrom owa.core.registry import CALLABLES, LISTENERS\n</code></pre> <p>You can access desktop functionalities via the global registries using the unified <code>namespace/name</code> pattern:</p> <pre><code>print(CALLABLES[\"desktop/screen.capture\"]().shape)  # Capture and display screen dimensions\nprint(CALLABLES[\"desktop/window.get_active_window\"]())  # Retrieve the active window\n</code></pre> <p>This module is essential for applications that require integration with desktop UI elements and user input simulation.</p>"},{"location":"env/plugins/desktop/#implementation-details","title":"Implementation Details","text":"<p>To see detailed implementation, skim over owa-env-desktop. API documentation is currently being developed.</p>"},{"location":"env/plugins/desktop/#available-functions","title":"Available Functions","text":""},{"location":"env/plugins/desktop/#mouse-functions","title":"Mouse Functions","text":"<ul> <li><code>desktop/mouse.click</code> - Simulate a mouse click</li> <li><code>desktop/mouse.move</code> - Move the mouse cursor to specified coordinates</li> <li><code>desktop/mouse.position</code> - Get the current mouse position</li> <li><code>desktop/mouse.press</code> - Simulate pressing a mouse button</li> <li><code>desktop/mouse.release</code> - Simulate releasing a mouse button</li> <li><code>desktop/mouse.scroll</code> - Simulate mouse wheel scrolling</li> </ul>"},{"location":"env/plugins/desktop/#keyboard-functions","title":"Keyboard Functions","text":"<ul> <li><code>desktop/keyboard.press</code> - Simulate pressing a keyboard key</li> <li><code>desktop/keyboard.release</code> - Simulate releasing a keyboard key</li> <li><code>desktop/keyboard.type</code> - Type a string of characters</li> <li><code>desktop/keyboard.press_repeat</code> - Simulate repeat-press when pressing key long time</li> </ul>"},{"location":"env/plugins/desktop/#screen-functions","title":"Screen Functions","text":"<ul> <li><code>desktop/screen.capture</code> - Capture the current screen (Note: This module utilizes <code>bettercam</code>. For better performance and extensibility, use <code>owa-env-gst</code>'s functions instead)</li> </ul>"},{"location":"env/plugins/desktop/#window-functions","title":"Window Functions","text":"<ul> <li><code>desktop/window.get_active_window</code> - Get the currently active window</li> <li><code>desktop/window.get_window_by_title</code> - Find a window by its title</li> <li><code>desktop/window.when_active</code> - Run a function when a specific window becomes active</li> </ul>"},{"location":"env/plugins/desktop/#available-listeners","title":"Available Listeners","text":"<ul> <li><code>desktop/keyboard</code> - Listen for keyboard events</li> <li><code>desktop/mouse</code> - Listen for mouse events</li> </ul>"},{"location":"env/plugins/desktop/#misc","title":"Misc","text":""},{"location":"env/plugins/desktop/#library-selection-rationale","title":"Library Selection Rationale","text":"<p>This module utilizes <code>pynput</code> for input simulation after evaluating several alternatives:</p> <ul> <li> <p>Why not PyAutoGUI? Though widely used, PyAutoGUI uses deprecated Windows APIs (<code>keybd_event/mouse_event</code>) rather than the modern <code>SendInput</code> method. These older APIs fail in DirectX applications and games. Additionally, PyAutoGUI has seen limited maintenance (last significant update was over 2 years ago).</p> </li> <li> <p>Alternative Solutions: Libraries like pydirectinput and pydirectinput_rgx address the Windows API issue by using <code>SendInput</code>, but they lack input capturing capabilities which are essential for our use case.</p> </li> <li> <p>Other Options: We also evaluated keyboard and mouse libraries but found them inadequately maintained with several unresolved bugs that could impact reliability.</p> </li> </ul>"},{"location":"env/plugins/desktop/#input-auto-repeat-functionality","title":"Input Auto-Repeat Functionality","text":"<p>For simulating key auto-repeat behavior, use the dedicated function:</p> <pre><code>CALLABLES[\"desktop/keyboard.press_repeat\"](key, press_time: float, initial_delay: float = 0.5, repeat_delay: float = 0.033)\n</code></pre> <p>This function handles the complexity of simulating hardware auto-repeat, with configurable initial delay before repeating starts and the interval between repeated keypresses.</p>"},{"location":"env/plugins/desktop/#auto-generated-documentation","title":"Auto-generated documentation","text":""},{"location":"env/plugins/desktop/#desktop","title":"desktop plugin 0.3.9.post1","text":"<p>Desktop environment plugin with mouse, keyboard, and window control</p> <p>Author: OWA Development Team</p>"},{"location":"env/plugins/desktop/#desktop-callables","title":"Callables","text":"<p>Usage: To use callable components, import <code>CALLABLES</code> from <code>owa.core</code> and access them by their component name:</p> <pre><code>from owa.core import CALLABLES\n\n# Access a callable component (replace 'component_name' with actual name)\ncallable_func = CALLABLES[\"desktop/component_name\"]\nresult = callable_func(your_arguments)</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.screen.callables.capture_screen","title":"screen.capture","text":"<pre><code>capture_screen() -&gt; ndarray\n</code></pre> <p>Capture the current screen as a numpy array.</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>numpy.ndarray: Screen capture as BGR image array with shape (height, width, 3).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; screen = capture_screen()\n&gt;&gt;&gt; print(f\"Screen dimensions: {screen.shape}\")  # e.g., (1080, 1920, 3)\n&gt;&gt;&gt; # Save to file: cv2.imwrite('screenshot.png', screen)\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/screen/callables.py</code> <pre><code>def capture_screen() -&gt; np.ndarray:\n    \"\"\"\n    Capture the current screen as a numpy array.\n\n    Returns:\n        numpy.ndarray: Screen capture as BGR image array with shape (height, width, 3).\n\n    Examples:\n        &gt;&gt;&gt; screen = capture_screen()\n        &gt;&gt;&gt; print(f\"Screen dimensions: {screen.shape}\")  # e.g., (1080, 1920, 3)\n        &gt;&gt;&gt; # Save to file: cv2.imwrite('screenshot.png', screen)\n    \"\"\"\n    import bettercam\n\n    camera = bettercam.create()\n    return camera.grab()\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.click","title":"mouse.click","text":"<pre><code>click(button: str | Button, count: int) -&gt; None\n</code></pre> <p>Simulate a mouse click.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>str | Button</code> <p>Mouse button to click. Can be \"left\", \"middle\", \"right\" or a Button enum.</p> required <code>count</code> <code>int</code> <p>Number of clicks to perform.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; click(\"left\", 1)  # Single left click\n&gt;&gt;&gt; click(\"right\", 2)  # Double right click\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def click(button: str | Button, count: int) -&gt; None:\n    \"\"\"\n    Simulate a mouse click.\n\n    Args:\n        button: Mouse button to click. Can be \"left\", \"middle\", \"right\" or a Button enum.\n        count: Number of clicks to perform.\n\n    Examples:\n        &gt;&gt;&gt; click(\"left\", 1)  # Single left click\n        &gt;&gt;&gt; click(\"right\", 2)  # Double right click\n    \"\"\"\n    if button in (\"left\", \"middle\", \"right\"):\n        button = getattr(Button, button)\n    return mouse_controller.click(button, count)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.mouse_move","title":"mouse.move","text":"<pre><code>mouse_move(x: int, y: int) -&gt; None\n</code></pre> <p>Move the mouse cursor to specified coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate to move to.</p> required <code>y</code> <code>int</code> <p>Y coordinate to move to.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; mouse_move(100, 200)  # Move mouse to position (100, 200)\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def mouse_move(x: int, y: int) -&gt; None:\n    \"\"\"\n    Move the mouse cursor to specified coordinates.\n\n    Args:\n        x: X coordinate to move to.\n        y: Y coordinate to move to.\n\n    Examples:\n        &gt;&gt;&gt; mouse_move(100, 200)  # Move mouse to position (100, 200)\n    \"\"\"\n    return mouse_controller.move(x, y)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.mouse_position","title":"mouse.position","text":"<pre><code>mouse_position() -&gt; tuple[int, int]\n</code></pre> <p>Get the current mouse cursor position.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Tuple of (x, y) coordinates of the mouse cursor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; x, y = mouse_position()\n&gt;&gt;&gt; print(f\"Mouse is at ({x}, {y})\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def mouse_position() -&gt; tuple[int, int]:\n    \"\"\"\n    Get the current mouse cursor position.\n\n    Returns:\n        Tuple of (x, y) coordinates of the mouse cursor.\n\n    Examples:\n        &gt;&gt;&gt; x, y = mouse_position()\n        &gt;&gt;&gt; print(f\"Mouse is at ({x}, {y})\")\n    \"\"\"\n    return mouse_controller.position\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.mouse_press","title":"mouse.press","text":"<pre><code>mouse_press(button: str | Button) -&gt; None\n</code></pre> <p>Press and hold a mouse button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>str | Button</code> <p>Mouse button to press. Can be \"left\", \"middle\", \"right\" or a Button enum.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; mouse_press(\"left\")  # Press and hold left mouse button\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def mouse_press(button: str | Button) -&gt; None:\n    \"\"\"\n    Press and hold a mouse button.\n\n    Args:\n        button: Mouse button to press. Can be \"left\", \"middle\", \"right\" or a Button enum.\n\n    Examples:\n        &gt;&gt;&gt; mouse_press(\"left\")  # Press and hold left mouse button\n    \"\"\"\n    return mouse_controller.press(button)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.mouse_release","title":"mouse.release","text":"<pre><code>mouse_release(button: str | Button) -&gt; None\n</code></pre> <p>Release a previously pressed mouse button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>str | Button</code> <p>Mouse button to release. Can be \"left\", \"middle\", \"right\" or a Button enum.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; mouse_release(\"left\")  # Release left mouse button\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def mouse_release(button: str | Button) -&gt; None:\n    \"\"\"\n    Release a previously pressed mouse button.\n\n    Args:\n        button: Mouse button to release. Can be \"left\", \"middle\", \"right\" or a Button enum.\n\n    Examples:\n        &gt;&gt;&gt; mouse_release(\"left\")  # Release left mouse button\n    \"\"\"\n    return mouse_controller.release(button)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.mouse_scroll","title":"mouse.scroll","text":"<pre><code>mouse_scroll(x: int, y: int, dx: int, dy: int) -&gt; None\n</code></pre> <p>Simulate mouse wheel scrolling.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate where scrolling occurs.</p> required <code>y</code> <code>int</code> <p>Y coordinate where scrolling occurs.</p> required <code>dx</code> <code>int</code> <p>Horizontal scroll amount.</p> required <code>dy</code> <code>int</code> <p>Vertical scroll amount.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; mouse_scroll(100, 100, 0, 3)  # Scroll up 3 units at position (100, 100)\n&gt;&gt;&gt; mouse_scroll(100, 100, 0, -3)  # Scroll down 3 units\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def mouse_scroll(x: int, y: int, dx: int, dy: int) -&gt; None:\n    \"\"\"\n    Simulate mouse wheel scrolling.\n\n    Args:\n        x: X coordinate where scrolling occurs.\n        y: Y coordinate where scrolling occurs.\n        dx: Horizontal scroll amount.\n        dy: Vertical scroll amount.\n\n    Examples:\n        &gt;&gt;&gt; mouse_scroll(100, 100, 0, 3)  # Scroll up 3 units at position (100, 100)\n        &gt;&gt;&gt; mouse_scroll(100, 100, 0, -3)  # Scroll down 3 units\n    \"\"\"\n    return mouse_controller.scroll(x, y, dx, dy)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.get_mouse_state","title":"mouse.get_state","text":"<pre><code>get_mouse_state() -&gt; MouseState\n</code></pre> <p>Get the current mouse state including position and pressed buttons.</p> <p>Returns:</p> Type Description <code>MouseState</code> <p>MouseState object containing current mouse position and pressed buttons.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; state = get_mouse_state()\n&gt;&gt;&gt; print(f\"Mouse at ({state.x}, {state.y}), buttons: {state.buttons}\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def get_mouse_state() -&gt; MouseState:\n    \"\"\"\n    Get the current mouse state including position and pressed buttons.\n\n    Returns:\n        MouseState object containing current mouse position and pressed buttons.\n\n    Examples:\n        &gt;&gt;&gt; state = get_mouse_state()\n        &gt;&gt;&gt; print(f\"Mouse at ({state.x}, {state.y}), buttons: {state.buttons}\")\n    \"\"\"\n    position = mouse_controller.position\n    if position is None:\n        position = (-1, -1)  # Fallback if position cannot be retrieved\n    mouse_buttons = set()\n    buttons = get_vk_state()\n    for button, vk in {\"left\": 1, \"right\": 2, \"middle\": 4}.items():\n        if vk in buttons:\n            mouse_buttons.add(button)\n    return MouseState(x=position[0], y=position[1], buttons=mouse_buttons)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.press","title":"keyboard.press","text":"<pre><code>press(key: str | int) -&gt; None\n</code></pre> <p>Press and hold a keyboard key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | int</code> <p>Key to press. Can be a string (e.g., 'a', 'enter') or virtual key code.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; press('a')  # Press and hold the 'a' key\n&gt;&gt;&gt; press(65)  # Press and hold the 'a' key using virtual key code\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def press(key: str | int) -&gt; None:\n    \"\"\"\n    Press and hold a keyboard key.\n\n    Args:\n        key: Key to press. Can be a string (e.g., 'a', 'enter') or virtual key code.\n\n    Examples:\n        &gt;&gt;&gt; press('a')  # Press and hold the 'a' key\n        &gt;&gt;&gt; press(65)  # Press and hold the 'a' key using virtual key code\n    \"\"\"\n    key = vk_to_keycode(key) if isinstance(key, int) else key\n    return keyboard_controller.press(key)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.release","title":"keyboard.release","text":"<pre><code>release(key: str | int) -&gt; None\n</code></pre> <p>Release a previously pressed keyboard key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | int</code> <p>Key to release. Can be a string (e.g., 'a', 'enter') or virtual key code.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; release('a')  # Release the 'a' key\n&gt;&gt;&gt; release(65)  # Release the 'a' key using virtual key code\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def release(key: str | int) -&gt; None:\n    \"\"\"\n    Release a previously pressed keyboard key.\n\n    Args:\n        key: Key to release. Can be a string (e.g., 'a', 'enter') or virtual key code.\n\n    Examples:\n        &gt;&gt;&gt; release('a')  # Release the 'a' key\n        &gt;&gt;&gt; release(65)  # Release the 'a' key using virtual key code\n    \"\"\"\n    key = vk_to_keycode(key) if isinstance(key, int) else key\n    return keyboard_controller.release(key)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.keyboard_type","title":"keyboard.type","text":"<pre><code>keyboard_type(text: str) -&gt; None\n</code></pre> <p>Type a string of characters.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text string to type.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; keyboard_type(\"Hello, World!\")  # Types the text\n&gt;&gt;&gt; keyboard_type(\"user@example.com\")  # Types an email address\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def keyboard_type(text: str) -&gt; None:\n    \"\"\"\n    Type a string of characters.\n\n    Args:\n        text: Text string to type.\n\n    Examples:\n        &gt;&gt;&gt; keyboard_type(\"Hello, World!\")  # Types the text\n        &gt;&gt;&gt; keyboard_type(\"user@example.com\")  # Types an email address\n    \"\"\"\n    return keyboard_controller.type(text)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.get_keyboard_state","title":"keyboard.get_state","text":"<pre><code>get_keyboard_state() -&gt; KeyboardState\n</code></pre> <p>Get the current keyboard state including pressed keys.</p> <p>Returns:</p> Type Description <code>KeyboardState</code> <p>KeyboardState object containing currently pressed keys.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; state = get_keyboard_state()\n&gt;&gt;&gt; print(f\"Pressed keys: {state.buttons}\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def get_keyboard_state() -&gt; KeyboardState:\n    \"\"\"\n    Get the current keyboard state including pressed keys.\n\n    Returns:\n        KeyboardState object containing currently pressed keys.\n\n    Examples:\n        &gt;&gt;&gt; state = get_keyboard_state()\n        &gt;&gt;&gt; print(f\"Pressed keys: {state.buttons}\")\n    \"\"\"\n    return KeyboardState(buttons=get_vk_state())\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.press_repeat_key","title":"keyboard.press_repeat","text":"<pre><code>press_repeat_key(\n    key: str | int,\n    press_time: float,\n    initial_delay: float = 0.5,\n    repeat_delay: float = 0.033,\n) -&gt; None\n</code></pre> <p>Simulate the behavior of holding a key down with auto-repeat.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | int</code> <p>Key to press repeatedly. Can be a string or virtual key code.</p> required <code>press_time</code> <code>float</code> <p>Total time to hold the key down in seconds.</p> required <code>initial_delay</code> <code>float</code> <p>Initial delay before auto-repeat starts (default: 0.5s).</p> <code>0.5</code> <code>repeat_delay</code> <code>float</code> <p>Delay between repeated key presses (default: 0.033s).</p> <code>0.033</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; press_repeat_key('a', 2.0)  # Hold 'a' key for 2 seconds with auto-repeat\n&gt;&gt;&gt; press_repeat_key('space', 1.5, 0.3, 0.05)  # Custom timing for space key\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def press_repeat_key(\n    key: str | int, press_time: float, initial_delay: float = 0.5, repeat_delay: float = 0.033\n) -&gt; None:\n    \"\"\"\n    Simulate the behavior of holding a key down with auto-repeat.\n\n    Args:\n        key: Key to press repeatedly. Can be a string or virtual key code.\n        press_time: Total time to hold the key down in seconds.\n        initial_delay: Initial delay before auto-repeat starts (default: 0.5s).\n        repeat_delay: Delay between repeated key presses (default: 0.033s).\n\n    Examples:\n        &gt;&gt;&gt; press_repeat_key('a', 2.0)  # Hold 'a' key for 2 seconds with auto-repeat\n        &gt;&gt;&gt; press_repeat_key('space', 1.5, 0.3, 0.05)  # Custom timing for space key\n    \"\"\"\n    key = vk_to_keycode(key) if isinstance(key, int) else key\n    repeat_time = max(0, (press_time - initial_delay) // repeat_delay - 1)\n\n    keyboard_controller.press(key)\n    time.sleep(initial_delay)\n    for _ in range(int(repeat_time)):\n        keyboard_controller.press(key)\n        time.sleep(repeat_delay)\n    keyboard_controller.release(key)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.callables.release_all_keys","title":"keyboard.release_all_keys","text":"<pre><code>release_all_keys() -&gt; None\n</code></pre> <p>Release all currently pressed keys on the keyboard.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; release_all_keys()  # Release all pressed keys\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/keyboard_mouse/callables.py</code> <pre><code>def release_all_keys() -&gt; None:\n    \"\"\"\n    Release all currently pressed keys on the keyboard.\n\n    Examples:\n        &gt;&gt;&gt; release_all_keys()  # Release all pressed keys\n    \"\"\"\n    keyboard_state: KeyboardState = get_keyboard_state()\n    for key in keyboard_state.buttons:\n        release(key)\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.callables.get_active_window","title":"window.get_active_window","text":"<pre><code>get_active_window() -&gt; WindowInfo | None\n</code></pre> <p>Get information about the currently active window.</p> <p>Returns:</p> Type Description <code>WindowInfo | None</code> <p>WindowInfo object containing title, position, and handle of the active window,</p> <code>WindowInfo | None</code> <p>or None if no active window is found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; window = get_active_window()\n&gt;&gt;&gt; if window:\n...     print(f\"Active window: {window.title}\")\n...     print(f\"Position: {window.rect}\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/window/callables.py</code> <pre><code>def get_active_window() -&gt; WindowInfo | None:\n    \"\"\"\n    Get information about the currently active window.\n\n    Returns:\n        WindowInfo object containing title, position, and handle of the active window,\n        or None if no active window is found.\n\n    Examples:\n        &gt;&gt;&gt; window = get_active_window()\n        &gt;&gt;&gt; if window:\n        ...     print(f\"Active window: {window.title}\")\n        ...     print(f\"Position: {window.rect}\")\n    \"\"\"\n    if _IS_DARWIN:\n        from Quartz import (\n            CGWindowListCopyWindowInfo,\n            kCGNullWindowID,\n            kCGWindowListOptionOnScreenOnly,\n        )\n\n        windows = CGWindowListCopyWindowInfo(kCGWindowListOptionOnScreenOnly, kCGNullWindowID)\n        for window in windows:\n            if window.get(\"kCGWindowLayer\", 0) == 0:  # Frontmost window\n                bounds = window.get(\"kCGWindowBounds\")\n                title = window.get(\"kCGWindowName\", \"\")\n                rect = (\n                    int(bounds[\"X\"]),\n                    int(bounds[\"Y\"]),\n                    int(bounds[\"X\"] + bounds[\"Width\"]),\n                    int(bounds[\"Y\"] + bounds[\"Height\"]),\n                )\n                hWnd = window.get(\"kCGWindowNumber\", 0)\n                return WindowInfo(title=title, rect=rect, hWnd=hWnd)\n        return None\n\n    elif _IS_WINDOWS:\n        import pygetwindow as gw\n\n        active_window = gw.getActiveWindow()\n        if active_window is not None:\n            rect = active_window._getWindowRect()\n            title = active_window.title\n            rect_coords = (rect.left, rect.top, rect.right, rect.bottom)\n            hWnd = active_window._hWnd\n            return WindowInfo(title=title, rect=rect_coords, hWnd=hWnd)\n        return WindowInfo(title=\"\", rect=[0, 0, 0, 0], hWnd=-1)\n    else:\n        raise NotImplementedError(f\"Platform {_PLATFORM} is not supported yet\")\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.callables.get_window_by_title","title":"window.get_window_by_title","text":"<pre><code>get_window_by_title(\n    window_title_substring: str,\n) -&gt; WindowInfo\n</code></pre> <p>Find a window by searching for a substring in its title.</p> <p>Parameters:</p> Name Type Description Default <code>window_title_substring</code> <code>str</code> <p>Substring to search for in window titles.</p> required <p>Returns:</p> Type Description <code>WindowInfo</code> <p>WindowInfo object for the first matching window.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no window with matching title is found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; window = get_window_by_title(\"notepad\")\n&gt;&gt;&gt; print(f\"Found window: {window.title}\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/window/callables.py</code> <pre><code>def get_window_by_title(window_title_substring: str) -&gt; WindowInfo:\n    \"\"\"\n    Find a window by searching for a substring in its title.\n\n    Args:\n        window_title_substring: Substring to search for in window titles.\n\n    Returns:\n        WindowInfo object for the first matching window.\n\n    Raises:\n        ValueError: If no window with matching title is found.\n\n    Examples:\n        &gt;&gt;&gt; window = get_window_by_title(\"notepad\")\n        &gt;&gt;&gt; print(f\"Found window: {window.title}\")\n    \"\"\"\n    if _IS_WINDOWS:\n        import pygetwindow as gw\n\n        windows = gw.getWindowsWithTitle(window_title_substring)\n        if not windows:\n            raise ValueError(f\"No window with title containing '{window_title_substring}' found.\")\n\n        # Temporal workaround to deal with `cmd`'s behavior: it setup own title as the command it running.\n        # e.g. `owl window find abcd` will always find `cmd` window itself running command.\n        if \"Conda\" in windows[0].title:\n            windows.pop(0)\n\n        window = windows[0]  # NOTE: only return the first window matching the title\n        rect = window._getWindowRect()\n        return WindowInfo(\n            title=window.title,\n            rect=(rect.left, rect.top, rect.right, rect.bottom),\n            hWnd=window._hWnd,\n        )\n\n    elif _IS_DARWIN:\n        from Quartz import CGWindowListCopyWindowInfo, kCGNullWindowID, kCGWindowLayer, kCGWindowListOptionOnScreenOnly\n\n        windows = CGWindowListCopyWindowInfo(kCGWindowListOptionOnScreenOnly, kCGNullWindowID)\n        for window in windows:\n            # Skip windows that are not on normal level (like menu bars, etc)\n            if window.get(kCGWindowLayer, 0) != 0:\n                continue\n\n            # Get window name from either kCGWindowName or kCGWindowOwnerName\n            title = window.get(\"kCGWindowName\", \"\")\n            if not title:\n                title = window.get(\"kCGWindowOwnerName\", \"\")\n\n            if title and window_title_substring.lower() in title.lower():\n                bounds = window.get(\"kCGWindowBounds\")\n                if bounds:\n                    return WindowInfo(\n                        title=title,\n                        rect=(\n                            int(bounds[\"X\"]),\n                            int(bounds[\"Y\"]),\n                            int(bounds[\"X\"] + bounds[\"Width\"]),\n                            int(bounds[\"Y\"] + bounds[\"Height\"]),\n                        ),\n                        hWnd=window.get(\"kCGWindowNumber\", 0),\n                    )\n\n        raise ValueError(f\"No window with title containing '{window_title_substring}' found.\")\n    else:\n        # Linux or other OS (not implemented yet)\n        raise NotImplementedError(\"Not implemented for Linux or other OS.\")\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.callables.get_pid_by_title","title":"window.get_pid_by_title","text":"<pre><code>get_pid_by_title(window_title_substring: str) -&gt; int\n</code></pre> <p>Get the process ID (PID) of a window by its title.</p> <p>Parameters:</p> Name Type Description Default <code>window_title_substring</code> <code>str</code> <p>Substring to search for in window titles.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Process ID of the window.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pid = get_pid_by_title(\"notepad\")\n&gt;&gt;&gt; print(f\"Notepad PID: {pid}\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/window/callables.py</code> <pre><code>def get_pid_by_title(window_title_substring: str) -&gt; int:\n    \"\"\"\n    Get the process ID (PID) of a window by its title.\n\n    Args:\n        window_title_substring: Substring to search for in window titles.\n\n    Returns:\n        Process ID of the window.\n\n    Examples:\n        &gt;&gt;&gt; pid = get_pid_by_title(\"notepad\")\n        &gt;&gt;&gt; print(f\"Notepad PID: {pid}\")\n    \"\"\"\n    window = get_window_by_title(window_title_substring)\n    if _IS_WINDOWS:\n        import win32process\n\n        # win32process.GetWindowThreadProcessId returns (tid, pid)\n        _, pid = win32process.GetWindowThreadProcessId(window.hWnd)\n        return pid\n    else:\n        # Implement if needed for other OS\n        raise NotImplementedError(f\"Getting PID by title not implemented for {_PLATFORM}\")\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.callables.when_active","title":"window.when_active","text":"<pre><code>when_active(window_title_substring: str) -&gt; Callable\n</code></pre> <p>Decorator to run a function only when a specific window is active.</p> <p>Parameters:</p> Name Type Description Default <code>window_title_substring</code> <code>str</code> <p>Substring to search for in window titles.</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>Decorator function that conditionally executes the wrapped function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @when_active(\"notepad\")\n... def do_something():\n...     print(\"Notepad is active!\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/window/callables.py</code> <pre><code>def when_active(window_title_substring: str) -&gt; Callable:\n    \"\"\"\n    Decorator to run a function only when a specific window is active.\n\n    Args:\n        window_title_substring: Substring to search for in window titles.\n\n    Returns:\n        Decorator function that conditionally executes the wrapped function.\n\n    Examples:\n        &gt;&gt;&gt; @when_active(\"notepad\")\n        ... def do_something():\n        ...     print(\"Notepad is active!\")\n    \"\"\"\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if is_active(window_title_substring):\n                return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.callables.is_active","title":"window.is_active","text":"<pre><code>is_active(window_title_substring: str) -&gt; bool\n</code></pre> <p>Check if a window with the specified title substring is currently active.</p> <p>Parameters:</p> Name Type Description Default <code>window_title_substring</code> <code>str</code> <p>Substring to search for in window titles.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the window is active, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; if is_active(\"notepad\"):\n...     print(\"Notepad is the active window\")\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/window/callables.py</code> <pre><code>def is_active(window_title_substring: str) -&gt; bool:\n    \"\"\"\n    Check if a window with the specified title substring is currently active.\n\n    Args:\n        window_title_substring: Substring to search for in window titles.\n\n    Returns:\n        True if the window is active, False otherwise.\n\n    Examples:\n        &gt;&gt;&gt; if is_active(\"notepad\"):\n        ...     print(\"Notepad is the active window\")\n    \"\"\"\n    try:\n        window = get_window_by_title(window_title_substring)\n    except ValueError:\n        return False\n    active = get_active_window()\n    return active is not None and active.hWnd == window.hWnd\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.callables.make_active","title":"window.make_active","text":"<pre><code>make_active(window_title_substring: str) -&gt; None\n</code></pre> <p>Bring a window to the foreground and make it active.</p> <p>Parameters:</p> Name Type Description Default <code>window_title_substring</code> <code>str</code> <p>Substring to search for in window titles.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If no window with matching title is found.</p> <code>NotImplementedError</code> <p>If the operation is not supported on the current OS.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; make_active(\"notepad\")  # Brings notepad window to front\n</code></pre> Source code in <code>projects/owa-env-desktop/owa/env/desktop/window/callables.py</code> <pre><code>def make_active(window_title_substring: str) -&gt; None:\n    \"\"\"\n    Bring a window to the foreground and make it active.\n\n    Args:\n        window_title_substring: Substring to search for in window titles.\n\n    Raises:\n        ValueError: If no window with matching title is found.\n        NotImplementedError: If the operation is not supported on the current OS.\n\n    Examples:\n        &gt;&gt;&gt; make_active(\"notepad\")  # Brings notepad window to front\n    \"\"\"\n\n    os_name = platform.system()\n    if os_name == \"Windows\":\n        import pygetwindow as gw\n\n        windows = gw.getWindowsWithTitle(window_title_substring)\n        if not windows:\n            raise ValueError(f\"No window with title containing '{window_title_substring}' found.\")\n\n        # Temporal workaround to deal with `cmd`'s behavior: it setup own title as the command it running.\n        # e.g. `owl window find abcd` will always find `cmd` window itself running command.\n        if \"Conda\" in windows[0].title:\n            windows.pop(0)\n\n        window = windows[0]  # NOTE: only return the first window matching the title\n        window.activate()\n    else:\n        raise NotImplementedError(f\"Activation not implemented for this OS: {os_name}\")\n</code></pre>"},{"location":"env/plugins/desktop/#desktop-listeners","title":"Listeners","text":"<p>Usage: To use listener components, import <code>LISTENERS</code> from <code>owa.core</code> and call the <code>configure()</code> method with a <code>callback</code> function:</p> <pre><code>from owa.core import LISTENERS\n\n# Configure a listener component (replace 'component_name' with actual name)\nlistener = LISTENERS[\"desktop/component_name\"]\nlistener.configure(callback=my_callback, your_other_arguments)\n\n# Use the listener in a context manager\nwith listener.session as active_listener:\n    # The listener is now running and will call my_callback when events occur\n    pass  # Your main code here</code></pre> <p>Note: The <code>callback</code> argument is required. The <code>on_configure()</code> method shown in the documentation is an internal method called by <code>configure()</code>.</p>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.listeners.KeyboardListenerWrapper","title":"keyboard","text":"<p>               Bases: <code>Listener</code></p> <p>Keyboard event listener that captures key press and release events.</p> <p>This listener wraps pynput's KeyboardListener to provide keyboard event monitoring with OWA's listener interface.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def on_key_event(event):\n...     print(f\"Key {event.vk} was {event.event_type}\")\n&gt;&gt;&gt; listener = KeyboardListenerWrapper().configure(callback=on_key_event)\n&gt;&gt;&gt; listener.start()\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.listeners.MouseListenerWrapper","title":"mouse","text":"<p>               Bases: <code>Listener</code></p> <p>Mouse event listener that captures mouse movement, clicks, and scroll events.</p> <p>This listener wraps pynput's MouseListener to provide mouse event monitoring with OWA's listener interface.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def on_mouse_event(event):\n...     print(f\"Mouse {event.event_type} at ({event.x}, {event.y})\")\n&gt;&gt;&gt; listener = MouseListenerWrapper().configure(callback=on_mouse_event)\n&gt;&gt;&gt; listener.start()\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.listeners.KeyboardStateListener","title":"keyboard_state","text":"<p>               Bases: <code>Listener</code></p> <p>Periodically reports the current keyboard state.</p> <p>This listener calls the callback function every second with the current keyboard state, including which keys are currently pressed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def on_keyboard_state(state):\n...     if state.buttons:\n...         print(f\"Keys pressed: {state.buttons}\")\n&gt;&gt;&gt; listener = KeyboardStateListener().configure(callback=on_keyboard_state)\n&gt;&gt;&gt; listener.start()\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.keyboard_mouse.listeners.MouseStateListener","title":"mouse_state","text":"<p>               Bases: <code>Listener</code></p> <p>Periodically reports the current mouse state.</p> <p>This listener calls the callback function every second with the current mouse state, including position and pressed buttons.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def on_mouse_state(state):\n...     print(f\"Mouse at ({state.x}, {state.y}), buttons: {state.buttons}\")\n&gt;&gt;&gt; listener = MouseStateListener().configure(callback=on_mouse_state)\n&gt;&gt;&gt; listener.start()\n</code></pre>"},{"location":"env/plugins/desktop/#owa.env.desktop.window.listeners.WindowListener","title":"window","text":"<p>               Bases: <code>Listener</code></p> <p>Periodically monitors and reports the currently active window.</p> <p>This listener calls the callback function every second with information about the currently active window, including title, position, and handle.</p> <p>Examples:</p> <p>Monitor active window changes:</p> <pre><code>&gt;&gt;&gt; def on_window_change(window):\n...     if window:\n...         print(f\"Active window: {window.title}\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; listener = WindowListener().configure(callback=on_window_change)\n&gt;&gt;&gt; listener.start()\n&gt;&gt;&gt; # ... listener runs in background ...\n&gt;&gt;&gt; listener.stop()\n&gt;&gt;&gt; listener.join()\n</code></pre> <p>Track window focus for automation:</p> <pre><code>&gt;&gt;&gt; def track_focus(window):\n...     if window and \"notepad\" in window.title.lower():\n...         print(\"Notepad is now active!\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; listener = WindowListener().configure(callback=track_focus)\n&gt;&gt;&gt; listener.start()\n</code></pre>"},{"location":"env/plugins/gst/","title":"Gstreamer Environment","text":"<p>To see detailed implementation, skim over owa_env_gst. API Docs is being written WIP.</p>"},{"location":"env/plugins/gst/#examples","title":"Examples","text":"<ul> <li> <p>example of <code>gst/screen</code> listener     <pre><code>from owa.core.registry import LISTENERS\nimport cv2\nimport numpy as np\n\n# Components automatically available - no activation needed!\n\n# Define a callback to process frames\ndef process_frame(frame):\n    # Display the frame\n    cv2.imshow(\"Screen Capture\", frame.frame_arr)\n    cv2.waitKey(1)\n\n# Create and configure the listener\nscreen = LISTENERS[\"gst/screen\"]().configure(\n    callback=process_frame,\n    fps=30,\n    show_cursor=True\n)\n\n# Run the screen capture\nwith screen.session:\n    input(\"Press Enter to stop\")\n</code></pre></p> <p>For performance metrics: <pre><code>def process_with_metrics(frame, metrics):\n    print(f\"FPS: {metrics.fps:.2f}, Latency: {metrics.latency*1000:.2f} ms\")\n    cv2.imshow(\"Screen\", frame.frame_arr)\n    cv2.waitKey(1)\n\nscreen.configure(callback=process_with_metrics)\n</code></pre></p> </li> <li> <p>example of <code>gst/screen_capture</code> runnable     <pre><code>from owa.core.registry import RUNNABLES\n\n# Components automatically available - no activation needed!\nscreen_capture = RUNNABLES[\"gst/screen_capture\"]().configure(fps=60)\n\nwith screen_capture.session:\n    for _ in range(10):\n        frame = screen_capture.grab()\n        print(f\"Shape: {frame.frame_arr.shape}\")\n</code></pre></p> </li> </ul>"},{"location":"env/plugins/gst/#known-issues","title":"Known Issues","text":"<ul> <li>Currently, we only supports Windows OS. Other OS support is in TODO-list, but it's priority is not high.</li> <li> <p>Currently, we only supports device with NVIDIA GPU. This is also in TODO-list, it's priority is higher than multi-OS support.</p> </li> <li> <p>When capturing some screen with <code>WGC</code>(Windows Graphics Capture API, it's being activate when you specify window handle), and with some desktop(not all), below issues are observed.</p> <ul> <li>maximum FPS can't exceed maximum Hz of physical monitor.</li> <li>When capturing <code>Windows Terminal</code> and <code>Discord</code>, the following case was reported. I also guess this phenomena is because of usage of <code>WGC</code>.<ul> <li>When there's no change in window, FPS drops to 1-5 frame.</li> <li>When there's change(e.g. mouse movement) in window, FPS straightly recovers to 60+.</li> </ul> </li> </ul> </li> </ul>"},{"location":"env/plugins/gst/#auto-generated-documentation","title":"Auto-generated documentation","text":""},{"location":"env/plugins/gst/#gst","title":"gst plugin 0.3.9.post1","text":"<p>High-performance GStreamer-based screen capture and recording plugin</p> <p>Author: OWA Development Team</p>"},{"location":"env/plugins/gst/#gst-listeners","title":"Listeners","text":"<p>Usage: To use listener components, import <code>LISTENERS</code> from <code>owa.core</code> and call the <code>configure()</code> method with a <code>callback</code> function:</p> <pre><code>from owa.core import LISTENERS\n\n# Configure a listener component (replace 'component_name' with actual name)\nlistener = LISTENERS[\"gst/component_name\"]\nlistener.configure(callback=my_callback, your_other_arguments)\n\n# Use the listener in a context manager\nwith listener.session as active_listener:\n    # The listener is now running and will call my_callback when events occur\n    pass  # Your main code here</code></pre> <p>Note: The <code>callback</code> argument is required. The <code>on_configure()</code> method shown in the documentation is an internal method called by <code>configure()</code>.</p>"},{"location":"env/plugins/gst/#owa.env.gst.screen.listeners.ScreenListener","title":"screen","text":"<p>               Bases: <code>GstPipelineRunner</code></p> <p>High-performance GStreamer-based screen capture listener for real-time frame processing.</p> <p>Captures screen content and delivers frames to a callback function. Can capture specific windows, monitors, or the entire screen.</p> <p>Example: <pre><code>from owa.core.registry import LISTENERS\nimport cv2\nimport numpy as np\n\n# Define a callback to process frames\ndef process_frame(frame):\n    # Display the frame\n    cv2.imshow(\"Screen Capture\", frame.frame_arr)\n    cv2.waitKey(1)\n\n# Create and configure the listener\nscreen = LISTENERS[\"screen\"]().configure(\n    callback=process_frame,\n    fps=30,\n    show_cursor=True\n)\n\n# Run the screen capture\nwith screen.session:\n    input(\"Press Enter to stop\")\n</code></pre></p> <p>For performance metrics: <pre><code>def process_with_metrics(frame, metrics):\n    print(f\"FPS: {metrics.fps:.2f}, Latency: {metrics.latency*1000:.2f} ms\")\n    cv2.imshow(\"Screen\", frame.frame_arr)\n    cv2.waitKey(1)\n\nscreen.configure(callback=process_with_metrics)\n</code></pre></p>"},{"location":"env/plugins/gst/#owa.env.gst.screen.listeners.ScreenListener.on_configure","title":"on_configure","text":"<pre><code>on_configure(\n    *,\n    callback: Callable,\n    show_cursor: bool = True,\n    fps: float = 60,\n    window_name: str | None = None,\n    monitor_idx: int | None = None,\n    additional_properties: dict | None = None,\n) -&gt; bool\n</code></pre> <p>Configure the GStreamer pipeline for screen capture.</p> <p>Other Parameters:</p> Name Type Description <code>callback</code> <code>Callable</code> <p>Function to call with each captured frame</p> <code>show_cursor</code> <code>bool</code> <p>Whether to show the cursor in the capture.</p> <code>fps</code> <code>float</code> <p>Frames per second.</p> <code>window_name</code> <code>str | None</code> <p>(Optional) specific window to capture.</p> <code>monitor_idx</code> <code>int | None</code> <p>(Optional) specific monitor index.</p> <code>additional_properties</code> <code>dict | None</code> <p>(Optional) additional arguments to pass to the pipeline.</p> Source code in <code>projects/owa-env-gst/owa/env/gst/screen/listeners.py</code> <pre><code>def on_configure(\n    self,\n    *,\n    callback: Callable,\n    show_cursor: bool = True,\n    fps: float = 60,\n    window_name: str | None = None,\n    monitor_idx: int | None = None,\n    additional_properties: dict | None = None,\n) -&gt; bool:\n    \"\"\"\n    Configure the GStreamer pipeline for screen capture.\n\n    Keyword Arguments:\n        callback: Function to call with each captured frame\n        show_cursor (bool): Whether to show the cursor in the capture.\n        fps (float): Frames per second.\n        window_name (str | None): (Optional) specific window to capture.\n        monitor_idx (int | None): (Optional) specific monitor index.\n        additional_properties (dict | None): (Optional) additional arguments to pass to the pipeline.\n    \"\"\"\n    # Construct the pipeline description\n    pipeline_description = screen_capture_pipeline(\n        show_cursor=show_cursor,\n        fps=fps,\n        window_name=window_name,\n        monitor_idx=monitor_idx,\n        additional_properties=additional_properties,\n    )\n    logger.debug(f\"Constructed pipeline: {pipeline_description}\")\n    super().on_configure(pipeline_description)\n\n    wrapped_callback = build_screen_callback(callback)\n    self.register_appsink_callback(wrapped_callback)\n</code></pre>"},{"location":"env/plugins/gst/#owa.env.gst.omnimodal.appsink_recorder.AppsinkRecorder","title":"omnimodal.appsink_recorder","text":"<p>               Bases: <code>GstPipelineRunner</code></p> <p>High-performance screen recorder using GStreamer appsink for real-time processing.</p> <p>This recorder captures screen content and saves it to a file while providing real-time frame notifications through a callback mechanism. It supports hardware acceleration and various output formats.</p> <p>Examples:</p> <p>Basic screen recording to file:</p> <pre><code>&gt;&gt;&gt; def on_frame(screen_data):\n...     print(f\"Recording frame at {screen_data.utc_ns}\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; recorder = AppsinkRecorder()\n&gt;&gt;&gt; recorder.configure(\n...     filesink_location=\"output.mkv\",\n...     callback=on_frame\n... )\n&gt;&gt;&gt; recorder.start()\n</code></pre> <p>Recording with custom resolution:</p> <pre><code>&gt;&gt;&gt; recorder.configure(\n...     filesink_location=\"recording.mkv\",\n...     callback=my_callback,\n...     width=1920,\n...     height=1080\n... )\n</code></pre>"},{"location":"env/plugins/gst/#owa.env.gst.omnimodal.appsink_recorder.AppsinkRecorder.on_configure","title":"on_configure","text":"<pre><code>on_configure(\n    filesink_location: str,\n    *args: Any,\n    callback: Callable,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Configure the appsink recorder with output location and callback.</p> <p>Parameters:</p> Name Type Description Default <code>filesink_location</code> <code>str</code> <p>Path where the recording will be saved.</p> required <code>*args</code> <code>Any</code> <p>Additional positional arguments for pipeline configuration.</p> <code>()</code> <code>callback</code> <code>Callable</code> <p>Function to call for each recorded frame.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for pipeline configuration.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Configuration is applied to the recorder instance.</p> Source code in <code>projects/owa-env-gst/owa/env/gst/omnimodal/appsink_recorder.py</code> <pre><code>def on_configure(self, filesink_location: str, *args: Any, callback: Callable, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Configure the appsink recorder with output location and callback.\n\n    Args:\n        filesink_location: Path where the recording will be saved.\n        *args: Additional positional arguments for pipeline configuration.\n        callback: Function to call for each recorded frame.\n        **kwargs: Additional keyword arguments for pipeline configuration.\n\n    Returns:\n        None: Configuration is applied to the recorder instance.\n    \"\"\"\n    # if filesink_location does not exist, create it and warn the user\n    if not Path(filesink_location).parent.exists():\n        Path(filesink_location).parent.mkdir(parents=True, exist_ok=True)\n        logger.warning(f\"Output directory {filesink_location} does not exist. Creating it.\")\n\n    # convert to posix path. this is required for gstreamer executable.\n    filesink_location = Path(filesink_location).as_posix()\n\n    pipeline_description = appsink_recorder_pipeline(filesink_location, *args, **kwargs)\n    logger.debug(f\"Constructed pipeline: {pipeline_description}\")\n    super().on_configure(pipeline_description)\n\n    identity = self.pipeline.get_by_name(\"ts\")\n\n    notified_shape = None\n\n    def parse_shape_from_scale():\n        \"\"\"Parse the shape from the d3d11scale element.\"\"\"\n        scale = self.pipeline.get_by_name(\"d3d11scale0\")\n        # Get the source and sink capabilities\n        sink_caps = scale.get_static_pad(\"sink\").get_current_caps()\n        src_caps = scale.get_static_pad(\"src\").get_current_caps()\n        if sink_caps and src_caps:\n            sink_structure = sink_caps.get_structure(0)\n            src_structure = src_caps.get_structure(0)\n            return (sink_structure.get_value(\"width\"), sink_structure.get_value(\"height\")), (\n                src_structure.get_value(\"width\"),\n                src_structure.get_value(\"height\"),\n            )\n        logger.warning(\"Failed to get sink or source capabilities.\")\n        return None, None\n\n    def buffer_probe_callback(pad: Gst.Pad, info: Gst.PadProbeInfo):\n        \"\"\"Callback function to handle buffer probe events.\"\"\"\n\n        nonlocal notified_shape\n        buf = info.get_buffer()\n        frame_time_ns = time.time_ns()\n\n        clock = self.pipeline.get_clock()\n        elapsed = clock.get_time() - self.pipeline.get_base_time()\n        latency = elapsed - buf.pts\n\n        # warn if latency is too high, e.g. &gt; 100ms\n        if latency &gt; 100 * Gst.MSECOND:\n            logger.warning(f\"High latency: {latency / Gst.MSECOND:.2f}ms\")\n\n        original_shape, shape = parse_shape_from_scale()\n        if notified_shape != (original_shape, shape):\n            logger.success(f\"Video's original shape: {original_shape}, rescaled shape: {shape}\")\n            notified_shape = (original_shape, shape)\n\n        callback(\n            ScreenEmitted(\n                path=filesink_location,\n                pts=buf.pts,\n                utc_ns=frame_time_ns,\n                original_shape=original_shape,\n                shape=shape,\n            )\n        )\n        return Gst.PadProbeReturn.OK\n\n    identity.get_static_pad(\"src\").add_probe(Gst.PadProbeType.BUFFER, buffer_probe_callback)\n    self.enable_fps_display()\n</code></pre>"},{"location":"env/plugins/gst/#gst-runnables","title":"Runnables","text":"<p>Usage: To use runnable components, import <code>RUNNABLES</code> from <code>owa.core</code> and call the <code>configure()</code> method (not <code>on_configure()</code>):</p> <pre><code>from owa.core import RUNNABLES\n\n# Configure a runnable component (replace 'component_name' with actual name)\nrunnable = RUNNABLES[\"gst/component_name\"]\nrunnable.configure(your_arguments)\n\n# Use the runnable in a context manager\nwith runnable.session as active_runnable:\n    # The runnable is now running in the background\n    pass  # Your main code here</code></pre> <p>Note: The <code>on_configure()</code> method shown in the documentation is an internal method called by <code>configure()</code>.</p>"},{"location":"env/plugins/gst/#owa.env.gst.screen.runnable.ScreenCapture","title":"screen_capture","text":"<p>               Bases: <code>ScreenListener</code></p> <p>High-performance screen capture runnable using GStreamer pipeline for continuous frame grabbing.</p> <p>Captures screen frames continuously and makes the latest frame available through a thread-safe interface.</p> <p>Example: <pre><code>from owa.core.registry import RUNNABLES\n\nscreen_capture = RUNNABLES[\"screen_capture\"]().configure(fps=60)\n\nwith screen_capture.session:\n    for _ in range(10):\n        frame = screen_capture.grab()\n        print(f\"Shape: {frame.frame_arr.shape}\")\n</code></pre></p>"},{"location":"env/plugins/gst/#owa.env.gst.screen.runnable.ScreenCapture.on_configure","title":"on_configure","text":"<pre><code>on_configure(*args: Any, **kwargs: Any) -&gt; ScreenCapture\n</code></pre> <p>Configure and start the screen listener.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Additional positional arguments for screen capture configuration.</p> <code>()</code> <code>fps</code> <code>float</code> <p>Frames per second for capture.</p> required <code>window_name</code> <code>str</code> <p>Window to capture. If None, captures entire screen.</p> required <code>monitor_idx</code> <code>int</code> <p>Monitor index to capture.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for screen capture configuration.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>ScreenCapture</code> <code>ScreenCapture</code> <p>Configured screen capture instance.</p> Source code in <code>projects/owa-env-gst/owa/env/gst/screen/runnable.py</code> <pre><code>def on_configure(self, *args: Any, **kwargs: Any) -&gt; \"ScreenCapture\":\n    \"\"\"\n    Configure and start the screen listener.\n\n    Args:\n        *args: Additional positional arguments for screen capture configuration.\n        fps (float): Frames per second for capture.\n        window_name (str, optional): Window to capture. If None, captures entire screen.\n        monitor_idx (int, optional): Monitor index to capture.\n        **kwargs: Additional keyword arguments for screen capture configuration.\n\n    Returns:\n        ScreenCapture: Configured screen capture instance.\n    \"\"\"\n    self.queue = deque(maxlen=1)  # Holds the most recent frame\n    self._event = threading.Event()\n\n    def on_frame(frame):\n        self.queue.append(frame)\n        self._event.set()\n\n    super().on_configure(callback=on_frame, *args, **kwargs)\n    return self\n</code></pre>"},{"location":"env/plugins/gst/#owa.env.gst.screen.runnable.ScreenCapture.grab","title":"grab","text":"<pre><code>grab() -&gt; ScreenEmitted\n</code></pre> <p>Get the most recent frame (blocks until frame is available).</p> <p>Returns:</p> Name Type Description <code>ScreenEmitted</code> <code>ScreenEmitted</code> <p>Latest captured frame with timestamp.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>If no frame is received within 1 second.</p> Source code in <code>projects/owa-env-gst/owa/env/gst/screen/runnable.py</code> <pre><code>def grab(self) -&gt; ScreenEmitted:\n    \"\"\"\n    Get the most recent frame (blocks until frame is available).\n\n    Returns:\n        ScreenEmitted: Latest captured frame with timestamp.\n\n    Raises:\n        TimeoutError: If no frame is received within 1 second.\n    \"\"\"\n    if not self._event.wait(timeout=1.0):\n        raise TimeoutError(\"Timeout waiting for frame\")\n    self._event.clear()\n    return self.queue[0]\n</code></pre>"},{"location":"env/plugins/gst/#owa.env.gst.omnimodal.subprocess_recorder.SubprocessRecorder","title":"omnimodal.subprocess_recorder","text":"<pre><code>SubprocessRecorder(*args, **kwargs)\n</code></pre> <p>               Bases: <code>SubprocessRunner</code></p> <p>High-performance screen and audio recorder using GStreamer subprocess.</p> <p>This recorder runs GStreamer as a subprocess to capture screen content and audio, providing excellent performance and stability for long recordings. Supports various output formats and hardware acceleration.</p> <p>Examples:</p> <p>Basic screen recording with audio:</p> <pre><code>&gt;&gt;&gt; recorder = SubprocessRecorder()\n&gt;&gt;&gt; recorder.configure(\n...     filesink_location=\"recording.mkv\",\n...     record_audio=True,\n...     record_video=True,\n...     fps=30\n... )\n&gt;&gt;&gt; recorder.start()\n&gt;&gt;&gt; # ... recording runs in background ...\n&gt;&gt;&gt; recorder.stop()\n</code></pre> <p>Video-only recording with custom settings:</p> <pre><code>&gt;&gt;&gt; recorder.configure(\n...     filesink_location=\"video_only.mp4\",\n...     record_audio=False,\n...     record_video=True,\n...     fps=60,\n...     show_cursor=False\n... )\n</code></pre> Source code in <code>projects/owa-core/owa/core/runnable.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"\n    Initialize a new RunnableThread. Whole arguments are passed to threading.Thread.\n\n    To configure the runnable, write your own on_configure method instead.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._stop_event = threading.Event()\n</code></pre>"},{"location":"env/plugins/gst/#owa.env.gst.omnimodal.subprocess_recorder.SubprocessRecorder.on_configure","title":"on_configure","text":"<pre><code>on_configure(\n    filesink_location: str,\n    record_audio: bool = True,\n    record_video: bool = True,\n    record_timestamp: bool = True,\n    enable_fpsdisplaysink: bool = True,\n    show_cursor: bool = True,\n    fps: float = 60,\n    window_name: Optional[str] = None,\n    monitor_idx: Optional[int] = None,\n    additional_properties: Optional[dict] = None,\n) -&gt; None\n</code></pre> <p>Prepare the GStreamer pipeline command for subprocess recording.</p> <p>Parameters:</p> Name Type Description Default <code>filesink_location</code> <code>str</code> <p>Path where the recording will be saved.</p> required <code>record_audio</code> <code>bool</code> <p>Whether to include audio in the recording.</p> <code>True</code> <code>record_video</code> <code>bool</code> <p>Whether to include video in the recording.</p> <code>True</code> <code>record_timestamp</code> <code>bool</code> <p>Whether to include timestamp information.</p> <code>True</code> <code>enable_fpsdisplaysink</code> <code>bool</code> <p>Whether to enable FPS display during recording.</p> <code>True</code> <code>show_cursor</code> <code>bool</code> <p>Whether to show the cursor in the recording.</p> <code>True</code> <code>fps</code> <code>float</code> <p>Frames per second for video recording.</p> <code>60</code> <code>window_name</code> <code>Optional[str]</code> <p>Specific window to record (optional).</p> <code>None</code> <code>monitor_idx</code> <code>Optional[int]</code> <p>Monitor index to record from (optional).</p> <code>None</code> <code>additional_properties</code> <code>Optional[dict]</code> <p>Additional pipeline properties (optional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Configuration is stored internally for subprocess execution.</p> Source code in <code>projects/owa-env-gst/owa/env/gst/omnimodal/subprocess_recorder.py</code> <pre><code>def on_configure(\n    self,\n    filesink_location: str,\n    record_audio: bool = True,\n    record_video: bool = True,\n    record_timestamp: bool = True,\n    enable_fpsdisplaysink: bool = True,\n    show_cursor: bool = True,\n    fps: float = 60,\n    window_name: Optional[str] = None,\n    monitor_idx: Optional[int] = None,\n    additional_properties: Optional[dict] = None,\n) -&gt; None:\n    \"\"\"\n    Prepare the GStreamer pipeline command for subprocess recording.\n\n    Args:\n        filesink_location: Path where the recording will be saved.\n        record_audio: Whether to include audio in the recording.\n        record_video: Whether to include video in the recording.\n        record_timestamp: Whether to include timestamp information.\n        enable_fpsdisplaysink: Whether to enable FPS display during recording.\n        show_cursor: Whether to show the cursor in the recording.\n        fps: Frames per second for video recording.\n        window_name: Specific window to record (optional).\n        monitor_idx: Monitor index to record from (optional).\n        additional_properties: Additional pipeline properties (optional).\n\n    Returns:\n        None: Configuration is stored internally for subprocess execution.\n    \"\"\"\n\n    # if filesink_location does not exist, create it and warn the user\n    if not Path(filesink_location).parent.exists():\n        Path(filesink_location).parent.mkdir(parents=True, exist_ok=True)\n        logger.warning(f\"Output directory {filesink_location} does not exist. Creating it.\")\n\n    # convert to posix path. this is required for gstreamer executable.\n    filesink_location = Path(filesink_location).as_posix()\n\n    pipeline_description = subprocess_recorder_pipeline(\n        filesink_location=filesink_location,\n        record_audio=record_audio,\n        record_video=record_video,\n        record_timestamp=record_timestamp,\n        enable_fpsdisplaysink=enable_fpsdisplaysink,\n        show_cursor=show_cursor,\n        fps=fps,\n        window_name=window_name,\n        monitor_idx=monitor_idx,\n        additional_properties=additional_properties,\n    )\n\n    super().on_configure(f\"gst-launch-1.0.exe -e -v {pipeline_description}\".split())\n</code></pre>"},{"location":"env/plugins/std/","title":"Standard Environment Plugin","text":"<p>The Standard Environment plugin (<code>owa.env.std</code>) is a core component of the Open World Agents framework. It provides essential functionalities related to time management and clock operations, which are fundamental for various time-based tasks and event scheduling within the system.</p>"},{"location":"env/plugins/std/#features","title":"Features","text":"<ul> <li>Time Functions: The plugin registers functions like <code>std/time_ns</code> that return the current time in nanoseconds.</li> <li>Tick Listener: It includes a <code>std/tick</code> listener that can be configured to execute callbacks at specified intervals.</li> </ul>"},{"location":"env/plugins/std/#usage","title":"Usage","text":"<p>The Standard Environment plugin is automatically available when you install <code>owa-core</code>. No manual activation needed!</p> <pre><code># Components automatically available after installation\nfrom owa.core.registry import CALLABLES, LISTENERS\n</code></pre> <p>You can access the registered functions and listeners via the global registries using the unified <code>namespace/name</code> pattern:</p> <pre><code>from owa.core.registry import CALLABLES, LISTENERS\n\n# Get the current time in nanoseconds\ncurrent_time_ns = CALLABLES[\"std/time_ns\"]()\nprint(f\"Current time (ns): {current_time_ns}\")\n\n# Configure and start a tick listener\ndef on_tick():\n    print(f\"Tick at {CALLABLES['std/time_ns']()}\")\n\ntick_listener = LISTENERS[\"std/tick\"]()\ntick_listener.configure(callback=on_tick, interval=1)  # Tick every second\ntick_listener.start()\n\n# Run for a few seconds to see the tick listener in action\nimport time\ntime.sleep(5)\n\n# Stop the tick listener\ntick_listener.stop()\ntick_listener.join()\n</code></pre>"},{"location":"env/plugins/std/#components","title":"Components","text":""},{"location":"env/plugins/std/#time-functions","title":"Time Functions","text":"<ul> <li><code>std/time_ns</code>: Returns the current time in nanoseconds. This function is registered in the <code>CALLABLES</code> registry.</li> </ul>"},{"location":"env/plugins/std/#tick-listener","title":"Tick Listener","text":"<ul> <li><code>std/tick</code>: A listener that triggers a callback at specified intervals. This listener is registered in the <code>LISTENERS</code> registry and can be configured with an interval in seconds.</li> </ul>"},{"location":"env/plugins/std/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the Standard Environment plugin:</p> <pre><code>from owa.core.registry import CALLABLES, LISTENERS\n\n# Components automatically available - no activation needed!\n\n# Print the current time in nanoseconds\nprint(CALLABLES[\"std/time_ns\"]())\n\n# Define a callback function for the tick listener\ndef tick_callback():\n    print(f\"Tick at {CALLABLES['std/time_ns']()}\")\n\n# Configure and start the tick listener\ntick_listener = LISTENERS[\"std/tick\"]().configure(callback=tick_callback, interval=1)\ntick_listener.start()\n\n# Let the listener run for 5 seconds\nimport time\ntime.sleep(5)\n\n# Stop the tick listener\ntick_listener.stop()\ntick_listener.join()\n</code></pre> <p>This example demonstrates how to use the automatically available components, retrieve the current time, and set up a tick listener that prints the current time every second.</p> <p>The Standard Environment plugin is a fundamental part of the Open World Agents framework, providing essential time-based functionalities that can be leveraged by other modules and applications.</p>"},{"location":"env/plugins/std/#auto-generated-documentation","title":"Auto-generated documentation","text":""},{"location":"env/plugins/std/#std","title":"std plugin 0.1.0","text":"<p>Standard system components for OWA</p> <p>Author: OWA Development Team</p>"},{"location":"env/plugins/std/#std-callables","title":"Callables","text":"<p>Usage: To use callable components, import <code>CALLABLES</code> from <code>owa.core</code> and access them by their component name:</p> <pre><code>from owa.core import CALLABLES\n\n# Access a callable component (replace 'component_name' with actual name)\ncallable_func = CALLABLES[\"std/component_name\"]\nresult = callable_func(your_arguments)</code></pre>"},{"location":"env/plugins/std/#owa.env.std.clock.time_ns","title":"time_ns","text":"<pre><code>time_ns() -&gt; int\n</code></pre> <p>Return the current time in nanoseconds since the Unix epoch.</p> <p>This function provides high-precision timing for OWA components, useful for performance measurement and precise scheduling.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Current time in nanoseconds since Unix epoch (January 1, 1970)</p> <p>Examples:</p> <p>Get current timestamp:</p> <pre><code>&gt;&gt;&gt; current_time = time_ns()\n&gt;&gt;&gt; print(f\"Current time: {current_time}\")\n</code></pre> <p>Measure execution time:</p> <pre><code>&gt;&gt;&gt; start = time_ns()\n&gt;&gt;&gt; # ... some operation ...\n&gt;&gt;&gt; duration = time_ns() - start\n&gt;&gt;&gt; print(f\"Operation took {duration} nanoseconds\")\n</code></pre> Source code in <code>projects/owa-core/owa/env/std/clock.py</code> <pre><code>def time_ns() -&gt; int:\n    \"\"\"\n    Return the current time in nanoseconds since the Unix epoch.\n\n    This function provides high-precision timing for OWA components,\n    useful for performance measurement and precise scheduling.\n\n    Returns:\n        int: Current time in nanoseconds since Unix epoch (January 1, 1970)\n\n    Examples:\n        Get current timestamp:\n\n        &gt;&gt;&gt; current_time = time_ns()\n        &gt;&gt;&gt; print(f\"Current time: {current_time}\")\n\n        Measure execution time:\n\n        &gt;&gt;&gt; start = time_ns()\n        &gt;&gt;&gt; # ... some operation ...\n        &gt;&gt;&gt; duration = time_ns() - start\n        &gt;&gt;&gt; print(f\"Operation took {duration} nanoseconds\")\n    \"\"\"\n    return time.time_ns()\n</code></pre>"},{"location":"env/plugins/std/#std-listeners","title":"Listeners","text":"<p>Usage: To use listener components, import <code>LISTENERS</code> from <code>owa.core</code> and call the <code>configure()</code> method with a <code>callback</code> function:</p> <pre><code>from owa.core import LISTENERS\n\n# Configure a listener component (replace 'component_name' with actual name)\nlistener = LISTENERS[\"std/component_name\"]\nlistener.configure(callback=my_callback, your_other_arguments)\n\n# Use the listener in a context manager\nwith listener.session as active_listener:\n    # The listener is now running and will call my_callback when events occur\n    pass  # Your main code here</code></pre> <p>Note: The <code>callback</code> argument is required. The <code>on_configure()</code> method shown in the documentation is an internal method called by <code>configure()</code>.</p>"},{"location":"env/plugins/std/#owa.env.std.clock.ClockTickListener","title":"tick","text":"<p>               Bases: <code>Listener</code></p> <p>A listener that triggers callbacks at regular intervals.</p> <p>This listener provides precise timing for periodic tasks in OWA, supporting configurable intervals and automatic callback execution.</p> <p>Examples:</p> <p>Basic usage with 1-second interval:</p> <pre><code>&gt;&gt;&gt; def on_tick():\n...     print(f\"Tick at {time_ns()}\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; listener = ClockTickListener()\n&gt;&gt;&gt; listener.configure(callback=on_tick, interval=1)\n&gt;&gt;&gt; listener.start()\n&gt;&gt;&gt; # ... listener runs in background ...\n&gt;&gt;&gt; listener.stop()\n&gt;&gt;&gt; listener.join()\n</code></pre> <p>Custom interval timing:</p> <pre><code>&gt;&gt;&gt; listener = ClockTickListener()\n&gt;&gt;&gt; listener.configure(callback=my_callback, interval=0.5)  # 500ms\n&gt;&gt;&gt; listener.start()\n</code></pre>"},{"location":"env/plugins/std/#owa.env.std.clock.ClockTickListener.on_configure","title":"on_configure","text":"<pre><code>on_configure(*, interval: float = 1)\n</code></pre> <p>Configure the tick interval for the listener.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>float</code> <p>Time between ticks in seconds. Defaults to 1.0.</p> <code>1</code> <p>Examples:</p> <p>Configure for 100ms intervals:</p> <pre><code>&gt;&gt;&gt; listener.configure(callback=my_func, interval=0.1)\n</code></pre> Source code in <code>projects/owa-core/owa/env/std/clock.py</code> <pre><code>def on_configure(self, *, interval: float = 1):\n    \"\"\"\n    Configure the tick interval for the listener.\n\n    Args:\n        interval (float): Time between ticks in seconds. Defaults to 1.0.\n\n    Examples:\n        Configure for 100ms intervals:\n\n        &gt;&gt;&gt; listener.configure(callback=my_func, interval=0.1)\n    \"\"\"\n    self.interval = interval * S_TO_NS\n</code></pre>"},{"location":"env/plugins/std/#owa.env.std.clock.ClockTickListener.loop","title":"loop","text":"<pre><code>loop(*, stop_event, callback)\n</code></pre> <p>Main loop that executes callbacks at configured intervals.</p> <p>Parameters:</p> Name Type Description Default <code>stop_event</code> <p>Threading event to signal when to stop</p> required <code>callback</code> <p>Function to call at each tick</p> required Note <p>This method runs in a separate thread and maintains precise timing by accounting for callback execution time.</p> <p>@skip-quality-check: internal-api</p> Source code in <code>projects/owa-core/owa/env/std/clock.py</code> <pre><code>def loop(self, *, stop_event, callback):\n    \"\"\"\n    Main loop that executes callbacks at configured intervals.\n\n    Args:\n        stop_event: Threading event to signal when to stop\n        callback: Function to call at each tick\n\n    Note:\n        This method runs in a separate thread and maintains precise timing\n        by accounting for callback execution time.\n\n    @skip-quality-check: internal-api\n    \"\"\"\n    self._last_called = time.time()\n    while not stop_event.is_set():\n        callback()\n        to_sleep = self.interval - (time.time() - self._last_called)\n        if to_sleep &gt; 0:\n            stop_event.wait(to_sleep / S_TO_NS)\n</code></pre>"}]}