name: Pytest on Windows (common)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  test-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash -el {0}

    env:
      PYTHONIOENCODING: utf-8 # https://github.com/Textualize/rich/issues/212
      PYTHONUTF8: 1 # from https://github.com/ndonkoHenri/flet-github-action-workflows/blob/main/.github/workflows/windows-build.yml#L29C3-L29C16
      # below line is legacy line, but I'm keeping it here for reference to know where the packages are installed
      # GST_PLUGIN_PATH: "D:\\a\\open-world-agents\\open-world-agents\\projects\\owa-env-gst\\gst-plugins"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Conda Environment
        uses: ./.github/actions/setup-conda-env
        with:
          os: windows
          cache-number: '0'
          cache-suffix: 'pytest'

      - name: Setup uv Environment
        uses: ./.github/actions/setup-uv-env
        with:
          show-uv-cache-info: 'true'

      - name: Install dependencies
        run: vuv install --dev

      - name: Run pytest with coverage
        run: pytest --cov --cov-report=xml --cov-report=html --cov-report=term

      - name: Install owa-env-example
        run: vuv pip install -e projects/owa-env-example

      - name: Run pytest for owa-env-example with coverage
        run: pytest projects/owa-env-example/tests --cov=projects/owa-env-example --cov-append --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage reports to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_number }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Extract and display coverage
        run: |
          COVERAGE=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.1f}')
          ")
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Files Available:" >> $GITHUB_STEP_SUMMARY
          echo "- **HTML Report**: Download artifacts and open \`htmlcov/index.html\`" >> $GITHUB_STEP_SUMMARY
          echo "- **XML Report**: Available in \`coverage.xml\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Terminal Report**: See workflow logs above" >> $GITHUB_STEP_SUMMARY

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        run: |
          COVERAGE=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.1f}')
          ")

          # Create PR comment using GitHub CLI (pre-installed in GitHub Actions)
          gh pr comment ${{ github.event.number }} --body "## Coverage Report

          Overall Coverage: ${COVERAGE}%

          Coverage artifacts are available for download from this workflow run.

          To view detailed coverage:
          1. Download the coverage-report-${{ github.run_number }} artifact
          2. Extract and open htmlcov/index.html in your browser"
        env:
          GH_TOKEN: ${{ github.token }}